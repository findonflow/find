EMPTY findGo
EMPTY tasks/AirdropNameVoucher
EMPTY tasks/checkDapperTx
EMPTY tasks/addCatalog
EMPTY tasks/client
EMPTY tasks/collectionDataTest
EMPTY tasks/dandy
EMPTY tasks/dapperMarket
EMPTY tasks/event
EMPTY tasks/findDapperMarket
EMPTY tasks/mainnetMarket
EMPTY tasks/mainnetMarketListingEnquiry
EMPTY tasks/nfg
EMPTY tasks/partyMansion
EMPTY tasks/registerGift
EMPTY tasks/testnetMarket
EMPTY tasks/testnetUser
EMPTY utils
panic: could not deploy contracts: errors : []:  Admin: failed to deploy contract Admin: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> be7159078c5f85f273483acfa6498bad63a0dc4aac00ad7eec258a82c0227300:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `Profile` in `179b6b1cb6755e31.Profile`
 --> 179b6b1cb6755e31.Admin:5:7
  |
5 | import Profile from 0x179b6b1cb6755e31
  |        ^^^^^^^ available exported declarations are:


error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.Admin:6:7
  |
6 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot find declaration `FindForge` in `179b6b1cb6755e31.FindForge`
  --> 179b6b1cb6755e31.Admin:10:7
   |
10 | import FindForge from 0x179b6b1cb6755e31
   |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindForgeOrder` in `179b6b1cb6755e31.FindForgeOrder`
  --> 179b6b1cb6755e31.Admin:11:7
   |
11 | import FindForgeOrder from 0x179b6b1cb6755e31
   |        ^^^^^^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindPack` in `179b6b1cb6755e31.FindPack`
  --> 179b6b1cb6755e31.Admin:12:7
   |
12 | import FindPack from 0x179b6b1cb6755e31
   |        ^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
  --> 179b6b1cb6755e31.Admin:15:7
   |
15 | import FindViews from 0x179b6b1cb6755e31
   |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `NameVoucher` in `179b6b1cb6755e31.NameVoucher`
  --> 179b6b1cb6755e31.Admin:16:7
   |
16 | import NameVoucher from 0x179b6b1cb6755e31
   |        ^^^^^^^^^^^ available exported declarations are:


error: ambiguous intersection type
   --> 179b6b1cb6755e31.Admin:157:70
    |
157 |         access(Owner) fun register(name: String, profile: Capability<&{Profile.Public}>, leases: Capability<&{FIND.LeaseCollectionPublic}>){
    |                                                                       ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.Admin:157:109
    |
157 |         access(Owner) fun register(name: String, profile: Capability<&{Profile.Public}>, leases: Capability<&{FIND.LeaseCollectionPublic}>){
    |                                                                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.Admin:180:57
    |
180 |             let ref = getAccount(user).capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!.borrow() ?? panic("Cannot borrow reference to lease collection of user : ".concat(name))
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.Admin:180:22
    |
180 |             let ref = getAccount(user).capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!.borrow() ?? panic("Cannot borrow reference to lease collection of user : ".concat(name))
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.Admin:180:22
    |
180 |             let ref = getAccount(user).capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!.borrow() ?? panic("Cannot borrow reference to lease collection of user : ".concat(name))
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.Admin:271:68
    |
271 |             var cap = Admin.account.capabilities.storage.issue<auth(NonFungibleToken.Withdraw) &{ViewResolver.ResolverCollection, NonFungibleToken.Provider, NonFungibleToken.Collection}>(storagePath)
    |                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.Admin:290:64
    |
290 |             FindForge.adminMint(lease: packTypeName, forgeType: Type<@FindPack.Forge>() , data: mintPackData, receiver: receiver)
    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.Admin:305:21
    |
305 |             let cap= Admin.account.storage.borrow<auth(FindPack.Owner) &FindPack.Collection>(from: FindPack.DLQCollectionStoragePath)!
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.Admin:361:27
    |
361 |             let receiver = Admin.account.storage.borrow<&NameVoucher.Collection>(from: NameVoucher.CollectionStoragePath)!
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


, FindMarketAuctionSoft: failed to deploy contract FindMarketAuctionSoft: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 94953428d8ca8bae5f9599106c1bcc4f14457b425d4f743de833d85c14f83355:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
 --> 179b6b1cb6755e31.FindMarketAuctionSoft:4:7
  |
4 | import FindViews from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindMarketAuctionSoft:6:7
  |
6 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot find declaration `FindMarket` in `179b6b1cb6755e31.FindMarket`
 --> 179b6b1cb6755e31.FindMarketAuctionSoft:7:7
  |
7 | import FindMarket from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^ available exported declarations are:


error: cannot find declaration `Profile` in `179b6b1cb6755e31.Profile`
 --> 179b6b1cb6755e31.FindMarketAuctionSoft:8:7
  |
8 | import Profile from 0x179b6b1cb6755e31
  |        ^^^^^^^ available exported declarations are:


error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionSoft:263:46
    |
263 |         init (_ tenantCapability: Capability<&{FindMarket.TenantPublic}>) {
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionSoft:261:59
    |
261 |         access(contract) let tenantCapability: Capability<&{FindMarket.TenantPublic}>
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionSoft:268:40
    |
268 |         access(self) fun getTenant() : &{FindMarket.TenantPublic} {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionSoft:641:56
    |
641 |         access(all) fun borrowSaleItem(_ id: UInt64) : &{FindMarket.SaleItem} {
    |                                                         ^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionSoft:705:92
    |
705 |         init(receiver: Capability<&{FungibleToken.Receiver}>, tenantCapability: Capability<&{FindMarket.TenantPublic}>) {
    |                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionSoft:702:59
    |
702 |         access(contract) let tenantCapability: Capability<&{FindMarket.TenantPublic}>
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionSoft:711:40
    |
711 |         access(self) fun getTenant() : &{FindMarket.TenantPublic} {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionSoft:808:54
    |
808 |         access(all) fun borrowBidItem(_ id: UInt64): &{FindMarket.Bid} {
    |                                                       ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionSoft:825:82
    |
825 |     access(all) fun createEmptySaleItemCollection(_ tenantCapability: Capability<&{FindMarket.TenantPublic}>) : @SaleItemCollection {
    |                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionSoft:829:130
    |
829 |     access(all) fun createEmptyMarketBidCollection(receiver: Capability<&{FungibleToken.Receiver}>, tenantCapability: Capability<&{FindMarket.TenantPublic}>) : @MarketBidCollection {
    |                                                                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindMarketAuctionSoft:509:21
    |
509 |             if valut.balance < saleItem.auctionReservePrice {
    |                      ^^^^^^^^^^ unknown member

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindMarketAuctionSoft:510:114
    |
510 |                 panic("cannot fulfill auction reserve price was not met, cancel it without a vault ".concat(valut.balance.toString()).concat(" < ").concat(saleItem.auctionReservePrice.toString()))
    |                                                                                                                   ^^^^^^^^^^ unknown member

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionSoft:645:40
    |
645 |             return (&self.items[id] as &{FindMarket.SaleItem}?)!
    |                                         ^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionSoft:812:39
    |
812 |             return (&self.bids[id] as &{FindMarket.Bid}?)!
    |                                        ^^^^^^^^^^^^^^^^


, FUSD: failed to deploy contract FUSD: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 160675f3badc8f738179274636d4c199d7465d352b0cb033e1a709cd842cfeb2:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> f8d6e0586b0a20c7.FUSD:179:15
    |
179 |         access(FungibleToken.Withdraw) fun withdraw(amount: UFix64): @FUSD.Vault {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> f8d6e0586b0a20c7.FUSD:203:15
    |
203 |         access(FungibleToken.Withdraw) fun transfer(amount: UFix64, receiver: Capability<&{FungibleToken.Receiver}>) {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: contract `FUSD` does not conform to contract interface `ViewResolver`
 --> f8d6e0586b0a20c7.FUSD:6:21
  |
6 | access(all) contract FUSD: ViewResolver {
  |                      ^ `FUSD` is missing definitions for members: `getContractViews`, `resolveContractView`

error: too many arguments
   --> f8d6e0586b0a20c7.FUSD:124:23
    |
124 |                 return FungibleTokenMetadataViews.FTVaultData(
125 |                     storagePath: self.storagePath,
126 |                     receiverPath: self.receiverPath,
127 |                     metadataPath: self.publicPath,
128 |                     providerPath: /private/fusdVault,
129 |                     receiverLinkedType: Type<&{FungibleToken.Receiver}>(),
130 |                     metadataLinkedType: Type<&FUSD.Vault>(),
131 |                     providerLinkedType: Type<&FUSD.Vault>(),
132 |                     createEmptyVaultFunction: (fun(): @{FungibleToken.Vault} {
133 |                         return <-vaultRef.createEmptyVault()
134 |                     })
135 |                 )
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected up to 6, got 8

error: mismatched types
   --> f8d6e0586b0a20c7.FUSD:128:34
    |
128 |                     providerPath: /private/fusdVault,
    |                                   ^^^^^^^^^^^^^^^^^^ expected `Type`, got `PrivatePath`

error: mismatched types
   --> f8d6e0586b0a20c7.FUSD:130:40
    |
130 |                     metadataLinkedType: Type<&FUSD.Vault>(),
    |                                         ^^^^^^^^^^^^^^^^^^^ expected `fun(): @{FungibleToken.Vault}`, got `Type`

error: incorrect argument label
   --> f8d6e0586b0a20c7.FUSD:128:20
    |
128 |                     providerPath: /private/fusdVault,
    |                     ^^^^^^^^^^^^^ expected `receiverLinkedType`, got `providerPath`

error: incorrect argument label
   --> f8d6e0586b0a20c7.FUSD:129:20
    |
129 |                     receiverLinkedType: Type<&{FungibleToken.Receiver}>(),
    |                     ^^^^^^^^^^^^^^^^^^^ expected `metadataLinkedType`, got `receiverLinkedType`

error: incorrect argument label
   --> f8d6e0586b0a20c7.FUSD:130:20
    |
130 |                     metadataLinkedType: Type<&FUSD.Vault>(),
    |                     ^^^^^^^^^^^^^^^^^^^ expected `createEmptyVaultFunction`, got `metadataLinkedType`

error: missing access modifier for function
   --> f8d6e0586b0a20c7.FUSD:179:8
    |
179 |         access(FungibleToken.Withdraw) fun withdraw(amount: UFix64): @FUSD.Vault {
    |         ^

error: missing access modifier for function
   --> f8d6e0586b0a20c7.FUSD:203:8
    |
203 |         access(FungibleToken.Withdraw) fun transfer(amount: UFix64, receiver: Capability<&{FungibleToken.Receiver}>) {
    |         ^

error: resource `FUSD.Vault` does not conform to resource interface `FungibleToken.Vault`
  --> f8d6e0586b0a20c7.FUSD:63:25
   |
63 |     access(all) resource Vault: FungibleToken.Vault {
   |                          ^ `FUSD.Vault` is missing definitions for members: `burnCallback`
   ... 
    |
179 |         access(FungibleToken.Withdraw) fun withdraw(amount: UFix64): @FUSD.Vault {
    |                                                -------- mismatch here

error: resource `FUSD.Vault` does not conform to resource interface `FungibleToken.Vault`
  --> f8d6e0586b0a20c7.FUSD:63:25
   |
63 |     access(all) resource Vault: FungibleToken.Vault {
   |                          ^ `FUSD.Vault` is missing definitions for members: `isAvailableToWithdraw`
   ... 
    |
179 |         access(FungibleToken.Withdraw) fun withdraw(amount: UFix64): @FUSD.Vault {
    |                                                -------- mismatch here

error: resource `FUSD.Vault` does not conform to resource interface `FungibleToken.Vault`
  --> f8d6e0586b0a20c7.FUSD:63:25
   |
63 |     access(all) resource Vault: FungibleToken.Vault {
   |                          ^ `FUSD.Vault` is missing definitions for members: `burnCallback`


, LostAndFoundHelper: failed to deploy contract LostAndFoundHelper: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> fbf6e8f2067ed992b6fae1edfef2842310e1d1720d642366ca51130280f67e09:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `LostAndFound` in `f8d6e0586b0a20c7.LostAndFound`
 --> f8d6e0586b0a20c7.LostAndFoundHelper:1:7
  |
1 | import LostAndFound from 0xf8d6e0586b0a20c7
  |        ^^^^^^^^^^^^ available exported declarations are:



, FindForgeOrder: failed to deploy contract FindForgeOrder: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 8553f22e29718d26dd9649a0322afb23627e1f990885886bc03345ceeee5e026:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindForgeOrder:5:7
  |
5 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:



, FindMarketAuctionEscrow: failed to deploy contract FindMarketAuctionEscrow: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 0b46781a0ff15d56ab852f85b49ce073e0f601431a5a7f0377087b36a0e19ad1:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
 --> 179b6b1cb6755e31.FindMarketAuctionEscrow:4:7
  |
4 | import FindViews from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindMarketAuctionEscrow:6:7
  |
6 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot find declaration `FindMarket` in `179b6b1cb6755e31.FindMarket`
 --> 179b6b1cb6755e31.FindMarketAuctionEscrow:7:7
  |
7 | import FindMarket from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^ available exported declarations are:


error: cannot find declaration `Profile` in `179b6b1cb6755e31.Profile`
 --> 179b6b1cb6755e31.FindMarketAuctionEscrow:8:7
  |
8 | import Profile from 0x179b6b1cb6755e31
  |        ^^^^^^^ available exported declarations are:


error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:270:46
    |
270 |         init (_ tenantCapability: Capability<&{FindMarket.TenantPublic}>) {
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:268:59
    |
268 |         access(contract) let tenantCapability: Capability<&{FindMarket.TenantPublic}>
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:276:40
    |
276 |         access(self) fun getTenant() : &{FindMarket.TenantPublic} {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:697:56
    |
697 |         access(all) fun borrowSaleItem(_ id: UInt64) : &{FindMarket.SaleItem} {
    |                                                         ^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:758:92
    |
758 |         init(receiver: Capability<&{FungibleToken.Receiver}>, tenantCapability: Capability<&{FindMarket.TenantPublic}>) {
    |                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:755:59
    |
755 |         access(contract) let tenantCapability: Capability<&{FindMarket.TenantPublic}>
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:764:40
    |
764 |         access(self) fun getTenant() : &{FindMarket.TenantPublic} {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:874:54
    |
874 |         access(all) fun borrowBidItem(_ id: UInt64): &{FindMarket.Bid} {
    |                                                       ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:888:82
    |
888 |     access(all) fun createEmptySaleItemCollection(_ tenantCapability: Capability<&{FindMarket.TenantPublic}>) : @SaleItemCollection {
    |                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:892:130
    |
892 |     access(all) fun createEmptyMarketBidCollection(receiver: Capability<&{FungibleToken.Receiver}>, tenantCapability: Capability<&{FindMarket.TenantPublic}>) : @MarketBidCollection {
    |                                                                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:731:30
    |
731 |             return self.valut.balance
    |                               ^^^^^^^^^^ unknown member

error: value of type `{NonFungibleToken.NFT}` has no member `getID`
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:773:24
    |
773 |             let id= nft.getID()
    |                         ^^^^^ unknown member

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:775:46
    |
775 |             let vaultRef = &bid.vault as auth(FungibleToken.Withdraw) &{FungibleToken.Vault}
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot access `withdraw`: function requires `Withdraw` authorization, but reference only has `not specified` authorization
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:787:26
    |
787 |             let vault  <- vaultRef.withdraw(amount: vaultRef.getBalance())
    |                           ^^^^^^^^^^^^^^^^^

error: value of type `auth(not specified) &{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:787:61
    |
787 |             let vault  <- vaultRef.withdraw(amount: vaultRef.getBalance())
    |                                                              ^^^^^^^^^^ unknown member

error: value of type `&{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:845:37
    |
845 |             let oldBalance=bid.valut.balance
    |                                      ^^^^^^^^^^ unknown member

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:859:46
    |
859 |             let vaultRef = &bid.vault as auth(FungibleToken.Withdraw) &{FungibleToken.Vault}
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot access `withdraw`: function requires `Withdraw` authorization, but reference only has `not specified` authorization
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:863:53
    |
863 |             self.receiver.borrow()!.deposit(from: <- vaultRef.withdraw(amount: vaultRef.getBalance()))
    |                                                      ^^^^^^^^^^^^^^^^^

error: value of type `auth(not specified) &{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:863:88
    |
863 |             self.receiver.borrow()!.deposit(from: <- vaultRef.withdraw(amount: vaultRef.getBalance()))
    |                                                                                         ^^^^^^^^^^ unknown member

error: value of type `&{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:883:29
    |
883 |             return bid.valut.balance
    |                              ^^^^^^^^^^ unknown member


, GeneratedExperiences: failed to deploy contract GeneratedExperiences: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> a80e00dae390d22f4e2862a058e19e490bda6198f1f2da3c8aed2c6628910eeb:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindForge` in `179b6b1cb6755e31.FindForge`
 --> e03daebed8ca0615.GeneratedExperiences:5:7
  |
5 | import FindForge from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindPack` in `179b6b1cb6755e31.FindPack`
 --> e03daebed8ca0615.GeneratedExperiences:6:7
  |
6 | import FindPack from 0x179b6b1cb6755e31
  |        ^^^^^^^^ available exported declarations are:


error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> e03daebed8ca0615.GeneratedExperiences:227:15
    |
227 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: too many arguments
   --> e03daebed8ca0615.GeneratedExperiences:303:15
    |
303 |         return MetadataViews.NFTCollectionData(
304 |             storagePath: GeneratedExperiences.CollectionStoragePath,
305 |             publicPath: GeneratedExperiences.CollectionPublicPath,
306 |             providerPath: GeneratedExperiences.CollectionPrivatePath,
307 |             publicCollection: Type<&GeneratedExperiences.Collection>(),
308 |             publicLinkedType: Type<&GeneratedExperiences.Collection>(),
309 |             providerLinkedType: Type<auth(NonFungibleToken.Withdraw) &GeneratedExperiences.Collection>(),
310 |             createEmptyCollectionFunction: (fun (): @{NonFungibleToken.Collection} {
311 |                 return <-GeneratedExperiences.createEmptyCollection()
312 |             })
313 |         )
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected up to 5, got 7

error: mismatched types
   --> e03daebed8ca0615.GeneratedExperiences:306:26
    |
306 |             providerPath: GeneratedExperiences.CollectionPrivatePath,
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Type`, got `PrivatePath`

error: mismatched types
   --> e03daebed8ca0615.GeneratedExperiences:308:30
    |
308 |             publicLinkedType: Type<&GeneratedExperiences.Collection>(),
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `fun(): @{NonFungibleToken.Collection}`, got `Type`

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> e03daebed8ca0615.GeneratedExperiences:309:42
    |
309 |             providerLinkedType: Type<auth(NonFungibleToken.Withdraw) &GeneratedExperiences.Collection>(),
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: incorrect argument label
   --> e03daebed8ca0615.GeneratedExperiences:306:12
    |
306 |             providerPath: GeneratedExperiences.CollectionPrivatePath,
    |             ^^^^^^^^^^^^^ expected `publicCollection`, got `providerPath`

error: incorrect argument label
   --> e03daebed8ca0615.GeneratedExperiences:307:12
    |
307 |             publicCollection: Type<&GeneratedExperiences.Collection>(),
    |             ^^^^^^^^^^^^^^^^^ expected `publicLinkedType`, got `publicCollection`

error: incorrect argument label
   --> e03daebed8ca0615.GeneratedExperiences:308:12
    |
308 |             publicLinkedType: Type<&GeneratedExperiences.Collection>(),
    |             ^^^^^^^^^^^^^^^^^ expected `createEmptyCollectionFunction`, got `publicLinkedType`

error: contract `GeneratedExperiences` does not conform to contract interface `ViewResolver`
 --> e03daebed8ca0615.GeneratedExperiences:8:21
  |
8 | access(all) contract GeneratedExperiences: ViewResolver {
  |                      ^ `GeneratedExperiences` is missing definitions for members: `getContractViews`, `resolveContractView`

error: cannot infer type parameter: `T`
   --> e03daebed8ca0615.GeneratedExperiences:118:12
    |
118 |             Type<FindPack.PackRevealData>()
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> e03daebed8ca0615.GeneratedExperiences:128:17
    |
128 |             case Type<FindPack.PackRevealData>():
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: resource `GeneratedExperiences.NFT` does not conform to resource interface `NonFungibleToken.NFT`
  --> e03daebed8ca0615.GeneratedExperiences:90:25
   |
90 |     access(all) resource NFT: NonFungibleToken.NFT, ViewResolver.Resolver {
   |                          ^ `GeneratedExperiences.NFT` is missing definitions for members: `createEmptyCollection`

error: missing access modifier for function
   --> e03daebed8ca0615.GeneratedExperiences:227:8
    |
227 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |         ^

error: resource `GeneratedExperiences.Collection` does not conform to resource interface `NonFungibleToken.Collection`
   --> e03daebed8ca0615.GeneratedExperiences:190:25
    |
190 |     access(all) resource Collection: NonFungibleToken.Collection {
    |                          ^
   ... 
    |
227 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                                                   -------- mismatch here

error: missing access modifier for function
   --> e03daebed8ca0615.GeneratedExperiences:340:8
    |
340 |         access(FindForge.ForgeOwner) fun mint(platform: FindForge.MinterPlatform, data: AnyStruct, verifier: &FindForge.Verifier) : @{NonFungibleToken.NFT} {
    |         ^

error: missing access modifier for function
   --> e03daebed8ca0615.GeneratedExperiences:353:8
    |
353 |         access(FindForge.ForgeOwner) fun addContractData(platform: FindForge.MinterPlatform, data: AnyStruct, verifier: &FindForge.Verifier) {
    |         ^


, FiatToken: failed to deploy contract FiatToken: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> e40192241f65468d1838f1d10c5ae151a256e2beaad66007c2ada158b2a3f16e:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find type in this scope: `FungibleToken.Withdraw`
  --> f8d6e0586b0a20c7.FiatToken:97:15
   |
97 |         access(FungibleToken.Withdraw) fun withdraw(amount: UFix64): @{FungibleToken.Vault} {
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: missing access modifier for function
  --> f8d6e0586b0a20c7.FiatToken:97:8
   |
97 |         access(FungibleToken.Withdraw) fun withdraw(amount: UFix64): @{FungibleToken.Vault} {
   |         ^

error: resource `FiatToken.Vault` does not conform to resource interface `FungibleToken.Vault`
  --> f8d6e0586b0a20c7.FiatToken:60:25
   |
60 |     access(all) resource Vault: FungibleToken.Vault, ResourceId, FungibleToken.Provider, FungibleToken.Receiver{
   |                          ^ `FiatToken.Vault` is missing definitions for members: `burnCallback`
  ... 
   |
97 |         access(FungibleToken.Withdraw) fun withdraw(amount: UFix64): @{FungibleToken.Vault} {
   |                                                -------- mismatch here

error: resource `FiatToken.Vault` does not conform to resource interface `FungibleToken.Vault`
  --> f8d6e0586b0a20c7.FiatToken:60:25
   |
60 |     access(all) resource Vault: FungibleToken.Vault, ResourceId, FungibleToken.Provider, FungibleToken.Receiver{
   |                          ^ `FiatToken.Vault` is missing definitions for members: `isAvailableToWithdraw`
  ... 
   |
97 |         access(FungibleToken.Withdraw) fun withdraw(amount: UFix64): @{FungibleToken.Vault} {
   |                                                -------- mismatch here

error: resource `FiatToken.Vault` does not conform to resource interface `FungibleToken.Vault`
  --> f8d6e0586b0a20c7.FiatToken:60:25
   |
60 |     access(all) resource Vault: FungibleToken.Vault, ResourceId, FungibleToken.Provider, FungibleToken.Receiver{
   |                          ^ `FiatToken.Vault` is missing definitions for members: `getViews`, `resolveView`

error: resource `FiatToken.Vault` does not conform to resource interface `FungibleToken.Vault`
  --> f8d6e0586b0a20c7.FiatToken:60:25
   |
60 |     access(all) resource Vault: FungibleToken.Vault, ResourceId, FungibleToken.Provider, FungibleToken.Receiver{
   |                          ^ `FiatToken.Vault` is missing definitions for members: `burnCallback`


, FLOATVerifiers: failed to deploy contract FLOATVerifiers: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 90b6277b37b8bad3b03043a0912ef0293fa1cfc67071ec43eca2de9989658ccb:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FLOAT` in `f8d6e0586b0a20c7.FLOAT`
  --> f8d6e0586b0a20c7.FLOATVerifiers:23:7
   |
23 | import FLOAT from 0xf8d6e0586b0a20c7
   |        ^^^^^ available exported declarations are:



, Dandy: failed to deploy contract Dandy: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 6cce4895ba61591201182679ad917cd32cf7e47ffef0aac8aa4ba32ea7796c09:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
 --> 179b6b1cb6755e31.Dandy:4:7
  |
4 | import FindViews from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindForge` in `179b6b1cb6755e31.FindForge`
 --> 179b6b1cb6755e31.Dandy:5:7
  |
5 | import FindForge from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.Dandy:228:15
    |
228 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: ambiguous intersection type
   --> 179b6b1cb6755e31.Dandy:359:41
    |
359 |     access(account) fun createForge() : @{FindForge.Forge} {
    |                                          ^^^^^^^^^^^^^^^^^

error: contract `Dandy` does not conform to contract interface `ViewResolver`
 --> 179b6b1cb6755e31.Dandy:8:21
  |
8 | access(all) contract Dandy :ViewResolver{
  |                      ^ `Dandy` is missing definitions for members: `getContractViews`, `resolveContractView`

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.Dandy:106:12
    |
106 |             Type<FindViews.Nounce>(),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.Dandy:171:23
    |
171 |             if type == Type<FindViews.Nounce>() {
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^

error: too many arguments
   --> 179b6b1cb6755e31.Dandy:185:23
    |
185 |                 return MetadataViews.NFTCollectionData(
186 |                     storagePath: Dandy.CollectionStoragePath,
187 |                     publicPath: Dandy.CollectionPublicPath,
188 |                     providerPath: Dandy.CollectionPrivatePath,
189 |                     publicCollection: Type<&Dandy.Collection>(),
190 |                     publicLinkedType: Type<&Dandy.Collection>(),
191 |                     providerLinkedType: Type<auth (NonFungibleToken.Withdraw) &Dandy.Collection>(),
192 |                     createEmptyCollectionFunction: fun(): @{NonFungibleToken.Collection} {
193 |                         return <- Dandy.createEmptyCollection()
194 |                     }
195 |                 )
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected up to 5, got 7

error: mismatched types
   --> 179b6b1cb6755e31.Dandy:188:34
    |
188 |                     providerPath: Dandy.CollectionPrivatePath,
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Type`, got `PrivatePath`

error: mismatched types
   --> 179b6b1cb6755e31.Dandy:190:38
    |
190 |                     publicLinkedType: Type<&Dandy.Collection>(),
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `fun(): @{NonFungibleToken.Collection}`, got `Type`

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.Dandy:191:51
    |
191 |                     providerLinkedType: Type<auth (NonFungibleToken.Withdraw) &Dandy.Collection>(),
    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: incorrect argument label
   --> 179b6b1cb6755e31.Dandy:188:20
    |
188 |                     providerPath: Dandy.CollectionPrivatePath,
    |                     ^^^^^^^^^^^^^ expected `publicCollection`, got `providerPath`

error: incorrect argument label
   --> 179b6b1cb6755e31.Dandy:189:20
    |
189 |                     publicCollection: Type<&Dandy.Collection>(),
    |                     ^^^^^^^^^^^^^^^^^ expected `publicLinkedType`, got `publicCollection`

error: incorrect argument label
   --> 179b6b1cb6755e31.Dandy:190:20
    |
190 |                     publicLinkedType: Type<&Dandy.Collection>(),
    |                     ^^^^^^^^^^^^^^^^^ expected `createEmptyCollectionFunction`, got `publicLinkedType`

error: resource `Dandy.NFT` does not conform to resource interface `NonFungibleToken.NFT`
  --> 179b6b1cb6755e31.Dandy:53:25
   |
53 |     access(all) resource NFT: NonFungibleToken.NFT, ViewResolver.Resolver {
   |                          ^ `Dandy.NFT` is missing definitions for members: `createEmptyCollection`

error: missing access modifier for function
   --> 179b6b1cb6755e31.Dandy:228:8
    |
228 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |         ^

error: resource `Dandy.Collection` does not conform to resource interface `NonFungibleToken.Provider`
   --> 179b6b1cb6755e31.Dandy:213:25
    |
213 |     access(all) resource Collection: NonFungibleToken.Provider, NonFungibleToken.Receiver, NonFungibleToken.Collection, ViewResolver.ResolverCollection, CollectionPublic {
    |                          ^
   ... 
    |
228 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                                                   -------- mismatch here

error: missing access modifier for function
   --> 179b6b1cb6755e31.Dandy:347:8
    |
347 |         access(FindForge.ForgeOwner) fun mint(platform: FindForge.MinterPlatform, data: AnyStruct, verifier: &FindForge.Verifier) : @{NonFungibleToken.NFT} {
    |         ^

error: missing access modifier for function
   --> 179b6b1cb6755e31.Dandy:352:8
    |
352 |         access(FindForge.ForgeOwner) fun addContractData(platform: FindForge.MinterPlatform, data: AnyStruct, verifier: &FindForge.Verifier) {
    |         ^


, Bl0xPack: failed to deploy contract Bl0xPack: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 0e1e52dd6ed582e91c26dc129a65d59cdb25f3adb1a150545392fbdb668c6dd7:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FLOAT` in `f8d6e0586b0a20c7.FLOAT`
 --> 179b6b1cb6755e31.Bl0xPack:7:7
  |
7 | import FLOAT from 0xf8d6e0586b0a20c7
  |        ^^^^^ available exported declarations are:


error: cannot find declaration `Bl0x` in `179b6b1cb6755e31.Bl0x`
 --> 179b6b1cb6755e31.Bl0xPack:8:7
  |
8 | import Bl0x from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot find type in this scope: `NonFungibleToken.Withdraw`
  --> 179b6b1cb6755e31.Bl0xPack:73:235
   |
73 |         init(name: String, description: String, thumbnailUrl: String?,thumbnailHash: String?, wallet: Capability<&{FungibleToken.Receiver}>, price: UFix64, buyTime:UFix64, openTime:UFix64, walletType:Type, providerCap: Capability<auth(NonFungibleToken.Withdraw) &{NonFungibleToken.Provider, ViewResolver.ResolverCollection}>, requiresReservation:Bool, royaltyCut: UFix64, royaltyWallet: Capability<&{FungibleToken.Receiver}>, floatEventId:UInt64?, whiteListTime: UFix64?, storageRequirement: UInt... 
   |                                                                                                                                                                                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
  --> 179b6b1cb6755e31.Bl0xPack:66:58
   |
66 |         access(contract) let providerCap: Capability<auth(NonFungibleToken.Withdraw) &{NonFungibleToken.Provider, ViewResolver.ResolverCollection}> 
   |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.Bl0xPack:448:19
    |
448 |             access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.Bl0xPack:580:77
    |
580 |             let openedPacksCollection = Bl0xPack.account.storage.borrow<auth(NonFungibleToken.Withdraw) &Bl0xPack.Collection>(from: Bl0xPack.OpenedCollectionStoragePath)!
    |                                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot access `withdraw`: function requires `not specified` authorization
   --> 179b6b1cb6755e31.Bl0xPack:581:24
    |
581 |             let pack <- openedPacksCollection.withdraw(withdrawID: packId) as! @Bl0xPack.NFT
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.Bl0xPack:630:80
    |
630 |                 let metadata=source.borrowViewResolver(id: reward)!.resolveView(Type<Bl0x.Metadata>())! as! Bl0x.Metadata
    |                                                                                 ^^^^^^^^^^^^^^^^^^^^^

error: cannot access `withdraw`: function requires `Withdraw | Owner` authorization, but reference only has `not specified` authorization
   --> 179b6b1cb6755e31.Bl0xPack:632:29
    |
632 |                 let token <- source.withdraw(withdrawID: reward)
    |                              ^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.Bl0xPack:693:24
    |
693 |             let float = getAccount(user).capabilities.borrow<&FLOAT.Collection>(FLOAT.FLOATCollectionPublicPath)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: contract `Bl0xPack` does not conform to contract interface `ViewResolver`
  --> 179b6b1cb6755e31.Bl0xPack:11:21
   |
11 | access(all) contract Bl0xPack: ViewResolver {
   |                      ^ `Bl0xPack` is missing definitions for members: `getContractViews`, `resolveContractView`

error: too many arguments
   --> 179b6b1cb6755e31.Bl0xPack:218:23
    |
218 |                 return MetadataViews.NFTCollectionData(
219 |                     storagePath: Bl0xPack.CollectionStoragePath,
220 |                     publicPath: Bl0xPack.CollectionPublicPath,
221 |                     providerPath: /private/bl0xPackCollection,
222 |                     publicCollection: Type<&Bl0xPack.Collection>(),
223 |                     publicLinkedType: Type<&Bl0xPack.Collection>(),
224 |                     providerLinkedType: Type<auth(NonFungibleToken.Withdraw) &Bl0xPack.Collection>(),
225 |                     createEmptyCollectionFunction: (fun(): @{NonFungibleToken.Collection} {return <- Bl0xPack.createEmptyCollection()}))
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected up to 5, got 7

error: mismatched types
   --> 179b6b1cb6755e31.Bl0xPack:221:34
    |
221 |                     providerPath: /private/bl0xPackCollection,
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Type`, got `PrivatePath`

error: mismatched types
   --> 179b6b1cb6755e31.Bl0xPack:223:38
    |
223 |                     publicLinkedType: Type<&Bl0xPack.Collection>(),
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `fun(): @{NonFungibleToken.Collection}`, got `Type`

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.Bl0xPack:224:50
    |
224 |                     providerLinkedType: Type<auth(NonFungibleToken.Withdraw) &Bl0xPack.Collection>(),
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: incorrect argument label
   --> 179b6b1cb6755e31.Bl0xPack:221:20
    |
221 |                     providerPath: /private/bl0xPackCollection,
    |                     ^^^^^^^^^^^^^ expected `publicCollection`, got `providerPath`

error: incorrect argument label
   --> 179b6b1cb6755e31.Bl0xPack:222:20
    |
222 |                     publicCollection: Type<&Bl0xPack.Collection>(),
    |                     ^^^^^^^^^^^^^^^^^ expected `publicLinkedType`, got `publicCollection`

error: incorrect argument label
   --> 179b6b1cb6755e31.Bl0xPack:223:20
    |
223 |                     publicLinkedType: Type<&Bl0xPack.Collection>(),
    |                     ^^^^^^^^^^^^^^^^^ expected `createEmptyCollectionFunction`, got `publicLinkedType`

error: resource `Bl0xPack.NFT` does not conform to resource interface `NonFungibleToken.NFT`
   --> 179b6b1cb6755e31.Bl0xPack:119:25
    |
119 |     access(all) resource NFT: NonFungibleToken.NFT, ViewResolver.Resolver {
    |                          ^ `Bl0xPack.NFT` is missing definitions for members: `createEmptyCollection`

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.Bl0xPack:341:43
    |
341 |                 if metadata.price != valut.balance {
    |                                            ^^^^^^^^^^ unknown member

error: too few arguments
   --> 179b6b1cb6755e31.Bl0xPack:369:20
    |
369 |                 if(!keyList.verify(signatureSet: signatureSet, signedData: nft.hash.utf8)){
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected at least 3, got 2

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.Bl0xPack:374:97
    |
374 |                     metadata.royaltyCap!.borrow()!.deposit(from: <- vault.withdraw(amount: valut.balance * metadata.royaltyCut))
    |                                                                                                  ^^^^^^^^^^ unknown member

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.Bl0xPack:430:43
    |
430 |                 if metadata.price != valut.balance {
    |                                            ^^^^^^^^^^ unknown member

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.Bl0xPack:435:97
    |
435 |                     metadata.royaltyCap!.borrow()!.deposit(from: <- vault.withdraw(amount: valut.balance * metadata.royaltyCut))
    |                                                                                                  ^^^^^^^^^^ unknown member

error: missing access modifier for function
   --> 179b6b1cb6755e31.Bl0xPack:448:12
    |
448 |             access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |             ^

error: resource `Bl0xPack.Collection` does not conform to resource interface `NonFungibleToken.Provider`
   --> 179b6b1cb6755e31.Bl0xPack:253:29
    |
253 |         access(all) resource Collection: NonFungibleToken.Provider, NonFungibleToken.Receiver, NonFungibleToken.Collection, CollectionPublic, ViewResolver.ResolverCollection {
    |                              ^
   ... 
    |
448 |             access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                                                       -------- mismatch here


, FindLeaseMarket: failed to deploy contract FindLeaseMarket: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> bf25fe82171b451b96bd9e98d3f59d867b30c1ac8e0f0da6d033725e32d84694:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
 --> 179b6b1cb6755e31.FindLeaseMarket:2:7
  |
2 | import FindViews from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindLeaseMarket:3:7
  |
3 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot find declaration `Profile` in `179b6b1cb6755e31.Profile`
 --> 179b6b1cb6755e31.FindLeaseMarket:4:7
  |
4 | import Profile from 0x179b6b1cb6755e31
  |        ^^^^^^^ available exported declarations are:


error: cannot find declaration `FindMarket` in `179b6b1cb6755e31.FindMarket`
 --> 179b6b1cb6755e31.FindLeaseMarket:8:7
  |
8 | import FindMarket from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^ available exported declarations are:


error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarket:332:41
    |
332 |         access(contract) fun borrow() : &{FIND.LeaseCollectionPublic}
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarket:336:42
    |
336 |         access(self) let cap: Capability<&{FIND.LeaseCollectionPublic}>
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarket:355:41
    |
355 |         access(contract) fun borrow() : &{FIND.LeaseCollectionPublic} {
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarket:404:41
    |
404 |         access(contract) fun borrow() : &{FIND.LeaseCollectionPublic} {
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
  --> 179b6b1cb6755e31.FindLeaseMarket:29:52
   |
29 |     access(all) fun getTenant(_ tenant: Address) : &{FindMarket.TenantPublic} {
   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
  --> 179b6b1cb6755e31.FindLeaseMarket:42:66
   |
42 |     access(all) fun getSaleItemCollectionCapabilities(tenantRef: &{FindMarket.TenantPublic}, address: Address) : [Capability<&{FindLeaseMarket.SaleItemCollectionPublic}>] {
   |                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
  --> 179b6b1cb6755e31.FindLeaseMarket:56:64
   |
56 |     access(all) fun getSaleItemCollectionCapability(tenantRef: &{FindMarket.TenantPublic}, marketOption: String, address: Address) : Capability<&{FindLeaseMarket.SaleItemCollectionPublic}>? {
   |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarket:140:58
    |
140 |     access(contract) fun checkSaleInformation(tenantRef: &{FindMarket.TenantPublic}, marketOption: String, address: Address, name: String?, getGhost: Bool, getLeaseInfo: Bool) : FindLeaseMarket.SaleItemCollectionReport {
    |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarket:214:67
    |
214 |     access(all) fun getMarketBidCollectionCapabilities(tenantRef: &{FindMarket.TenantPublic}, address: Address) : [Capability<&{FindLeaseMarket.MarketBidCollectionPublic}>] {
    |                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarket:225:65
    |
225 |     access(all) fun getMarketBidCollectionCapability(tenantRef: &{FindMarket.TenantPublic}, marketOption: String, address: Address) : Capability<&{FindLeaseMarket.MarketBidCollectionPublic}>? {
    |                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarket:257:57
    |
257 |     access(contract) fun checkBidInformation(tenantRef: &{FindMarket.TenantPublic}, marketOption: String, address: Address, name: String?, getGhost:Bool, getLeaseInfo: Bool) : FindLeaseMarket.BidItemCollectionReport {
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindLeaseMarket:446:26
    |
446 |         let soldFor=valut.balance
    |                           ^^^^^^^^^^ unknown member

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindLeaseMarket:674:15
    |
674 |         return FindLeaseMarket.account.storage.borrow<&FIND.Network>(from : FIND.NetworkStoragePath) ?? panic("Network is not up")
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarket:344:59
    |
344 |             self.cap=getAccount(address).capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindLeaseMarket:344:21
    |
344 |             self.cap=getAccount(address).capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarket:432:53
    |
432 |             let profile = receiver.capabilities.get<&{Profile.Public}>(Profile.publicPath)!
    |                                                      ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindLeaseMarket:432:26
    |
432 |             let profile = receiver.capabilities.get<&{Profile.Public}>(Profile.publicPath)!
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindLeaseMarket:433:25
    |
433 |             let leases = receiver.capabilities.get<&FIND.LeaseCollection>(FIND.LeasePublicPath)!
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


, FindViews: failed to deploy contract FindViews: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> aff24f05d12374a56129ad8016cf7f36723ae34a8de9168bc412194e62a371bc:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.FindViews:241:34
    |
241 |         init(cap: Capability<auth(NonFungibleToken.Withdraw) &{NonFungibleToken.Collection}>, id: UInt64) {
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.FindViews:235:46
    |
235 |         access(self) let cap: Capability<auth(NonFungibleToken.Withdraw) &{NonFungibleToken.Collection}>
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: value of type `auth(not specified) &{NonFungibleToken.Collection}` has no member `borrowViewResolver`
   --> 179b6b1cb6755e31.FindViews:249:48
    |
249 |             let viewResolver=self.cap.borrow()!.borrowViewResolver(id: self.id)!
    |                                                 ^^^^^^^^^^^^^^^^^^ unknown member

error: value of type `auth(not specified) &{NonFungibleToken.Collection}` has no member `borrowViewResolver`
   --> 179b6b1cb6755e31.FindViews:259:35
    |
259 |             let viewResolver = cap.borrowViewResolver(id: self.id) ?? panic("The capability of view pointer is not linked.")
    |                                    ^^^^^^^^^^^^^^^^^^ unknown member

error: cannot access `withdraw`: function requires `Withdraw | Owner` authorization, but reference only has `not specified` authorization
   --> 179b6b1cb6755e31.FindViews:327:22
    |
327 |             return <- self.cap.borrow()!.withdraw(withdrawID: self.id)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^


, Dev: failed to deploy contract Dev: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> f69209a4c96387496efe32659cdb9e2ffe88891d2259b5f1dd76d0658deedbda:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindMarket` in `179b6b1cb6755e31.FindMarket`
 --> 179b6b1cb6755e31.Dev:4:7
  |
4 | import FindMarket from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^ available exported declarations are:



, FindLostAndFoundWrapper: failed to deploy contract FindLostAndFoundWrapper: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> a9e4b621fa105c872214af068fdbc60f4f43593543cd81cfce7e40ac386bb26a:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `LostAndFound` in `f8d6e0586b0a20c7.LostAndFound`
 --> 179b6b1cb6755e31.FindLostAndFoundWrapper:6:7
  |
6 | import LostAndFound from 0xf8d6e0586b0a20c7
  |        ^^^^^^^^^^^^ available exported declarations are:


error: cannot find declaration `LostAndFoundHelper` in `f8d6e0586b0a20c7.LostAndFoundHelper`
 --> 179b6b1cb6755e31.FindLostAndFoundWrapper:7:7
  |
7 | import LostAndFoundHelper from 0xf8d6e0586b0a20c7
  |        ^^^^^^^^^^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindLostAndFoundWrapper:9:7
  |
9 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
  --> 179b6b1cb6755e31.FindLostAndFoundWrapper:11:7
   |
11 | import FindViews from 0x179b6b1cb6755e31
   |        ^^^^^^^^^ available exported declarations are:


error: cannot find type in this scope: `FungibleToken.Withdraw`
  --> 179b6b1cb6755e31.FindLostAndFoundWrapper:38:29
   |
38 |         storagePayment: auth(FungibleToken.Withdraw) &{FungibleToken.Vault},
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> 179b6b1cb6755e31.FindLostAndFoundWrapper:239:79
    |
239 |     access(contract) fun depositVault(_ vault: @{FungibleToken.Vault}) : auth (FungibleToken.Withdraw) &{FungibleToken.Vault} {
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> 179b6b1cb6755e31.FindLostAndFoundWrapper:255:136
    |
255 |     access(contract) fun subsidizeUserStorage(requiredStorage: UInt64, receiverAvailableStorage: UInt64, receiver: Address, vault: auth(FungibleToken.Withdraw) &{FungibleToken.Vault}, sender: Address, uuid: UInt64) : Bool {
    |                                                                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot access `withdraw`: function requires `Withdraw` authorization, but reference only has `not specified` authorization
   --> 179b6b1cb6755e31.FindLostAndFoundWrapper:110:21
    |
110 |         let vault <- storagePayment.withdraw(amount: estimate.storageFee + 0.00005)
    |                      ^^^^^^^^^^^^^^^^^^^^^^^

error: value of type `auth(not specified) &{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindLostAndFoundWrapper:117:38
    |
117 |         let flowStorageFee = vaultRef.getBalance()
    |                                       ^^^^^^^^^^ unknown member

error: value of type `&{NonFungibleToken.Collection}` has no member `borrowViewResolver`
   --> 179b6b1cb6755e31.FindLostAndFoundWrapper:156:40
    |
156 |         let viewResolver=cap!.borrow()!.borrowViewResolver(id: nftID)!
    |                                         ^^^^^^^^^^^^^^^^^^ unknown member

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindLostAndFoundWrapper:247:17
    |
247 |         if valut.balance != nil {
    |                  ^^^^^^^^^^ unknown member

error: cannot access `withdraw`: function requires `Withdraw` authorization, but reference only has `not specified` authorization
   --> 179b6b1cb6755e31.FindLostAndFoundWrapper:269:38
    |
269 |         flowReceiver.deposit(from: <- vault.withdraw(amount: subsidizeAmount))
    |                                       ^^^^^^^^^^^^^^


, FindPack: failed to deploy contract FindPack: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> d421df47a74608a9f1ed14c509496bc530b8073deee15819313dd015e88b2a91:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindForge` in `179b6b1cb6755e31.FindForge`
 --> 179b6b1cb6755e31.FindPack:7:7
  |
7 | import FindForge from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindVerifier` in `179b6b1cb6755e31.FindVerifier`
 --> 179b6b1cb6755e31.FindPack:8:7
  |
8 | import FindVerifier from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^^^ available exported declarations are:


error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindPack:166:25
    |
166 |             verifiers : [{FindVerifier.Verifier}],
    |                          ^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindPack:158:37
    |
158 |         access(all) let verifiers : [{FindVerifier.Verifier}]
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindPack:213:122
    |
213 |         init(name : String, startTime : UFix64 , endTime : UFix64? , price : UFix64, purchaseLimit : UInt64?, verifiers: [{FindVerifier.Verifier}], verifyAll : Bool ) {
    |                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindPack:210:37
    |
210 |         access(all) let verifiers : [{FindVerifier.Verifier}]
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.FindPack:353:233
    |
353 |         init(name: String, description: String, thumbnailUrl: String?,thumbnailHash: String?, wallet: Capability<&{FungibleToken.Receiver}>, openTime:UFix64, walletType:Type, itemTypes: [Type],  providerCaps: {Type : Capability<auth(NonFungibleToken.Withdraw) &{NonFungibleToken.Collection}>} , requiresReservation:Bool, storageRequirement: UInt64, saleInfos: [SaleInfo], primarySaleRoyalties : MetadataViews.Royalties, royalties : MetadataViews.Royalties, collectionDisplay: MetadataViews.NFTCol... 
    |                                                                                                                                                                                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.FindPack:346:68
    |
346 |         access(contract) let providerCaps: {Type : Capability<auth (NonFungibleToken.Withdraw) &{NonFungibleToken.Collection}>}
    |                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.FindPack:818:15
    |
818 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FindPack:1170:41
     |
1170 |     access(account) fun createForge() : @{FindForge.Forge} {
     |                                          ^^^^^^^^^^^^^^^^^

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.FindPack:943:74
    |
943 |         let openedPacksCollection = FindPack.account.storage.borrow<auth (NonFungibleToken.Withdraw) &FindPack.Collection>(from: FindPack.OpenedCollectionStoragePath)!
    |                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot access `withdraw`: function requires `not specified` authorization
   --> 179b6b1cb6755e31.FindPack:944:20
    |
944 |         let pack <- openedPacksCollection.withdraw(withdrawID: packId) as! @FindPack.NFT
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: value of type `auth(not specified) &{NonFungibleToken.Collection}` has no member `borrowViewResolver`
    --> 179b6b1cb6755e31.FindPack:1010:27
     |
1010 |             let nft=source.borrowViewResolver(id: id)!
     |                            ^^^^^^^^^^^^^^^^^^ unknown member

error: cannot access `withdraw`: function requires `Withdraw | Owner` authorization, but reference only has `not specified` authorization
    --> 179b6b1cb6755e31.FindPack:1026:25
     |
1026 |             let token <- source.withdraw(withdrawID: id)
     |                          ^^^^^^^^^^^^^^^

error: value of type `auth(not specified) &{NonFungibleToken.Collection}` has no member `borrowViewResolver`
    --> 179b6b1cb6755e31.FindPack:1069:27
     |
1069 |         let resolver = ref.borrowViewResolver(id : ref.getIDs()[0])!  // if the ID length is 0, there must be some problem
     |                            ^^^^^^^^^^^^^^^^^^ unknown member

error: too many arguments
   --> 179b6b1cb6755e31.FindPack:544:23
    |
544 |                 return MetadataViews.NFTCollectionData(
545 |                     storagePath: FindPack.CollectionStoragePath,
546 |                     publicPath: FindPack.CollectionPublicPath,
547 |                     providerPath: FindPack.CollectionPrivatePath,
548 |                     publicCollection: Type<&FindPack.Collection>(),
549 |                     publicLinkedType: Type<&FindPack.Collection>(),
550 |                     providerLinkedType: Type<auth (NonFungibleToken.Withdraw) &FindPack.Collection>(),
551 |                     createEmptyCollectionFunction: fun () : @{NonFungibleToken.Collection} {
552 |                         return <- FindPack.createEmptyCollection()
553 |                     }
554 |                 )
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected up to 5, got 7

error: mismatched types
   --> 179b6b1cb6755e31.FindPack:547:34
    |
547 |                     providerPath: FindPack.CollectionPrivatePath,
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Type`, got `PrivatePath`

error: mismatched types
   --> 179b6b1cb6755e31.FindPack:549:38
    |
549 |                     publicLinkedType: Type<&FindPack.Collection>(),
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `fun(): @{NonFungibleToken.Collection}`, got `Type`

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.FindPack:550:51
    |
550 |                     providerLinkedType: Type<auth (NonFungibleToken.Withdraw) &FindPack.Collection>(),
    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: incorrect argument label
   --> 179b6b1cb6755e31.FindPack:547:20
    |
547 |                     providerPath: FindPack.CollectionPrivatePath,
    |                     ^^^^^^^^^^^^^ expected `publicCollection`, got `providerPath`

error: incorrect argument label
   --> 179b6b1cb6755e31.FindPack:548:20
    |
548 |                     publicCollection: Type<&FindPack.Collection>(),
    |                     ^^^^^^^^^^^^^^^^^ expected `publicLinkedType`, got `publicCollection`

error: incorrect argument label
   --> 179b6b1cb6755e31.FindPack:549:20
    |
549 |                     publicLinkedType: Type<&FindPack.Collection>(),
    |                     ^^^^^^^^^^^^^^^^^ expected `createEmptyCollectionFunction`, got `publicLinkedType`

error: resource `FindPack.NFT` does not conform to resource interface `NonFungibleToken.NFT`
   --> 179b6b1cb6755e31.FindPack:438:25
    |
438 |     access(all) resource NFT: NonFungibleToken.NFT, ViewResolver.Resolver {
    |                          ^ `FindPack.NFT` is missing definitions for members: `createEmptyCollection`

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindPack:680:40
    |
680 |             if saleInfo!.price != valut.balance {
    |                                         ^^^^^^^^^^ unknown member

error: too few arguments
   --> 179b6b1cb6755e31.FindPack:707:16
    |
707 |             if(!keyList.verify(signatureSet: signatureSet, signedData: nft.hash.utf8)){
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected at least 3, got 2

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindPack:780:40
    |
780 |             if saleInfo!.price != valut.balance {
    |                                         ^^^^^^^^^^ unknown member

error: missing access modifier for function
   --> 179b6b1cb6755e31.FindPack:818:8
    |
818 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |         ^

error: resource `FindPack.Collection` does not conform to resource interface `NonFungibleToken.Provider`
   --> 179b6b1cb6755e31.FindPack:597:25
    |
597 |     access(all) resource Collection: NonFungibleToken.Provider, NonFungibleToken.Receiver, NonFungibleToken.Collection, CollectionPublic, ViewResolver.ResolverCollection {
    |                          ^
   ... 
    |
818 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                                                   -------- mismatch here

error: missing access modifier for function
    --> 179b6b1cb6755e31.FindPack:1142:8
     |
1142 |         access(FindForge.ForgeOwner) fun mint(platform: FindForge.MinterPlatform, data: AnyStruct, verifier: &FindForge.Verifier) : @{NonFungibleToken.NFT} {
     |         ^

error: missing access modifier for function
    --> 179b6b1cb6755e31.FindPack:1153:8
     |
1153 |         access(FindForge.ForgeOwner) fun addContractData(platform: FindForge.MinterPlatform, data: AnyStruct, verifier: &FindForge.Verifier) {
     |         ^


, TokenForwarding: failed to deploy contract TokenForwarding: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> e002000e398b1cdfb8c9a5cb06fdb92dfc4ce197bd87f22f4dcdf02c4f1e09fa:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
  --> f8d6e0586b0a20c7.TokenForwarding:54:31
   |
54 |             let balance = from.getBalance()
   |                                ^^^^^^^^^^ unknown member


, FLOAT: failed to deploy contract FLOAT: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 957290f850d6cf0235de0462c387ed62d85806e4adbea2a30041d2e71f156cd4:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> f8d6e0586b0a20c7.FLOAT:249:15
    |
249 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdrawWithUUID(_ uuid: UInt64): @{NonFungibleToken.NFT} {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> f8d6e0586b0a20c7.FLOAT:262:15
    |
262 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdrawWithType(type: Type, withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> f8d6e0586b0a20c7.FLOAT:275:15
    |
275 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdrawWithTypeAndUUID(type: Type, uuid: UInt64): @{NonFungibleToken.NFT} {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> f8d6e0586b0a20c7.FLOAT:286:15
    |
286 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> f8d6e0586b0a20c7.FLOAT:316:15
    |
316 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun transfer(id: UInt64, receiver: Capability<&{NonFungibleToken.Receiver}>): Bool {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: resource `FLOAT.NFT` does not conform to resource interface `NonFungibleToken.NFT`
   --> f8d6e0586b0a20c7.FLOAT:105:25
    |
105 |     access(all) resource NFT: NonFungibleToken.NFT, ViewResolver.Resolver {
    |                          ^ `FLOAT.NFT` is missing definitions for members: `createEmptyCollection`

error: missing access modifier for function
   --> f8d6e0586b0a20c7.FLOAT:249:8
    |
249 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdrawWithUUID(_ uuid: UInt64): @{NonFungibleToken.NFT} {
    |         ^

error: missing access modifier for function
   --> f8d6e0586b0a20c7.FLOAT:262:8
    |
262 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdrawWithType(type: Type, withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |         ^

error: missing access modifier for function
   --> f8d6e0586b0a20c7.FLOAT:275:8
    |
275 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdrawWithTypeAndUUID(type: Type, uuid: UInt64): @{NonFungibleToken.NFT} {
    |         ^

error: missing access modifier for function
   --> f8d6e0586b0a20c7.FLOAT:286:8
    |
286 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |         ^

error: missing access modifier for function
   --> f8d6e0586b0a20c7.FLOAT:316:8
    |
316 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun transfer(id: UInt64, receiver: Capability<&{NonFungibleToken.Receiver}>): Bool {
    |         ^

error: resource `FLOAT.Collection` does not conform to resource interface `NonFungibleToken.Provider`
   --> f8d6e0586b0a20c7.FLOAT:211:25
    |
211 |     access(all) resource Collection: NonFungibleToken.Provider, NonFungibleToken.Receiver, NonFungibleToken.Collection, ViewResolver.ResolverCollection, CollectionPublic {
    |                          ^
   ... 
    |
286 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                                                   -------- mismatch here

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> f8d6e0586b0a20c7.FLOAT:763:24
    |
763 |             if (payment.getBalance() != self.getPrices()![payment.getType().identifier]!.price) {
    |                         ^^^^^^^^^^ unknown member

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> f8d6e0586b0a20c7.FLOAT:787:67
    |
787 |             let emeraldCityCut <- payment.withdraw(amount: payment.getBalance() * royalty)
    |                                                                    ^^^^^^^^^^ unknown member


, FindForge: failed to deploy contract FindForge: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> d19f8f391c905b5832b6d2e452a978bc0b8a5523c8afe91c2e7519bac8fa8711:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindForge:4:7
  |
4 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot find declaration `FindForgeOrder` in `179b6b1cb6755e31.FindForgeOrder`
 --> 179b6b1cb6755e31.FindForge:5:7
  |
5 | import FindForgeOrder from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^^^^^ available exported declarations are:


error: cannot find declaration `Profile` in `179b6b1cb6755e31.Profile`
 --> 179b6b1cb6755e31.FindForge:6:7
  |
6 | import Profile from 0x179b6b1cb6755e31
  |        ^^^^^^^ available exported declarations are:


error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindForge:157:65
    |
157 |         let leaseCollection = getAccount(user).capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!.borrow() ?? panic("Cannot borrow reference to lease collection of user : ".concat(leaseName))
    |                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindForge:157:30
    |
157 |         let leaseCollection = getAccount(user).capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!.borrow() ?? panic("Cannot borrow reference to lease collection of user : ".concat(leaseName))
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindForge:157:30
    |
157 |         let leaseCollection = getAccount(user).capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!.borrow() ?? panic("Cannot borrow reference to lease collection of user : ".concat(leaseName))
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: value of type `{NonFungibleToken.NFT}` has no member `getID`
   --> 179b6b1cb6755e31.FindForge:209:21
    |
209 |         let id = nft.getID()
    |                      ^^^^^ unknown member

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindForge:274:61
    |
274 |         let leaseCol = getAccount(address).capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!.borrow() ?? panic("Cannot borrow lease collection to lease owner. Owner : ".concat(address.toString()))
    |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindForge:274:23
    |
274 |         let leaseCol = getAccount(address).capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!.borrow() ?? panic("Cannot borrow lease collection to lease owner. Owner : ".concat(address.toString()))
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindForge:274:23
    |
274 |         let leaseCol = getAccount(address).capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!.borrow() ?? panic("Cannot borrow lease collection to lease owner. Owner : ".concat(address.toString()))
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: value of type `{NonFungibleToken.NFT}` has no member `getID`
   --> 179b6b1cb6755e31.FindForge:292:21
    |
292 |         let id = nft.getID()
    |                      ^^^^^ unknown member

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindForge:321:61
    |
321 |         let leaseCol = getAccount(address).capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!.borrow() ?? panic("Cannot borrow lease collection to lease owner. Owner : ".concat(address.toString()))
    |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindForge:321:23
    |
321 |         let leaseCol = getAccount(address).capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!.borrow() ?? panic("Cannot borrow lease collection to lease owner. Owner : ".concat(address.toString()))
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindForge:321:23
    |
321 |         let leaseCol = getAccount(address).capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!.borrow() ?? panic("Cannot borrow lease collection to lease owner. Owner : ".concat(address.toString()))
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


, FindMarketDirectOfferEscrow: failed to deploy contract FindMarketDirectOfferEscrow: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> fed3c5fdd5e1fdea41b42deb52bf2e46c1ba1984b2d11e9bfd8d98686d34d0cd:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
 --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:4:7
  |
4 | import FindViews from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:7:7
  |
7 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot find declaration `FindMarket` in `179b6b1cb6755e31.FindMarket`
 --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:8:7
  |
8 | import FindMarket from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^ available exported declarations are:


error: cannot find declaration `Profile` in `179b6b1cb6755e31.Profile`
 --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:9:7
  |
9 | import Profile from 0x179b6b1cb6755e31
  |        ^^^^^^^ available exported declarations are:


error: ambiguous intersection type
  --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:25:22
   |
25 |         init(pointer: {FindViews.Pointer}, callback: Capability<&MarketBidCollection>, validUntil: UFix64?, saleItemExtraField: {String : AnyStruct}) {
   |                       ^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
  --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:18:38
   |
18 |         access(contract) var pointer: {FindViews.Pointer}
   |                                       ^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:182:46
    |
182 |         init (_ tenantCapability: Capability<&{FindMarket.TenantPublic}>) {
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:180:59
    |
180 |         access(contract) let tenantCapability: Capability<&{FindMarket.TenantPublic}>
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:187:40
    |
187 |         access(self) fun getTenant() : &{FindMarket.TenantPublic} {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:445:56
    |
445 |         access(all) fun borrowSaleItem(_ id: UInt64) : &{FindMarket.SaleItem} {
    |                                                         ^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:507:92
    |
507 |         init(receiver: Capability<&{FungibleToken.Receiver}>, tenantCapability: Capability<&{FindMarket.TenantPublic}>) {
    |                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:504:59
    |
504 |         access(contract) let tenantCapability: Capability<&{FindMarket.TenantPublic}>
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:513:40
    |
513 |         access(self) fun getTenant() : &{FindMarket.TenantPublic} {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:638:54
    |
638 |         access(all) fun borrowBidItem(_ id: UInt64): &{FindMarket.Bid} {
    |                                                       ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:651:84
    |
651 |     access(all)   fun createEmptySaleItemCollection(_ tenantCapability: Capability<&{FindMarket.TenantPublic}>): @SaleItemCollection {
    |                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:655:130
    |
655 |     access(all) fun createEmptyMarketBidCollection(receiver: Capability<&{FungibleToken.Receiver}>, tenantCapability: Capability<&{FindMarket.TenantPublic}>) : @MarketBidCollection {
    |                                                                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:674:75
    |
674 |             if let saleItemCollection = getAccount(user).capabilities.get<&{FindMarket.SaleItemCollectionPublic}>(tenant.getPublicPath(Type<@SaleItemCollection>()))!.borrow() {
    |                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:674:40
    |
674 |             if let saleItemCollection = getAccount(user).capabilities.get<&{FindMarket.SaleItemCollectionPublic}>(tenant.getPublicPath(Type<@SaleItemCollection>()))!.borrow() {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:674:40
    |
674 |             if let saleItemCollection = getAccount(user).capabilities.get<&{FindMarket.SaleItemCollectionPublic}>(tenant.getPublicPath(Type<@SaleItemCollection>()))!.borrow() {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:449:40
    |
449 |             return (&self.items[id] as &{FindMarket.SaleItem}?)!
    |                                         ^^^^^^^^^^^^^^^^^^^^^

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:479:30
    |
479 |             return self.valut.balance
    |                               ^^^^^^^^^^ unknown member

error: value of type `{NonFungibleToken.NFT}` has no member `getID`
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:521:24
    |
521 |             let id= nft.getID()
    |                         ^^^^^ unknown member

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:523:46
    |
523 |             let vaultRef = &bid.vault as auth(FungibleToken.Withdraw) &{FungibleToken.Vault}
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot access `withdraw`: function requires `Withdraw` authorization, but reference only has `not specified` authorization
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:537:26
    |
537 |             let vault  <- vaultRef.withdraw(amount: vaultRef.getBalance())
    |                           ^^^^^^^^^^^^^^^^^

error: value of type `auth(not specified) &{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:537:61
    |
537 |             let vault  <- vaultRef.withdraw(amount: vaultRef.getBalance())
    |                                                              ^^^^^^^^^^ unknown member

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:561:21
    |
561 |             if valut.balance <= 0.0 {
    |                      ^^^^^^^^^^ unknown member

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:589:25
    |
589 |                 if valut.balance <= 0.65 {
    |                          ^^^^^^^^^^ unknown member

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:626:46
    |
626 |             let vaultRef = &bid.vault as auth(FungibleToken.Withdraw) &{FungibleToken.Vault}
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot access `withdraw`: function requires `Withdraw` authorization, but reference only has `not specified` authorization
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:627:53
    |
627 |             self.receiver.borrow()!.deposit(from: <- vaultRef.withdraw(amount: vaultRef.getBalance()))
    |                                                      ^^^^^^^^^^^^^^^^^

error: value of type `auth(not specified) &{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:627:88
    |
627 |             self.receiver.borrow()!.deposit(from: <- vaultRef.withdraw(amount: vaultRef.getBalance()))
    |                                                                                         ^^^^^^^^^^ unknown member

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:642:39
    |
642 |             return (&self.bids[id] as &{FindMarket.Bid}?)!
    |                                        ^^^^^^^^^^^^^^^^

error: value of type `&{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:647:29
    |
647 |             return bid.valut.balance
    |                              ^^^^^^^^^^ unknown member


, FindMarketSale: failed to deploy contract FindMarketSale: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 0ea1566089adc9b3c6ab23a1c6c84ad0a6d83f78b3d8c99f0d09264c0042bdf2:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
 --> 179b6b1cb6755e31.FindMarketSale:4:7
  |
4 | import FindViews from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindMarketSale:6:7
  |
6 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot find declaration `Profile` in `179b6b1cb6755e31.Profile`
 --> 179b6b1cb6755e31.FindMarketSale:7:7
  |
7 | import Profile from 0x179b6b1cb6755e31
  |        ^^^^^^^ available exported declarations are:


error: cannot find declaration `FindMarket` in `179b6b1cb6755e31.FindMarket`
 --> 179b6b1cb6755e31.FindMarketSale:8:7
  |
8 | import FindMarket from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^ available exported declarations are:


error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketSale:156:56
    |
156 |         access(all) fun borrowSaleItem(_ id: UInt64) : &{FindMarket.SaleItem}? //TODO: look if this is safe
    |                                                         ^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketSale:168:46
    |
168 |         init (_ tenantCapability: Capability<&{FindMarket.TenantPublic}>) {
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketSale:166:59
    |
166 |         access(contract) let tenantCapability: Capability<&{FindMarket.TenantPublic}>
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketSale:173:40
    |
173 |         access(self) fun getTenant() : &{FindMarket.TenantPublic} {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketSale:358:56
    |
358 |         access(all) fun borrowSaleItem(_ id: UInt64) : &{FindMarket.SaleItem}? {
    |                                                         ^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketSale:367:82
    |
367 |     access(all) fun createEmptySaleItemCollection(_ tenantCapability: Capability<&{FindMarket.TenantPublic}>) : @SaleItemCollection {
    |                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindMarketSale:195:43
    |
195 |             if saleItem.salePrice != valut.balance {
    |                                            ^^^^^^^^^^ unknown member

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindMarketSale:196:134
    |
196 |                 panic("Incorrect balance sent in vault. Expected ".concat(saleItem.salePrice.toString()).concat(" got ").concat(valut.balance.toString()))
    |                                                                                                                                       ^^^^^^^^^^ unknown member

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketSale:362:39
    |
362 |             return &self.items[id] as &{FindMarket.SaleItem}?
    |                                        ^^^^^^^^^^^^^^^^^^^^^


, FindVerifier: failed to deploy contract FindVerifier: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 8dd9534deb3a2651898ed7bca99175f87ced4988152b3702ac38c8097ab26fb7:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FLOAT` in `f8d6e0586b0a20c7.FLOAT`
 --> 179b6b1cb6755e31.FindVerifier:1:7
  |
1 | import FLOAT from 0xf8d6e0586b0a20c7
  |        ^^^^^ available exported declarations are:


error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindVerifier:2:7
  |
2 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot infer type parameter: `T`
  --> 179b6b1cb6755e31.FindVerifier:38:24
   |
38 |             let float = getAccount(user).capabilities.borrow<&FLOAT.Collection>(FLOAT.FLOATCollectionPublicPath)
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
  --> 179b6b1cb6755e31.FindVerifier:81:24
   |
81 |             let float = getAccount(user).capabilities.get<&FLOAT.Collection>(FLOAT.FLOATCollectionPublicPath)!.borrow() 
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
  --> 179b6b1cb6755e31.FindVerifier:81:24
   |
81 |             let float = getAccount(user).capabilities.get<&FLOAT.Collection>(FLOAT.FLOATCollectionPublicPath)!.borrow() 
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindVerifier:153:57
    |
153 |             let cap = getAccount(user).capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindVerifier:153:22
    |
153 |             let cap = getAccount(user).capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindVerifier:154:16
    |
154 |             if !cap.check() {
    |                 ^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindVerifier:157:22
    |
157 |             let ref = cap.borrow()!
    |                       ^^^^^^^^^^^^


, CharityNFT: failed to deploy contract CharityNFT: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> b8c2b3a20db296086e0e1cc5bb9c2b968042f96aaf1bf604835e0e7e517655c4:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.CharityNFT:171:15
    |
171 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: contract `CharityNFT` does not conform to contract interface `ViewResolver`
 --> 179b6b1cb6755e31.CharityNFT:6:21
  |
6 | access(all) contract CharityNFT: ViewResolver {
  |                      ^ `CharityNFT` is missing definitions for members: `getContractViews`, `resolveContractView`

error: too many arguments
  --> 179b6b1cb6755e31.CharityNFT:83:23
   |
83 |                 return MetadataViews.NFTCollectionData(
84 |                     storagePath: CharityNFT.CollectionStoragePath,
85 |                     publicPath: CharityNFT.CollectionPublicPath,
86 |                     providerPath: /private/findCharityCollection,
87 |                     publicCollection: Type<&CharityNFT.Collection>(),
88 |                     publicLinkedType: Type<&CharityNFT.Collection>(),
89 |                     providerLinkedType: Type<auth(NonFungibleToken.Withdraw) &CharityNFT.Collection>(),
90 |                     createEmptyCollectionFunction: (fun(): @{NonFungibleToken.Collection} {return <- CharityNFT.createEmptyCollection()}))
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected up to 5, got 7

error: mismatched types
  --> 179b6b1cb6755e31.CharityNFT:86:34
   |
86 |                     providerPath: /private/findCharityCollection,
   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Type`, got `PrivatePath`

error: mismatched types
  --> 179b6b1cb6755e31.CharityNFT:88:38
   |
88 |                     publicLinkedType: Type<&CharityNFT.Collection>(),
   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `fun(): @{NonFungibleToken.Collection}`, got `Type`

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
  --> 179b6b1cb6755e31.CharityNFT:89:50
   |
89 |                     providerLinkedType: Type<auth(NonFungibleToken.Withdraw) &CharityNFT.Collection>(),
   |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: incorrect argument label
  --> 179b6b1cb6755e31.CharityNFT:86:20
   |
86 |                     providerPath: /private/findCharityCollection,
   |                     ^^^^^^^^^^^^^ expected `publicCollection`, got `providerPath`

error: incorrect argument label
  --> 179b6b1cb6755e31.CharityNFT:87:20
   |
87 |                     publicCollection: Type<&CharityNFT.Collection>(),
   |                     ^^^^^^^^^^^^^^^^^ expected `publicLinkedType`, got `publicCollection`

error: incorrect argument label
  --> 179b6b1cb6755e31.CharityNFT:88:20
   |
88 |                     publicLinkedType: Type<&CharityNFT.Collection>(),
   |                     ^^^^^^^^^^^^^^^^^ expected `createEmptyCollectionFunction`, got `publicLinkedType`

error: resource `CharityNFT.NFT` does not conform to resource interface `NonFungibleToken.NFT`
  --> 179b6b1cb6755e31.CharityNFT:18:25
   |
18 |     access(all) resource NFT: NonFungibleToken.NFT, Public, ViewResolver.Resolver {
   |                          ^ `CharityNFT.NFT` is missing definitions for members: `createEmptyCollection`

error: missing access modifier for function
   --> 179b6b1cb6755e31.CharityNFT:171:8
    |
171 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |         ^

error: resource `CharityNFT.Collection` does not conform to resource interface `NonFungibleToken.Provider`
   --> 179b6b1cb6755e31.CharityNFT:156:25
    |
156 |     access(all) resource Collection: NonFungibleToken.Provider, NonFungibleToken.Receiver, NonFungibleToken.Collection, CollectionPublic , ViewResolver.ResolverCollection{
    |                          ^
   ... 
    |
171 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                                                   -------- mismatch here


, FindThoughts: failed to deploy contract FindThoughts: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> b101d9ce4c39db94e4740b851b4f62500a9d78766cb95582969c65b5134cb698:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
 --> 179b6b1cb6755e31.FindThoughts:1:7
  |
1 | import FindViews from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindMarket` in `179b6b1cb6755e31.FindMarket`
 --> 179b6b1cb6755e31.FindThoughts:2:7
  |
2 | import FindMarket from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindThoughts:6:7
  |
6 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:



, FindMarketAdmin: failed to deploy contract FindMarketAdmin: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 5e20003ab74c920375a83e85e390f3a8a5129ea81d66d039b74c0116a52af83f:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindMarketAdmin:3:7
  |
3 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot find declaration `FindMarket` in `179b6b1cb6755e31.FindMarket`
 --> 179b6b1cb6755e31.FindMarketAdmin:4:7
  |
4 | import FindMarket from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^ available exported declarations are:


error: cannot infer type parameter: `T`
  --> 179b6b1cb6755e31.FindMarketAdmin:63:19
   |
63 |             return FindMarketAdmin.account.storage.borrow<auth(FindMarket.TenantClientOwner) &FindMarket.TenantClient>(from: path) ?? panic("Cannot borrow Find market tenant client Reference.")
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindMarketAdmin:134:22
    |
134 |             let cap = FindMarketAdmin.account.capabilities.borrow<&FindMarket.Tenant>(pp) ?? panic("Cannot borrow tenant reference from path. Path : ".concat(pp.toString()) )
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


, FindFurnace: failed to deploy contract FindFurnace: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> e62aa680632fdbb0a1553118e7b8b518c7c1f07c53d4d64b09face758df714f3:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindMarket` in `179b6b1cb6755e31.FindMarket`
 --> 179b6b1cb6755e31.FindFurnace:2:7
  |
2 | import FindMarket from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
 --> 179b6b1cb6755e31.FindFurnace:3:7
  |
3 | import FindViews from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindFurnace:4:7
  |
4 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:



, NameVoucher: failed to deploy contract NameVoucher: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 7eccca36940c58fadb0ac9ad6329aa696502bf3ec2c520ad6f095cbb8c1c0bfd:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `Profile` in `179b6b1cb6755e31.Profile`
 --> 179b6b1cb6755e31.NameVoucher:7:7
  |
7 | import Profile from 0x179b6b1cb6755e31
  |        ^^^^^^^ available exported declarations are:


error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.NameVoucher:8:7
  |
8 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
 --> 179b6b1cb6755e31.NameVoucher:9:7
  |
9 | import FindViews from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindAirdropper` in `179b6b1cb6755e31.FindAirdropper`
  --> 179b6b1cb6755e31.NameVoucher:10:7
   |
10 | import FindAirdropper from 0x179b6b1cb6755e31
   |        ^^^^^^^^^^^^^^ available exported declarations are:


error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.NameVoucher:148:15
    |
148 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: too many arguments
   --> 179b6b1cb6755e31.NameVoucher:109:23
    |
109 |                 return MetadataViews.NFTCollectionData(storagePath: NameVoucher.CollectionStoragePath,
110 |                 publicPath: NameVoucher.CollectionPublicPath,
111 |                 providerPath: NameVoucher.CollectionPrivatePath,
112 |                 publicCollection: Type<&Collection>(),
113 |                 publicLinkedType: Type<&Collection>(),
114 |                 providerLinkedType: Type<&Collection>(),
115 |                 createEmptyCollectionFunction: fun(): @{NonFungibleToken.Collection} {return <- NameVoucher.createEmptyCollection()})
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected up to 5, got 7

error: mismatched types
   --> 179b6b1cb6755e31.NameVoucher:111:30
    |
111 |                 providerPath: NameVoucher.CollectionPrivatePath,
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Type`, got `PrivatePath`

error: mismatched types
   --> 179b6b1cb6755e31.NameVoucher:113:34
    |
113 |                 publicLinkedType: Type<&Collection>(),
    |                                   ^^^^^^^^^^^^^^^^^^^ expected `fun(): @{NonFungibleToken.Collection}`, got `Type`

error: incorrect argument label
   --> 179b6b1cb6755e31.NameVoucher:111:16
    |
111 |                 providerPath: NameVoucher.CollectionPrivatePath,
    |                 ^^^^^^^^^^^^^ expected `publicCollection`, got `providerPath`

error: incorrect argument label
   --> 179b6b1cb6755e31.NameVoucher:112:16
    |
112 |                 publicCollection: Type<&Collection>(),
    |                 ^^^^^^^^^^^^^^^^^ expected `publicLinkedType`, got `publicCollection`

error: incorrect argument label
   --> 179b6b1cb6755e31.NameVoucher:113:16
    |
113 |                 publicLinkedType: Type<&Collection>(),
    |                 ^^^^^^^^^^^^^^^^^ expected `createEmptyCollectionFunction`, got `publicLinkedType`

error: resource `NameVoucher.NFT` does not conform to resource interface `NonFungibleToken.NFT`
  --> 179b6b1cb6755e31.NameVoucher:31:25
   |
31 |     access(all) resource NFT: NonFungibleToken.NFT, ViewResolver.Resolver {
   |                          ^ `NameVoucher.NFT` is missing definitions for members: `createEmptyCollection`

error: missing access modifier for function
   --> 179b6b1cb6755e31.NameVoucher:148:8
    |
148 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |         ^

error: value of type `{NonFungibleToken.NFT}` has no member `getID`
   --> 179b6b1cb6755e31.NameVoucher:151:36
    |
151 |             emit Withdraw(id: token.getID(), from: self.owner?.address)
    |                                     ^^^^^ unknown member

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.NameVoucher:208:26
    |
208 |             let network = NameVoucher.account.storage.borrow<&FIND.Network>(from: FIND.NetworkStoragePath) ?? panic("Cannot borrow find network for registration")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.NameVoucher:213:60
    |
213 |                 let profile = self.owner!.capabilities.get<&{Profile.Public}>(Profile.publicPath)!
    |                                                             ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.NameVoucher:213:30
    |
213 |                 let profile = self.owner!.capabilities.get<&{Profile.Public}>(Profile.publicPath)!
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.NameVoucher:214:58
    |
214 |                 let lease = self.owner!.capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!
    |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.NameVoucher:214:28
    |
214 |                 let lease = self.owner!.capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: resource `NameVoucher.Collection` does not conform to resource interface `NonFungibleToken.Collection`
   --> 179b6b1cb6755e31.NameVoucher:138:25
    |
138 |     access(all) resource Collection: NonFungibleToken.Collection {
    |                          ^
   ... 
    |
148 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                                                   -------- mismatch here


, FindLeaseMarketSale: failed to deploy contract FindLeaseMarketSale: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> b6d8e687ccd3f891b98bd79578d28dba5c1b32c5e41b5f4d2dc7d6cd5713b034:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
 --> 179b6b1cb6755e31.FindLeaseMarketSale:2:7
  |
2 | import FindViews from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindLeaseMarketSale:4:7
  |
4 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot find declaration `FindLeaseMarket` in `179b6b1cb6755e31.FindLeaseMarket`
 --> 179b6b1cb6755e31.FindLeaseMarketSale:5:7
  |
5 | import FindLeaseMarket from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindMarket` in `179b6b1cb6755e31.FindMarket`
 --> 179b6b1cb6755e31.FindLeaseMarketSale:6:7
  |
6 | import FindMarket from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^ available exported declarations are:


error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketSale:129:58
    |
129 |         access(all) fun borrowSaleItem(_ name: String) : &{FindLeaseMarket.SaleItem}
    |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketSale:139:46
    |
139 |         init (_ tenantCapability: Capability<&{FindMarket.TenantPublic}>) {
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketSale:137:59
    |
137 |         access(contract) let tenantCapability: Capability<&{FindMarket.TenantPublic}>
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketSale:144:40
    |
144 |         access(self) fun getTenant() : &{FindMarket.TenantPublic} {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketSale:270:58
    |
270 |         access(all) fun borrowSaleItem(_ name: String) : &{FindLeaseMarket.SaleItem} {
    |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketSale:280:82
    |
280 |     access(all) fun createEmptySaleItemCollection(_ tenantCapability: Capability<&{FindMarket.TenantPublic}>) : @SaleItemCollection {
    |                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
  --> 179b6b1cb6755e31.FindLeaseMarketSale:75:19
   |
75 |             return Type<@FIND.Lease>()
   |                    ^^^^^^^^^^^^^^^^^^^

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindLeaseMarketSale:163:43
    |
163 |             if saleItem.salePrice != valut.balance {
    |                                            ^^^^^^^^^^ unknown member

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindLeaseMarketSale:164:134
    |
164 |                 panic("Incorrect balance sent in vault. Expected ".concat(saleItem.salePrice.toString()).concat(" got ").concat(valut.balance.toString()))
    |                                                                                                                                       ^^^^^^^^^^ unknown member


, LostAndFound: failed to deploy contract LostAndFound: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 8bde3f872794b142f1379aeaa446d21962246a0c8e78f32a5352563bf815b794:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> f8d6e0586b0a20c7.LostAndFound:392:33
    |
392 |             storagePayment: auth(FungibleToken.Withdraw) &{FungibleToken.Vault},
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> f8d6e0586b0a20c7.LostAndFound:361:49
    |
361 |     access(contract) fun getFlowProvider(): auth(FungibleToken.Withdraw) &{FungibleToken.Provider} {
    |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> f8d6e0586b0a20c7.LostAndFound:668:29
    |
668 |         storagePayment: auth(FungibleToken.Withdraw) &{FungibleToken.Vault},
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> f8d6e0586b0a20c7.LostAndFound:685:30
    |
685 |         storagePayment: auth (FungibleToken.Withdraw) &{FungibleToken.Vault},
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> f8d6e0586b0a20c7.LostAndFound:362:48
    |
362 |         return self.account.storage.borrow<auth(FungibleToken.Withdraw) &{FungibleToken.Provider}>(from: /storage/flowTokenVault)!
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: value of type `&{NonFungibleToken.NFT}` has no member `getID`
   --> f8d6e0586b0a20c7.LostAndFound:120:27
    |
120 |                 return nft.getID()
    |                            ^^^^^ unknown member

error: value of type `&{FungibleToken.Vault}` has no member `getBalance`
   --> f8d6e0586b0a20c7.LostAndFound:130:26
    |
130 |                 return ft.getBalance()
    |                           ^^^^^^^^^^ unknown member

error: cannot access `withdraw`: function requires `Withdraw` authorization, but reference only has `not specified` authorization
   --> f8d6e0586b0a20c7.LostAndFound:339:38
    |
339 |                 let repaymentVault <- refundProvider.withdraw(amount: LostAndFound.storageFees[uuid]!)
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^

error: cannot access `withdraw`: function requires `Withdraw` authorization, but reference only has `not specified` authorization
   --> f8d6e0586b0a20c7.LostAndFound:353:33
    |
353 |                     let vault <- provider.withdraw(amount: LostAndFound.storageFees[uuid]!)
    |                                  ^^^^^^^^^^^^^^^^^

error: cannot access `withdraw`: function requires `Withdraw` authorization, but reference only has `not specified` authorization
   --> f8d6e0586b0a20c7.LostAndFound:404:41
    |
404 |                 receiver.deposit(from: <-storagePayment.withdraw(amount: LostAndFound.storageFees[shelf.uuid]!))
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^

error: cannot access `withdraw`: function requires `Withdraw` authorization, but reference only has `not specified` authorization
   --> f8d6e0586b0a20c7.LostAndFound:410:41
    |
410 |                 receiver.deposit(from: <-storagePayment.withdraw(amount: LostAndFound.storageFees[bin.uuid]!))
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^

error: cannot access `withdraw`: function requires `Withdraw` authorization, but reference only has `not specified` authorization
   --> f8d6e0586b0a20c7.LostAndFound:422:39
    |
422 |             let storagePaymentVault <- storagePayment.withdraw(amount: storageFee)
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^

error: cannot access `withdraw`: function requires `Withdraw` authorization, but reference only has `not specified` authorization
   --> f8d6e0586b0a20c7.LostAndFound:445:29
    |
445 |                 let vault <- provider.withdraw(amount: LostAndFound.storageFees[uuid]!)
    |                              ^^^^^^^^^^^^^^^^^

error: too few arguments
   --> f8d6e0586b0a20c7.LostAndFound:559:25
    |
559 |             let vault <- FlowToken.createEmptyVault()
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected at least 1, got 0


, DapperUtilityCoin: failed to deploy contract DapperUtilityCoin: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 5af992a47a2adc19c7b70f8bfd65d3928d40c7df883ef968218b2fbdd1795572:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> 01cf0e2f2f715450.DapperUtilityCoin:172:15
    |
172 |         access(FungibleToken.Withdraw) fun withdraw(amount: UFix64): @DapperUtilityCoin.Vault {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> 01cf0e2f2f715450.DapperUtilityCoin:194:15
    |
194 |         access(FungibleToken.Withdraw) fun transfer(amount: UFix64, receiver: Capability<&{FungibleToken.Receiver}>) {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: contract `DapperUtilityCoin` does not conform to contract interface `ViewResolver`
 --> 01cf0e2f2f715450.DapperUtilityCoin:6:21
  |
6 | access(all) contract DapperUtilityCoin: ViewResolver  {
  |                      ^ `DapperUtilityCoin` is missing definitions for members: `getContractViews`, `resolveContractView`

error: too many arguments
   --> 01cf0e2f2f715450.DapperUtilityCoin:117:23
    |
117 |                 return FungibleTokenMetadataViews.FTVaultData(
118 |                     storagePath: self.storagePath,
119 |                     receiverPath: self.receiverPath,
120 |                     metadataPath: self.publicPath,
121 |                     providerPath: /private/exampleTokenVault,
122 |                     receiverLinkedType: Type<&{FungibleToken.Receiver}>(),
123 |                     metadataLinkedType: Type<&DapperUtilityCoin.Vault>(),
124 |                     providerLinkedType: Type<&DapperUtilityCoin.Vault>(),
125 |                     createEmptyVaultFunction: (fun(): @{FungibleToken.Vault} {
126 |                         return <-vaultRef.createEmptyVault()
127 |                     })
128 |                 )
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected up to 6, got 8

error: mismatched types
   --> 01cf0e2f2f715450.DapperUtilityCoin:121:34
    |
121 |                     providerPath: /private/exampleTokenVault,
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Type`, got `PrivatePath`

error: mismatched types
   --> 01cf0e2f2f715450.DapperUtilityCoin:123:40
    |
123 |                     metadataLinkedType: Type<&DapperUtilityCoin.Vault>(),
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `fun(): @{FungibleToken.Vault}`, got `Type`

error: incorrect argument label
   --> 01cf0e2f2f715450.DapperUtilityCoin:121:20
    |
121 |                     providerPath: /private/exampleTokenVault,
    |                     ^^^^^^^^^^^^^ expected `receiverLinkedType`, got `providerPath`

error: incorrect argument label
   --> 01cf0e2f2f715450.DapperUtilityCoin:122:20
    |
122 |                     receiverLinkedType: Type<&{FungibleToken.Receiver}>(),
    |                     ^^^^^^^^^^^^^^^^^^^ expected `metadataLinkedType`, got `receiverLinkedType`

error: incorrect argument label
   --> 01cf0e2f2f715450.DapperUtilityCoin:123:20
    |
123 |                     metadataLinkedType: Type<&DapperUtilityCoin.Vault>(),
    |                     ^^^^^^^^^^^^^^^^^^^ expected `createEmptyVaultFunction`, got `metadataLinkedType`

error: missing access modifier for function
   --> 01cf0e2f2f715450.DapperUtilityCoin:172:8
    |
172 |         access(FungibleToken.Withdraw) fun withdraw(amount: UFix64): @DapperUtilityCoin.Vault {
    |         ^

error: missing access modifier for function
   --> 01cf0e2f2f715450.DapperUtilityCoin:194:8
    |
194 |         access(FungibleToken.Withdraw) fun transfer(amount: UFix64, receiver: Capability<&{FungibleToken.Receiver}>) {
    |         ^

error: resource `DapperUtilityCoin.Vault` does not conform to resource interface `FungibleToken.Vault`
  --> 01cf0e2f2f715450.DapperUtilityCoin:56:25
   |
56 |     access(all) resource Vault: FungibleToken.Vault {
   |                          ^ `DapperUtilityCoin.Vault` is missing definitions for members: `burnCallback`
   ... 
    |
172 |         access(FungibleToken.Withdraw) fun withdraw(amount: UFix64): @DapperUtilityCoin.Vault {
    |                                                -------- mismatch here

error: resource `DapperUtilityCoin.Vault` does not conform to resource interface `FungibleToken.Vault`
  --> 01cf0e2f2f715450.DapperUtilityCoin:56:25
   |
56 |     access(all) resource Vault: FungibleToken.Vault {
   |                          ^ `DapperUtilityCoin.Vault` is missing definitions for members: `isAvailableToWithdraw`
   ... 
    |
172 |         access(FungibleToken.Withdraw) fun withdraw(amount: UFix64): @DapperUtilityCoin.Vault {
    |                                                -------- mismatch here

error: resource `DapperUtilityCoin.Vault` does not conform to resource interface `FungibleToken.Vault`
  --> 01cf0e2f2f715450.DapperUtilityCoin:56:25
   |
56 |     access(all) resource Vault: FungibleToken.Vault {
   |                          ^ `DapperUtilityCoin.Vault` is missing definitions for members: `burnCallback`


, FIND: failed to deploy contract FIND: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 700e35632854f5dee5d1eb2bda93bbf9af24bc788bd2f750229dcffd7de0a42e:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FUSD` in `f8d6e0586b0a20c7.FUSD`
 --> 179b6b1cb6755e31.FIND:2:7
  |
2 | import FUSD from 0xf8d6e0586b0a20c7
  |        ^^^^ available exported declarations are:


error: cannot find declaration `FiatToken` in `f8d6e0586b0a20c7.FiatToken`
 --> 179b6b1cb6755e31.FIND:4:7
  |
4 | import FiatToken from 0xf8d6e0586b0a20c7
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `DapperUtilityCoin` in `01cf0e2f2f715450.DapperUtilityCoin`
 --> 179b6b1cb6755e31.FIND:5:7
  |
5 | import DapperUtilityCoin from 0x01cf0e2f2f715450
  |        ^^^^^^^^^^^^^^^^^ available exported declarations are:


error: cannot find declaration `Profile` in `179b6b1cb6755e31.Profile`
 --> 179b6b1cb6755e31.FIND:6:7
  |
6 | import Profile from 0x179b6b1cb6755e31
  |        ^^^^^^^ available exported declarations are:


error: ambiguous intersection type
   --> 179b6b1cb6755e31.FIND:622:68
    |
622 |         access(account) fun move(name: String, profile: Capability<&{Profile.Public}>, to: Capability<&LeaseCollection>)
    |                                                                     ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FIND:392:55
    |
392 |         access(contract) fun move(profile: Capability<&{Profile.Public}>) {
    |                                                        ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FIND:438:38
    |
438 |         access(all) fun getProfile():&{Profile.Public}? {
    |                                       ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1292:64
     |
1292 |         access(all) fun move(name: String, profile: Capability<&{Profile.Public}>, to: Capability<&LeaseCollection>) {
     |                                                                 ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1433:74
     |
1433 |         init( validUntil:UFix64, lockedUntil:UFix64, profile: Capability<&{Profile.Public}>, name: String) {
     |                                                                           ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1428:45
     |
1428 |         access(all) var profile: Capability<&{Profile.Public}>
     |                                              ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1463:59
     |
1463 |         access(all) fun setProfile (_ profile: Capability<&{Profile.Public}>) {
     |                                                            ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1599:69
     |
1599 |         access(contract) fun move(name: String, profile: Capability<&{Profile.Public}>) {
     |                                                                      ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1609:97
     |
1609 |         access(all) fun registerUSDC(name: String, vault: @FiatToken.Vault, profile: Capability<&{Profile.Public}>,  leases: Capability<&{LeaseCollectionPublic}>) {
     |                                                                                                  ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1640:88
     |
1640 |         access(all) fun register(name: String, vault: @FUSD.Vault, profile: Capability<&{Profile.Public}>,  leases: Capability<&{LeaseCollectionPublic}>) {
     |                                                                                         ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1666:130
     |
1666 |         access(all) fun registerDapper(merchAccount: Address, name: String, vault: @DapperUtilityCoin.Vault, profile: Capability<&{Profile.Public}>, leases: Capability<&{LeaseCollectionPublic}>) {
     |                                                                                                                                   ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1695:81
     |
1695 |         access(account) fun internal_register(name: String, profile: Capability<&{Profile.Public}>,  leases: Capability<&{LeaseCollectionPublic}>) {
     |                                                                                  ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1751:55
     |
1751 |         access(account) fun profile(_ name: String) : &{Profile.Public}? {
     |                                                        ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1765:50
     |
1765 |         access(all) fun lookup(_ name: String) : &{Profile.Public}? {
     |                                                   ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FIND:149:45
    |
149 |     access(all) fun lookup(_ input:String): &{Profile.Public}? {
    |                                              ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:2110:11
     |
2110 |         if self.account.storage.borrow<&FUSD.Vault>(from: FUSD.VaultStoragePath) == nil {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:2118:27
     |
2118 |             let vaultCap = self.account.capabilities.storage.issue<&FUSD.Vault>(
2119 |                 FUSD.VaultStoragePath
2120 |             )
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FIND:152:51
    |
152 |             if let cap = account.capabilities.get<&{Profile.Public}>(Profile.publicPath) {
    |                                                    ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:152:25
    |
152 |             if let cap = account.capabilities.get<&{Profile.Public}>(Profile.publicPath) {
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:153:23
    |
153 |                 return cap.borrow()
    |                        ^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FIND:229:44
    |
229 |         let cap = account.capabilities.get<&{Profile.Public}>(Profile.publicPath)
    |                                             ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:229:18
    |
229 |         let cap = account.capabilities.get<&{Profile.Public}>(Profile.publicPath)
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:231:25
    |
231 |             let profile= cap!.borrow()!
    |                          ^^^^^^^^^^^^^

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FIND:232:179
    |
232 |             emit FungibleTokenSent(from: fromAddress, fromName: FIND.reverseLookup(fromAddress), name: to, toAddress: profile.getAddress(), message:message, tag:tag, amount:valut.balance, ftType:vault.getType().identifier)
    |                                                                                                                                                                                    ^^^^^^^^^^ unknown member

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:240:37
    |
240 |         } else if vault.getType() == Type<@FUSD.Vault>() {
    |                                      ^^^^^^^^^^^^^^^^^^^

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FIND:244:166
    |
244 |             emit FungibleTokenSent(from: fromAddress, fromName: FIND.reverseLookup(fromAddress), name: "", toAddress: address, message:message, tag:tag, amount:valut.balance, ftType:vault.getType().identifier)
    |                                                                                                                                                                       ^^^^^^^^^^ unknown member

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FIND:526:61
    |
526 |             let profile=getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()!
    |                                                              ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:526:24
    |
526 |             let profile=getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()!
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:526:24
    |
526 |             let profile=getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()!
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:540:226
    |
540 |             emit EnglishAuction(name: self.name, uuid: lease.uuid, seller: owner, sellerName:ownerName, amount: offer.getBalance(self.name), auctionReservePrice: lease.auctionReservePrice!, status: "active_ongoing", vaultType:Type<@FUSD.Vault>().identifier, buyer:bidder, buyerName:bidderName, buyerAvatar:bidderAvatar, endsAt: self.endsAt ,validUntil: lease.getLeaseExpireTime(), lockedUntil: lease.getLeaseLockedUntil(), previousBuyer:previousBuyer, previousBuyerName:previousBuyerName)
    |                                                                                                                                                                                                                                   ^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FIND:856:68
    |
856 |             let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow() ?? panic("Bidder unlinked the profile capability. bidder address : ".concat(bidder.toString()))
    |                                                                     ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:856:31
    |
856 |             let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow() ?? panic("Bidder unlinked the profile capability. bidder address : ".concat(bidder.toString()))
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:856:31
    |
856 |             let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow() ?? panic("Bidder unlinked the profile capability. bidder address : ".concat(bidder.toString()))
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:863:231
    |
863 |             emit EnglishAuction(name: name, uuid:lease.uuid, seller: owner, sellerName:FIND.reverseLookup(owner), amount: offer.getBalance(name), auctionReservePrice: lease.auctionReservePrice!, status: "active_ongoing", vaultType:Type<@FUSD.Vault>().identifier, buyer:bidder, buyerName:bidderName, buyerAvatar:bidderAvatar, endsAt: endsAt, validUntil: lease.getLeaseExpireTime(), lockedUntil: lease.getLeaseLockedUntil(), previousBuyer:nil, previousBuyerName:nil)
    |                                                                                                                                                                                                                                        ^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FIND:892:72
    |
892 |                 let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()
    |                                                                         ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:892:35
    |
892 |                 let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:892:35
    |
892 |                 let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:901:154
    |
901 |                 emit DirectOffer(name: name, uuid: lease.uuid, seller: owner, sellerName: ownerName, amount: amount, status: "cancel_rejected", vaultType:Type<@FUSD.Vault>().identifier, buyer:bidder, buyerName:bidderName, buyerAvatar: bidderAvatar, validUntil: lease.getLeaseExpireTime(), lockedUntil: lease.getLeaseLockedUntil(), previousBuyer:nil, previousBuyerName:nil)
    |                                                                                                                                                           ^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FIND:934:68
    |
934 |             let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow() ?? panic("Create a profile before you make a bid")
    |                                                                     ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:934:31
    |
934 |             let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow() ?? panic("Create a profile before you make a bid")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:934:31
    |
934 |             let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow() ?? panic("Create a profile before you make a bid")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:944:154
    |
944 |                 emit DirectOffer(name: name, uuid: lease.uuid, seller: owner, sellerName: ownerName, amount: balance, status: "active_offered", vaultType:Type<@FUSD.Vault>().identifier, buyer:bidder, buyerName:bidderName, buyerAvatar: bidderAvatar, validUntil: lease.getLeaseExpireTime(), lockedUntil: lease.getLeaseLockedUntil(), previousBuyer:nil, previousBuyerName:nil)
    |                                                                                                                                                           ^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:954:154
    |
954 |                 emit DirectOffer(name: name, uuid: lease.uuid, seller: owner, sellerName: ownerName, amount: balance, status: "active_offered", vaultType:Type<@FUSD.Vault>().identifier, buyer:bidder, buyerName:bidderName,  buyerAvatar: bidderAvatar, validUntil: lease.getLeaseExpireTime(), lockedUntil: lease.getLeaseLockedUntil(), previousBuyer:nil, previousBuyerName:nil)
    |                                                                                                                                                           ^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1007:61
     |
1007 |             let profile=getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()
     |                                                              ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1007:24
     |
1007 |             let profile=getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1007:24
     |
1007 |             let profile=getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1023:153
     |
1023 |                 emit DirectOffer(name: name, uuid:lease.uuid, seller: owner, sellerName: ownerName, amount: balance, status: "active_offered", vaultType:Type<@FUSD.Vault>().identifier, buyer:bidder, buyerName:bidderName,  buyerAvatar: bidderAvatar, validUntil: lease.getLeaseExpireTime(), lockedUntil: lease.getLeaseLockedUntil(), previousBuyer:previousBuyer, previousBuyerName:previousBuyerName)
     |                                                                                                                                                          ^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1033:154
     |
1033 |                 emit DirectOffer(name: name, uuid: lease.uuid, seller: owner, sellerName: ownerName, amount: balance, status: "active_offered", vaultType:Type<@FUSD.Vault>().identifier, buyer:bidder, buyerName:bidderName,  buyerAvatar: bidderAvatar, validUntil: lease.getLeaseExpireTime(), lockedUntil: lease.getLeaseLockedUntil(), previousBuyer:previousBuyer, previousBuyerName:previousBuyerName)
     |                                                                                                                                                           ^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1049:72
     |
1049 |                 let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()
     |                                                                         ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1049:35
     |
1049 |                 let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()
     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1049:35
     |
1049 |                 let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()
     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1056:162
     |
1056 |                 emit DirectOffer(name: name, uuid:lease.uuid, seller: owner, sellerName: ownerName, amount: cbRef.getBalance(name), status: "rejected", vaultType:Type<@FUSD.Vault>().identifier, buyer:bidder, buyerName:bidderName, buyerAvatar: bidderAvatar, validUntil: lease.getLeaseExpireTime(), lockedUntil: lease.getLeaseLockedUntil(), previousBuyer:nil, previousBuyerName:nil)
     |                                                                                                                                                                   ^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1081:72
     |
1081 |                 let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()
     |                                                                         ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1081:35
     |
1081 |                 let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()
     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1081:35
     |
1081 |                 let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()
     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1091:217
     |
1091 |                     emit EnglishAuction(name: name, uuid:lease.uuid, seller: owner, sellerName:ownerName, amount: balance, auctionReservePrice: lease.auctionReservePrice!, status: "cancel_reserved_not_met", vaultType:Type<@FUSD.Vault>().identifier, buyer:bidder, buyerName:bidderName, buyerAvatar: bidderAvatar, endsAt: auction.endsAt, validUntil: lease.getLeaseExpireTime(), lockedUntil: lease.getLeaseLockedUntil(), previousBuyer:nil, previousBuyerName:nil)
     |                                                                                                                                                                                                                          ^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1093:208
     |
1093 |                     emit EnglishAuction(name: name, uuid:lease.uuid, seller: owner, sellerName:ownerName, amount: balance, auctionReservePrice: lease.auctionReservePrice!, status: "cancel_listing", vaultType:Type<@FUSD.Vault>().identifier, buyer:bidder, buyerName:bidderName, buyerAvatar: bidderAvatar, endsAt: auction.endsAt, validUntil: lease.getLeaseExpireTime(), lockedUntil: lease.getLeaseLockedUntil(), previousBuyer:nil, previousBuyerName:nil)
     |                                                                                                                                                                                                                 ^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1102:196
     |
1102 |             emit EnglishAuction(name: name, uuid:lease.uuid, seller: owner, sellerName:ownerName, amount: 0.0, auctionReservePrice: lease.auctionReservePrice!, status: "cancel_listing", vaultType:Type<@FUSD.Vault>().identifier, buyer:nil, buyerName:nil, buyerAvatar: nil, endsAt: nil, validUntil: lease.getLeaseExpireTime(), lockedUntil: lease.getLeaseLockedUntil(), previousBuyer:nil, previousBuyerName:nil)
     |                                                                                                                                                                                                     ^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1140:73
     |
1140 |                 let newProfile= getAccount(cb.address).capabilities.get<&{Profile.Public}>(Profile.publicPath)!
     |                                                                          ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1140:32
     |
1140 |                 let newProfile= getAccount(cb.address).capabilities.get<&{Profile.Public}>(Profile.publicPath)!
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1141:28
     |
1141 |                 let avatar= newProfile.borrow()?.getAvatar() ?? panic("Create a profile before you fulfill a bid")
     |                             ^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1148:194
     |
1148 |                     emit DirectOffer(name: name, uuid: lease.uuid, seller: lease.owner!.address, sellerName: FIND.reverseLookup(lease.owner!.address), amount: soldFor, status: "sold", vaultType:Type<@FUSD.Vault>().identifier, buyer:newProfile.address, buyerName:FIND.reverseLookup(newProfile.address), buyerAvatar: avatar, validUntil: lease.getLeaseExpireTime(), lockedUntil: lease.getLeaseLockedUntil(), previousBuyer:nil, previousBuyerName:nil)
     |                                                                                                                                                                                                   ^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1150:187
     |
1150 |                     emit Sale(name: name, uuid: lease.uuid, seller: lease.owner!.address, sellerName: FIND.reverseLookup(lease.owner!.address), amount: soldFor, status: "sold", vaultType:Type<@FUSD.Vault>().identifier, buyer:newProfile.address, buyerName:FIND.reverseLookup(newProfile.address), buyerAvatar: avatar, validUntil: lease.getLeaseExpireTime(), lockedUntil: lease.getLeaseLockedUntil())
     |                                                                                                                                                                                            ^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1188:95
     |
1188 |             let newProfile= getAccount(auctionRef.latestBidCallback.address).capabilities.get<&{Profile.Public}>(Profile.publicPath)!
     |                                                                                                ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1188:28
     |
1188 |             let newProfile= getAccount(auctionRef.latestBidCallback.address).capabilities.get<&{Profile.Public}>(Profile.publicPath)!
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1189:24
     |
1189 |             let avatar= newProfile.borrow()?.getAvatar() ?? panic("Create a profile before you fulfill a bid")
     |                         ^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1196:236
     |
1196 |             emit EnglishAuction(name: name, uuid:lease.uuid, seller: lease.owner!.address, sellerName:FIND.reverseLookup(lease.owner!.address), amount: soldFor, auctionReservePrice: lease.auctionReservePrice!, status: "sold", vaultType:Type<@FUSD.Vault>().identifier, buyer:newProfile.address, buyerName:FIND.reverseLookup(newProfile.address), buyerAvatar: avatar, endsAt: self.borrowAuction(name).endsAt, validUntil: lease.getLeaseExpireTime(), lockedUntil: lease.getLeaseLockedUntil(), previousBuye... 
     |                                                                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1233:72
     |
1233 |                 let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()
     |                                                                         ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1233:35
     |
1233 |                 let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()
     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1233:35
     |
1233 |                 let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()
     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1240:165
     |
1240 |                 emit DirectOffer(name: name, uuid:tokenRef.uuid, seller: owner, sellerName: ownerName, amount: cbRef.getBalance(name), status: "rejected", vaultType:Type<@FUSD.Vault>().identifier, buyer:bidder, buyerName:bidderName, buyerAvatar: bidderAvatar, validUntil: tokenRef.getLeaseExpireTime(), lockedUntil: tokenRef.getLeaseLockedUntil(), previousBuyer:nil, previousBuyerName:nil)
     |                                                                                                                                                                      ^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1249:270
     |
1249 |             emit EnglishAuction(name: name, uuid: tokenRef.uuid, seller: self.owner!.address, sellerName:FIND.reverseLookup(self.owner!.address), amount: tokenRef.auctionStartPrice!, auctionReservePrice: tokenRef.auctionReservePrice!, status: "active_listed", vaultType:Type<@FUSD.Vault>().identifier, buyer:nil, buyerName:nil, buyerAvatar: nil, endsAt: nil, validUntil: tokenRef.getLeaseExpireTime(), lockedUntil: tokenRef.getLeaseLockedUntil(), previousBuyer:nil, previousBuyerName:nil)
     |                                                                                                                                                                                                                                                                               ^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1264:201
     |
1264 |             emit Sale(name: name, uuid: tokenRef.uuid, seller: self.owner!.address, sellerName: FIND.reverseLookup(self.owner!.address), amount: tokenRef.salePrice!, status: "active_listed", vaultType:Type<@FUSD.Vault>().identifier, buyer:nil, buyerName:nil, buyerAvatar: nil, validUntil: tokenRef.getLeaseExpireTime(), lockedUntil: tokenRef.getLeaseLockedUntil())
     |                                                                                                                                                                                                          ^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1287:193
     |
1287 |             emit Sale(name: name, uuid:tokenRef.uuid, seller: self.owner!.address, sellerName: FIND.reverseLookup(self.owner!.address), amount: tokenRef.salePrice!, status: "cancel", vaultType:Type<@FUSD.Vault>().identifier, buyer:nil, buyerName:nil, buyerAvatar: nil, validUntil: tokenRef.getLeaseExpireTime(), lockedUntil: tokenRef.getLeaseLockedUntil())
     |                                                                                                                                                                                                  ^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1358:59
     |
1358 |             let profileCap = self.owner!.capabilities.get<&{Profile.Public}>(Profile.publicPath)!
     |                                                            ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1358:29
     |
1358 |             let profileCap = self.owner!.capabilities.get<&{Profile.Public}>(Profile.publicPath)!
     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1373:59
     |
1373 |             let profileCap = self.owner!.capabilities.get<&{Profile.Public}>(Profile.publicPath)!
     |                                                            ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1373:29
     |
1373 |             let profileCap = self.owner!.capabilities.get<&{Profile.Public}>(Profile.publicPath)!
     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1388:59
     |
1388 |             let profileCap = self.owner!.capabilities.get<&{Profile.Public}>(Profile.publicPath)!
     |                                                            ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1388:29
     |
1388 |             let profileCap = self.owner!.capabilities.get<&{Profile.Public}>(Profile.publicPath)!
     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find type in this scope: `FungibleToken.Withdraw`
    --> 179b6b1cb6755e31.FIND:1883:47
     |
1883 |             let vaultRef = &bid.vault as auth (FungibleToken.Withdraw) &{FungibleToken.Vault}
     |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot access `withdraw`: function requires `Withdraw` authorization, but reference only has `not specified` authorization
    --> 179b6b1cb6755e31.FIND:1889:26
     |
1889 |             let vault  <- vaultRef.withdraw(amount: vaultRef.getBalance())
     |                           ^^^^^^^^^^^^^^^^^

error: value of type `auth(not specified) &{FungibleToken.Vault}` has no member `getBalance`
    --> 179b6b1cb6755e31.FIND:1889:61
     |
1889 |             let vault  <- vaultRef.withdraw(amount: vaultRef.getBalance())
     |                                                              ^^^^^^^^^^ unknown member

error: cannot find type in this scope: `FungibleToken.Withdraw`
    --> 179b6b1cb6755e31.FIND:1901:47
     |
1901 |             let vaultRef = &bid.vault as auth (FungibleToken.Withdraw) &{FungibleToken.Vault}
     |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot access `withdraw`: function requires `Withdraw` authorization, but reference only has `not specified` authorization
    --> 179b6b1cb6755e31.FIND:1902:53
     |
1902 |             self.receiver.borrow()!.deposit(from: <- vaultRef.withdraw(amount: vaultRef.getBalance()))
     |                                                      ^^^^^^^^^^^^^^^^^

error: value of type `auth(not specified) &{FungibleToken.Vault}` has no member `getBalance`
    --> 179b6b1cb6755e31.FIND:1902:88
     |
1902 |             self.receiver.borrow()!.deposit(from: <- vaultRef.withdraw(amount: vaultRef.getBalance()))
     |                                                                                         ^^^^^^^^^^ unknown member

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
    --> 179b6b1cb6755e31.FIND:1947:32
     |
1947 |             let balance = valut.balance
     |                                 ^^^^^^^^^^ unknown member


, FindLeaseMarketAuctionSoft: failed to deploy contract FindLeaseMarketAuctionSoft: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 39b1c7ddd462c1425c689a554973d98ab87cbf38c4badaf38f7a2c5d66202ba4:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
 --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:4:7
  |
4 | import FindViews from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:6:7
  |
6 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot find declaration `FindMarket` in `179b6b1cb6755e31.FindMarket`
 --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:7:7
  |
7 | import FindMarket from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindLeaseMarket` in `179b6b1cb6755e31.FindLeaseMarket`
 --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:8:7
  |
8 | import FindLeaseMarket from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^^^^^^ available exported declarations are:


error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:232:46
    |
232 |         init (_ tenantCapability: Capability<&{FindMarket.TenantPublic}>) {
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:230:59
    |
230 |         access(contract) let tenantCapability: Capability<&{FindMarket.TenantPublic}>
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:237:40
    |
237 |         access(self) fun getTenant() : &{FindMarket.TenantPublic} {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:512:58
    |
512 |         access(all) fun borrowSaleItem(_ name: String) : &{FindLeaseMarket.SaleItem} {
    |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:575:92
    |
575 |         init(receiver: Capability<&{FungibleToken.Receiver}>, tenantCapability: Capability<&{FindMarket.TenantPublic}>) {
    |                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:572:59
    |
572 |         access(contract) let tenantCapability: Capability<&{FindMarket.TenantPublic}>
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:581:40
    |
581 |         access(self) fun getTenant() : &{FindMarket.TenantPublic} {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:671:56
    |
671 |         access(all) fun borrowBidItem(_ name: String): &{FindLeaseMarket.Bid} {
    |                                                         ^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:688:82
    |
688 |     access(all) fun createEmptySaleItemCollection(_ tenantCapability: Capability<&{FindMarket.TenantPublic}>) : @SaleItemCollection {
    |                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:692:130
    |
692 |     access(all) fun createEmptyMarketBidCollection(receiver: Capability<&{FungibleToken.Receiver}>, tenantCapability: Capability<&{FindMarket.TenantPublic}>) : @MarketBidCollection {
    |                                                                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:175:19
    |
175 |             return Type<@FIND.Lease>()
    |                    ^^^^^^^^^^^^^^^^^^^

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:438:21
    |
438 |             if valut.balance < saleItem.auctionReservePrice {
    |                      ^^^^^^^^^^ unknown member

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:439:114
    |
439 |                 panic("cannot fulfill auction reserve price was not met, cancel it without a vault ".concat(valut.balance.toString()).concat(" < ").concat(saleItem.auctionReservePrice.toString()))
    |                                                                                                                   ^^^^^^^^^^ unknown member

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:516:42
    |
516 |             return (&self.items[name] as &{FindLeaseMarket.SaleItem}?)!
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:675:41
    |
675 |             return (&self.bids[name] as &{FindLeaseMarket.Bid}?)!
    |                                          ^^^^^^^^^^^^^^^^^^^^^


, FindMarketDirectOfferSoft: failed to deploy contract FindMarketDirectOfferSoft: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> c821bdae1d87269768d491308b8da959109b353c4d2b5b783c3966fba678c680:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
 --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:5:7
  |
5 | import FindViews from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:8:7
  |
8 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot find declaration `FindMarket` in `179b6b1cb6755e31.FindMarket`
 --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:9:7
  |
9 | import FindMarket from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^ available exported declarations are:


error: cannot find declaration `Profile` in `179b6b1cb6755e31.Profile`
  --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:10:7
   |
10 | import Profile from 0x179b6b1cb6755e31
   |        ^^^^^^^ available exported declarations are:


error: ambiguous intersection type
  --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:26:22
   |
26 |         init(pointer: {FindViews.Pointer}, callback: Capability<&MarketBidCollection>, validUntil: UFix64?, saleItemExtraField: {String : AnyStruct}) {
   |                       ^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
  --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:18:38
   |
18 |         access(contract) var pointer: {FindViews.Pointer}
   |                                       ^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:193:46
    |
193 |         init (_ tenantCapability: Capability<&{FindMarket.TenantPublic}>) {
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:191:59
    |
191 |         access(contract) let tenantCapability: Capability<&{FindMarket.TenantPublic}>
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:198:40
    |
198 |         access(self) fun getTenant() : &{FindMarket.TenantPublic} {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:518:56
    |
518 |         access(all) fun borrowSaleItem(_ id: UInt64) : &{FindMarket.SaleItem} {
    |                                                         ^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:590:92
    |
590 |         init(receiver: Capability<&{FungibleToken.Receiver}>, tenantCapability: Capability<&{FindMarket.TenantPublic}>) {
    |                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:587:59
    |
587 |         access(contract) let tenantCapability: Capability<&{FindMarket.TenantPublic}>
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:596:40
    |
596 |         access(self) fun getTenant() : &{FindMarket.TenantPublic} {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:728:54
    |
728 |         access(all) fun borrowBidItem(_ id: UInt64): &{FindMarket.Bid} {
    |                                                       ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:743:82
    |
743 |     access(all) fun createEmptySaleItemCollection(_ tenantCapability: Capability<&{FindMarket.TenantPublic}>) : @SaleItemCollection {
    |                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:747:130
    |
747 |     access(all) fun createEmptyMarketBidCollection(receiver: Capability<&{FungibleToken.Receiver}>, tenantCapability: Capability<&{FindMarket.TenantPublic}>) : @MarketBidCollection {
    |                                                                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:522:40
    |
522 |             return (&self.items[id] as &{FindMarket.SaleItem}?)!
    |                                         ^^^^^^^^^^^^^^^^^^^^^

error: value of type `{NonFungibleToken.NFT}` has no member `getID`
   --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:605:24
    |
605 |             let id= nft.getID()
    |                         ^^^^^ unknown member

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:732:39
    |
732 |             return (&self.bids[id] as &{FindMarket.Bid}?)!
    |                                        ^^^^^^^^^^^^^^^^


, NFGv3: failed to deploy contract NFGv3: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 3fcd0fb14963a26ad0c9963060ad39585784da3ba2797f34c1f214856c425c98:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindForge` in `179b6b1cb6755e31.FindForge`
 --> 179b6b1cb6755e31.NFGv3:4:7
  |
4 | import FindForge from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.NFGv3:185:15
    |
185 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: contract `NFGv3` does not conform to contract interface `ViewResolver`
 --> 179b6b1cb6755e31.NFGv3:7:21
  |
7 | access(all) contract NFGv3: ViewResolver {
  |                      ^ `NFGv3` is missing definitions for members: `getContractViews`, `resolveContractView`

error: too many arguments
   --> 179b6b1cb6755e31.NFGv3:128:23
    |
128 |                 return MetadataViews.NFTCollectionData(
129 |                     storagePath: NFGv3.CollectionStoragePath,
130 |                     publicPath: NFGv3.CollectionPublicPath,
131 |                     providerPath: /private/NFGv3Collection,
132 |                     publicCollection: Type<&NFGv3.Collection>(),
133 |                     publicLinkedType: Type<&NFGv3.Collection>(),
134 |                     providerLinkedType: Type<auth(NonFungibleToken.Withdraw) &NFGv3.Collection>(),
135 |                     createEmptyCollectionFunction: (fun(): @{NonFungibleToken.Collection} {return <- NFGv3.createEmptyCollection()})
136 |                 )
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected up to 5, got 7

error: mismatched types
   --> 179b6b1cb6755e31.NFGv3:131:34
    |
131 |                     providerPath: /private/NFGv3Collection,
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^ expected `Type`, got `PrivatePath`

error: mismatched types
   --> 179b6b1cb6755e31.NFGv3:133:38
    |
133 |                     publicLinkedType: Type<&NFGv3.Collection>(),
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `fun(): @{NonFungibleToken.Collection}`, got `Type`

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.NFGv3:134:50
    |
134 |                     providerLinkedType: Type<auth(NonFungibleToken.Withdraw) &NFGv3.Collection>(),
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: incorrect argument label
   --> 179b6b1cb6755e31.NFGv3:131:20
    |
131 |                     providerPath: /private/NFGv3Collection,
    |                     ^^^^^^^^^^^^^ expected `publicCollection`, got `providerPath`

error: incorrect argument label
   --> 179b6b1cb6755e31.NFGv3:132:20
    |
132 |                     publicCollection: Type<&NFGv3.Collection>(),
    |                     ^^^^^^^^^^^^^^^^^ expected `publicLinkedType`, got `publicCollection`

error: incorrect argument label
   --> 179b6b1cb6755e31.NFGv3:133:20
    |
133 |                     publicLinkedType: Type<&NFGv3.Collection>(),
    |                     ^^^^^^^^^^^^^^^^^ expected `createEmptyCollectionFunction`, got `publicLinkedType`

error: resource `NFGv3.NFT` does not conform to resource interface `NonFungibleToken.NFT`
  --> 179b6b1cb6755e31.NFGv3:47:25
   |
47 |     access(all) resource NFT: NonFungibleToken.NFT, ViewResolver.Resolver {
   |                          ^ `NFGv3.NFT` is missing definitions for members: `createEmptyCollection`

error: missing access modifier for function
   --> 179b6b1cb6755e31.NFGv3:185:8
    |
185 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |         ^

error: resource `NFGv3.Collection` does not conform to resource interface `NonFungibleToken.Provider`
   --> 179b6b1cb6755e31.NFGv3:170:25
    |
170 |     access(all) resource Collection: NonFungibleToken.Provider, NonFungibleToken.Receiver, NonFungibleToken.Collection, ViewResolver.ResolverCollection {
    |                          ^
   ... 
    |
185 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                                                   -------- mismatch here

error: missing access modifier for function
   --> 179b6b1cb6755e31.NFGv3:267:8
    |
267 |         access(FindForge.ForgeOwner) fun mint(platform: FindForge.MinterPlatform, data: AnyStruct, verifier: &FindForge.Verifier) : @{NonFungibleToken.NFT} {
    |         ^

error: missing access modifier for function
   --> 179b6b1cb6755e31.NFGv3:285:8
    |
285 |         access(FindForge.ForgeOwner) fun addContractData(platform: FindForge.MinterPlatform, data: AnyStruct, verifier: &FindForge.Verifier) {
    |         ^


, FlowUtilityToken: failed to deploy contract FlowUtilityToken: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> a2d9b203282f41ce78cef28f3c4e5ae58d3c7dc98897416c5c1c362640ee8443:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> 01cf0e2f2f715450.FlowUtilityToken:172:15
    |
172 |         access(FungibleToken.Withdraw) fun withdraw(amount: UFix64): @FlowUtilityToken.Vault {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> 01cf0e2f2f715450.FlowUtilityToken:194:15
    |
194 |         access(FungibleToken.Withdraw) fun transfer(amount: UFix64, receiver: Capability<&{FungibleToken.Receiver}>) {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: contract `FlowUtilityToken` does not conform to contract interface `ViewResolver`
 --> 01cf0e2f2f715450.FlowUtilityToken:6:21
  |
6 | access(all) contract FlowUtilityToken: ViewResolver  {
  |                      ^ `FlowUtilityToken` is missing definitions for members: `getContractViews`, `resolveContractView`

error: too many arguments
   --> 01cf0e2f2f715450.FlowUtilityToken:117:23
    |
117 |                 return FungibleTokenMetadataViews.FTVaultData(
118 |                     storagePath: self.storagePath,
119 |                     receiverPath: self.receiverPath,
120 |                     metadataPath: self.publicPath,
121 |                     providerPath: /private/exampleTokenVault,
122 |                     receiverLinkedType: Type<&{FungibleToken.Receiver}>(),
123 |                     metadataLinkedType: Type<&FlowUtilityToken.Vault>(),
124 |                     providerLinkedType: Type<&FlowUtilityToken.Vault>(),
125 |                     createEmptyVaultFunction: (fun(): @{FungibleToken.Vault} {
126 |                         return <-vaultRef.createEmptyVault()
127 |                     })
128 |                 )
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected up to 6, got 8

error: mismatched types
   --> 01cf0e2f2f715450.FlowUtilityToken:121:34
    |
121 |                     providerPath: /private/exampleTokenVault,
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Type`, got `PrivatePath`

error: mismatched types
   --> 01cf0e2f2f715450.FlowUtilityToken:123:40
    |
123 |                     metadataLinkedType: Type<&FlowUtilityToken.Vault>(),
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `fun(): @{FungibleToken.Vault}`, got `Type`

error: incorrect argument label
   --> 01cf0e2f2f715450.FlowUtilityToken:121:20
    |
121 |                     providerPath: /private/exampleTokenVault,
    |                     ^^^^^^^^^^^^^ expected `receiverLinkedType`, got `providerPath`

error: incorrect argument label
   --> 01cf0e2f2f715450.FlowUtilityToken:122:20
    |
122 |                     receiverLinkedType: Type<&{FungibleToken.Receiver}>(),
    |                     ^^^^^^^^^^^^^^^^^^^ expected `metadataLinkedType`, got `receiverLinkedType`

error: incorrect argument label
   --> 01cf0e2f2f715450.FlowUtilityToken:123:20
    |
123 |                     metadataLinkedType: Type<&FlowUtilityToken.Vault>(),
    |                     ^^^^^^^^^^^^^^^^^^^ expected `createEmptyVaultFunction`, got `metadataLinkedType`

error: missing access modifier for function
   --> 01cf0e2f2f715450.FlowUtilityToken:172:8
    |
172 |         access(FungibleToken.Withdraw) fun withdraw(amount: UFix64): @FlowUtilityToken.Vault {
    |         ^

error: missing access modifier for function
   --> 01cf0e2f2f715450.FlowUtilityToken:194:8
    |
194 |         access(FungibleToken.Withdraw) fun transfer(amount: UFix64, receiver: Capability<&{FungibleToken.Receiver}>) {
    |         ^

error: resource `FlowUtilityToken.Vault` does not conform to resource interface `FungibleToken.Vault`
  --> 01cf0e2f2f715450.FlowUtilityToken:56:25
   |
56 |     access(all) resource Vault: FungibleToken.Vault {
   |                          ^ `FlowUtilityToken.Vault` is missing definitions for members: `burnCallback`
   ... 
    |
172 |         access(FungibleToken.Withdraw) fun withdraw(amount: UFix64): @FlowUtilityToken.Vault {
    |                                                -------- mismatch here

error: resource `FlowUtilityToken.Vault` does not conform to resource interface `FungibleToken.Vault`
  --> 01cf0e2f2f715450.FlowUtilityToken:56:25
   |
56 |     access(all) resource Vault: FungibleToken.Vault {
   |                          ^ `FlowUtilityToken.Vault` is missing definitions for members: `isAvailableToWithdraw`
   ... 
    |
172 |         access(FungibleToken.Withdraw) fun withdraw(amount: UFix64): @FlowUtilityToken.Vault {
    |                                                -------- mismatch here

error: resource `FlowUtilityToken.Vault` does not conform to resource interface `FungibleToken.Vault`
  --> 01cf0e2f2f715450.FlowUtilityToken:56:25
   |
56 |     access(all) resource Vault: FungibleToken.Vault {
   |                          ^ `FlowUtilityToken.Vault` is missing definitions for members: `burnCallback`


, Profile: failed to deploy contract Profile: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> a7be0137faa8c85442827175bd4c43dc47e1e9ade4d11e558d542a93e17b40ac:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: value of type `&{FungibleToken.Vault}?` has no member `getBalance`
   --> 179b6b1cb6755e31.Profile:124:50
    |
124 |             self.balance=wallet.balance.borrow()?.getBalance() ?? 0.0
    |                                                   ^^^^^^^^^^ unknown member

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.Profile:436:215
    |
436 |                 let ref = self.wallets[walletIndexCache!].receiver.borrow() ?? panic("This vault is not set up. ".concat(from.getType().identifier).concat(self.owner!.address.toString()).concat("  .  ").concat(from.getBalance().toString()))
    |                                                                                                                                                                                                                        ^^^^^^^^^^ unknown member

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.Profile:444:189
    |
444 |                     let ref = w.receiver.borrow() ?? panic("This vault is not set up. ".concat(from.getType().identifier).concat(self.owner!.address.toString()).concat("  .  ").concat(from.getBalance().toString()))
    |                                                                                                                                                                                              ^^^^^^^^^^ unknown member


, FindMarket: failed to deploy contract FindMarket: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 6dc533af8d7463533a0c44b3c184967b82d0cffa8394d378d58d91a561ffc47b:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `Profile` in `179b6b1cb6755e31.Profile`
 --> 179b6b1cb6755e31.FindMarket:3:7
  |
3 | import Profile from 0x179b6b1cb6755e31
  |        ^^^^^^^ available exported declarations are:


error: cannot find declaration `TokenForwarding` in `f8d6e0586b0a20c7.TokenForwarding`
  --> 179b6b1cb6755e31.FindMarket:12:7
   |
12 | import TokenForwarding from 0xf8d6e0586b0a20c7
   |        ^^^^^^^^^^^^^^^ available exported declarations are:


error: value of type `{FungibleToken.Vault}` has no member `getBalance`
    --> 179b6b1cb6755e31.FindMarket:1334:22
     |
1334 |     let soldFor=valut.balance
     |                       ^^^^^^^^^^ unknown member

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FindMarket:1410:13
     |
1410 |         case Type<@Profile.User>():
     |              ^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FindMarket:1426:13
     |
1426 |         case Type<@TokenForwarding.Forwarder>() :
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FindMarket:1411:77
     |
1411 |             if let ProfileRef = getAccount(cap.address).capabilities.borrow<&{Profile.Public}>(Profile.publicPath) {
     |                                                                              ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FindMarket:1411:32
     |
1411 |             if let ProfileRef = getAccount(cap.address).capabilities.borrow<&{Profile.Public}>(Profile.publicPath) {
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarket:953:92
    |
953 |     let profile = getAccount(FindMarket.tenantNameAddress[self.name]!).capabilities.borrow<&{Profile.Public}>(Profile.publicPath) ?? panic("Cannot get reference to Profile to check honour banning. Tenant Name : ".concat(self.name))
    |                                                                                             ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindMarket:953:18
    |
953 |     let profile = getAccount(FindMarket.tenantNameAddress[self.name]!).capabilities.borrow<&{Profile.Public}>(Profile.publicPath) ?? panic("Cannot get reference to Profile to check honour banning. Tenant Name : ".concat(self.name))
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


, Flomies: failed to deploy contract Flomies: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> febdfff7256e38b4be59edc9a795f4acd4bb112a50730ccdb6104f2d582f43aa:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindForge` in `179b6b1cb6755e31.FindForge`
 --> 179b6b1cb6755e31.Flomies:4:7
  |
4 | import FindForge from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindPack` in `179b6b1cb6755e31.FindPack`
 --> 179b6b1cb6755e31.Flomies:5:7
  |
5 | import FindPack from 0x179b6b1cb6755e31
  |        ^^^^^^^^ available exported declarations are:


error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.Flomies:217:9
    |
217 | 		access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    | 		       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: ambiguous intersection type
   --> 179b6b1cb6755e31.Flomies:393:38
    |
393 | 	access(account) fun createForge() : @{FindForge.Forge} {
    | 	                                     ^^^^^^^^^^^^^^^^^

error: contract `Flomies` does not conform to contract interface `ViewResolver`
 --> 179b6b1cb6755e31.Flomies:9:21
  |
9 | access(all) contract Flomies: ViewResolver{
  |                      ^ `Flomies` is missing definitions for members: `getContractViews`, `resolveContractView`

error: cannot infer type parameter: `T`
  --> 179b6b1cb6755e31.Flomies:80:3
   |
80 | 			Type<FindPack.PackRevealData>(), 
   | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.Flomies:158:8
    |
158 | 			case Type<FindPack.PackRevealData>():
    | 			     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: too many arguments
   --> 179b6b1cb6755e31.Flomies:146:11
    |
146 | 				return MetadataViews.NFTCollectionData(storagePath: Flomies.CollectionStoragePath,
147 | 				publicPath: Flomies.CollectionPublicPath,
148 | 				providerPath: /private/FlomiesCollection,
149 | 				publicCollection: Type<&Collection>(),
150 | 				publicLinkedType: Type<&Collection>(),
151 | 				providerLinkedType: Type<auth(NonFungibleToken.Withdraw) &Collection>(),
152 | 				createEmptyCollectionFunction: (fun(): @{NonFungibleToken.Collection} {return <- Flomies.createEmptyCollection()}))
    | 				       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected up to 5, got 7

error: mismatched types
   --> 179b6b1cb6755e31.Flomies:148:18
    |
148 | 				providerPath: /private/FlomiesCollection,
    | 				              ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Type`, got `PrivatePath`

error: mismatched types
   --> 179b6b1cb6755e31.Flomies:150:22
    |
150 | 				publicLinkedType: Type<&Collection>(),
    | 				                  ^^^^^^^^^^^^^^^^^^^ expected `fun(): @{NonFungibleToken.Collection}`, got `Type`

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.Flomies:151:34
    |
151 | 				providerLinkedType: Type<auth(NonFungibleToken.Withdraw) &Collection>(),
    | 				                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: incorrect argument label
   --> 179b6b1cb6755e31.Flomies:148:4
    |
148 | 				providerPath: /private/FlomiesCollection,
    | 				^^^^^^^^^^^^^ expected `publicCollection`, got `providerPath`

error: incorrect argument label
   --> 179b6b1cb6755e31.Flomies:149:4
    |
149 | 				publicCollection: Type<&Collection>(),
    | 				^^^^^^^^^^^^^^^^^ expected `publicLinkedType`, got `publicCollection`

error: incorrect argument label
   --> 179b6b1cb6755e31.Flomies:150:4
    |
150 | 				publicLinkedType: Type<&Collection>(),
    | 				^^^^^^^^^^^^^^^^^ expected `createEmptyCollectionFunction`, got `publicLinkedType`

error: resource `Flomies.NFT` does not conform to resource interface `NonFungibleToken.NFT`
  --> 179b6b1cb6755e31.Flomies:50:22
   |
50 | 	access(all) resource NFT: NonFungibleToken.NFT, ViewResolver.Resolver {
   | 	                     ^ `Flomies.NFT` is missing definitions for members: `createEmptyCollection`

error: missing access modifier for function
   --> 179b6b1cb6755e31.Flomies:217:2
    |
217 | 		access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    | 		^

error: resource `Flomies.Collection` does not conform to resource interface `NonFungibleToken.Provider`
   --> 179b6b1cb6755e31.Flomies:202:22
    |
202 | 	access(all) resource Collection: NonFungibleToken.Provider, NonFungibleToken.Receiver, NonFungibleToken.Collection, ViewResolver.ResolverCollection {
    | 	                     ^
   ... 
    |
217 | 		access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    | 		                                          -------- mismatch here

error: missing access modifier for function
   --> 179b6b1cb6755e31.Flomies:360:2
    |
360 | 		access(FindForge.ForgeOwner) fun mint(platform: FindForge.MinterPlatform, data: AnyStruct, verifier: &FindForge.Verifier) : @{NonFungibleToken.NFT} {
    | 		^

error: missing access modifier for function
   --> 179b6b1cb6755e31.Flomies:374:2
    |
374 | 		access(FindForge.ForgeOwner) fun addContractData(platform: FindForge.MinterPlatform, data: AnyStruct, verifier: &FindForge.Verifier) {
    | 		^


, PartyFavorz: failed to deploy contract PartyFavorz: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 2bcac0221475f5ed33506aa31ca7e21624554fd31bb11c2f8942ffc40a79bbe6:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindForge` in `179b6b1cb6755e31.FindForge`
 --> 179b6b1cb6755e31.PartyFavorz:4:7
  |
4 | import FindForge from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindPack` in `179b6b1cb6755e31.FindPack`
 --> 179b6b1cb6755e31.PartyFavorz:5:7
  |
5 | import FindPack from 0x179b6b1cb6755e31
  |        ^^^^^^^^ available exported declarations are:


error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.PartyFavorz:241:9
    |
241 | 		access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    | 		       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: contract `PartyFavorz` does not conform to contract interface `ViewResolver`
 --> 179b6b1cb6755e31.PartyFavorz:9:21
  |
9 | access(all) contract PartyFavorz: ViewResolver {
  |                      ^ `PartyFavorz` is missing definitions for members: `getContractViews`, `resolveContractView`

error: cannot infer type parameter: `T`
  --> 179b6b1cb6755e31.PartyFavorz:78:3
   |
78 | 			Type<FindPack.PackRevealData>()
   | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
  --> 179b6b1cb6755e31.PartyFavorz:87:8
   |
87 | 			case Type<FindPack.PackRevealData>():
   | 			     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: too many arguments
   --> 179b6b1cb6755e31.PartyFavorz:129:11
    |
129 | 				return MetadataViews.NFTCollectionData(
130 | 					storagePath: PartyFavorz.CollectionStoragePath,
131 | 					publicPath: PartyFavorz.CollectionPublicPath,
132 | 					providerPath: /private/PartyFavorzCollection,
133 | 					publicCollection: Type<&PartyFavorz.Collection>(),
134 | 					publicLinkedType: Type<&PartyFavorz.Collection>(),
135 | 					providerLinkedType: Type<auth (NonFungibleToken.Withdraw) &PartyFavorz.Collection>(),
136 | 					createEmptyCollectionFunction: (fun(): @{NonFungibleToken.Collection} {return <- PartyFavorz.createEmptyCollection()})
137 | 				)
    | 				^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected up to 5, got 7

error: mismatched types
   --> 179b6b1cb6755e31.PartyFavorz:132:19
    |
132 | 					providerPath: /private/PartyFavorzCollection,
    | 					              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Type`, got `PrivatePath`

error: mismatched types
   --> 179b6b1cb6755e31.PartyFavorz:134:23
    |
134 | 					publicLinkedType: Type<&PartyFavorz.Collection>(),
    | 					                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `fun(): @{NonFungibleToken.Collection}`, got `Type`

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.PartyFavorz:135:36
    |
135 | 					providerLinkedType: Type<auth (NonFungibleToken.Withdraw) &PartyFavorz.Collection>(),
    | 					                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: incorrect argument label
   --> 179b6b1cb6755e31.PartyFavorz:132:5
    |
132 | 					providerPath: /private/PartyFavorzCollection,
    | 					^^^^^^^^^^^^^ expected `publicCollection`, got `providerPath`

error: incorrect argument label
   --> 179b6b1cb6755e31.PartyFavorz:133:5
    |
133 | 					publicCollection: Type<&PartyFavorz.Collection>(),
    | 					^^^^^^^^^^^^^^^^^ expected `publicLinkedType`, got `publicCollection`

error: incorrect argument label
   --> 179b6b1cb6755e31.PartyFavorz:134:5
    |
134 | 					publicLinkedType: Type<&PartyFavorz.Collection>(),
    | 					^^^^^^^^^^^^^^^^^ expected `createEmptyCollectionFunction`, got `publicLinkedType`

error: resource `PartyFavorz.NFT` does not conform to resource interface `NonFungibleToken.NFT`
  --> 179b6b1cb6755e31.PartyFavorz:44:22
   |
44 | 	access(all) resource NFT: NonFungibleToken.NFT, ViewResolver.Resolver {
   | 	                     ^ `PartyFavorz.NFT` is missing definitions for members: `createEmptyCollection`

error: missing access modifier for function
   --> 179b6b1cb6755e31.PartyFavorz:241:2
    |
241 | 		access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    | 		^

error: resource `PartyFavorz.Collection` does not conform to resource interface `NonFungibleToken.Provider`
   --> 179b6b1cb6755e31.PartyFavorz:226:22
    |
226 | 	access(all) resource Collection: NonFungibleToken.Provider, NonFungibleToken.Receiver, NonFungibleToken.Collection, ViewResolver.ResolverCollection {
    | 	                     ^
   ... 
    |
241 | 		access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    | 		                                          -------- mismatch here

error: missing access modifier for function
   --> 179b6b1cb6755e31.PartyFavorz:323:2
    |
323 | 		access(FindForge.ForgeOwner) fun mint(platform: FindForge.MinterPlatform, data: AnyStruct, verifier: &FindForge.Verifier) : @{NonFungibleToken.NFT} {
    | 		^

error: missing access modifier for function
   --> 179b6b1cb6755e31.PartyFavorz:343:2
    |
343 | 		access(FindForge.ForgeOwner) fun addContractData(platform: FindForge.MinterPlatform, data: AnyStruct, verifier: &FindForge.Verifier) {
    | 		^


, FindLeaseMarketDirectOfferSoft: failed to deploy contract FindLeaseMarketDirectOfferSoft: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 64fef4416a448f4ca37334d2cd3549b1abd0f5291d976d29bc70bf82fa3d0165:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
 --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:5:7
  |
5 | import FindViews from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:8:7
  |
8 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot find declaration `FindMarket` in `179b6b1cb6755e31.FindMarket`
 --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:9:7
  |
9 | import FindMarket from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindLeaseMarket` in `179b6b1cb6755e31.FindLeaseMarket`
  --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:10:7
   |
10 | import FindLeaseMarket from 0x179b6b1cb6755e31
   |        ^^^^^^^^^^^^^^^ available exported declarations are:


error: ambiguous intersection type
  --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:18:38
   |
18 |         access(contract) var pointer: {FindLeaseMarket.LeasePointer}
   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:173:46
    |
173 |         init (_ tenantCapability: Capability<&{FindMarket.TenantPublic}>) {
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:171:59
    |
171 |         access(contract) let tenantCapability: Capability<&{FindMarket.TenantPublic}>
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:178:40
    |
178 |         access(self) fun getTenant() : &{FindMarket.TenantPublic} {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:395:58
    |
395 |         access(all) fun borrowSaleItem(_ name: String) : &{FindLeaseMarket.SaleItem} {
    |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:466:92
    |
466 |         init(receiver: Capability<&{FungibleToken.Receiver}>, tenantCapability: Capability<&{FindMarket.TenantPublic}>) {
    |                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:463:59
    |
463 |         access(contract) let tenantCapability: Capability<&{FindMarket.TenantPublic}>
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:472:40
    |
472 |         access(self) fun getTenant() : &{FindMarket.TenantPublic} {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:581:56
    |
581 |         access(all) fun borrowBidItem(_ name: String): &{FindLeaseMarket.Bid} {
    |                                                         ^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:595:82
    |
595 |     access(all) fun createEmptySaleItemCollection(_ tenantCapability: Capability<&{FindMarket.TenantPublic}>) : @SaleItemCollection {
    |                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:599:130
    |
599 |     access(all) fun createEmptyMarketBidCollection(receiver: Capability<&{FungibleToken.Receiver}>, tenantCapability: Capability<&{FindMarket.TenantPublic}>) : @MarketBidCollection {
    |                                                                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
  --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:64:19
   |
64 |             return Type<@FIND.Lease>()
   |                    ^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:399:42
    |
399 |             return (&self.items[name] as &{FindLeaseMarket.SaleItem}?)!
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:585:41
    |
585 |             return (&self.bids[name] as &{FindLeaseMarket.Bid}?)!
    |                                          ^^^^^^^^^^^^^^^^^^^^^


, FindAirdropper: failed to deploy contract FindAirdropper: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 50f71acb5b6faf08f1b9236b8ee9df2507908a047b016cd38c6dd9ea22ab1571:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindAirdropper:2:7
  |
2 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot find declaration `FindMarket` in `179b6b1cb6755e31.FindMarket`
 --> 179b6b1cb6755e31.FindAirdropper:5:7
  |
5 | import FindMarket from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
 --> 179b6b1cb6755e31.FindAirdropper:6:7
  |
6 | import FindViews from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindLostAndFoundWrapper` in `179b6b1cb6755e31.FindLostAndFoundWrapper`
 --> 179b6b1cb6755e31.FindAirdropper:7:7
  |
7 | import FindLostAndFoundWrapper from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^^^^^^^^^^^^^^ available exported declarations are:


error: cannot find type in this scope: `FungibleToken.Withdraw`
  --> 179b6b1cb6755e31.FindAirdropper:66:155
   |
66 |     access(all) fun forcedAirdrop(pointer: FindViews.AuthNFTPointer, receiver: Address, path: PublicPath, context: {String : String}, storagePayment: auth(FungibleToken.Withdraw) &{FungibleToken.Vault}, flowTokenRepayment: Capability<&{FungibleToken.Receiver}>, deepValidation: Bool) {
   |                                                                                                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `FungibleToken.Withdraw`
  --> 179b6b1cb6755e31.FindAirdropper:98:159
   |
98 |     access(all) fun subsidizedAirdrop(pointer: FindViews.AuthNFTPointer, receiver: Address, path: PublicPath, context: {String : String}, storagePayment: auth(FungibleToken.Withdraw) &{FungibleToken.Vault}, flowTokenRepayment: Capability<&{FungibleToken.Receiver}>, deepValidation: Bool) {
   |                                                                                                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope


, ExampleNFT: failed to deploy contract ExampleNFT: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 645c964f77570a8b8bfe53aed0b8e8d17e1829e0749ab9929fa773851e5739b4:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
  --> 179b6b1cb6755e31.ExampleNFT:15:7
   |
15 | import FindViews from 0x179b6b1cb6755e31
   |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindForge` in `179b6b1cb6755e31.FindForge`
  --> 179b6b1cb6755e31.ExampleNFT:16:7
   |
16 | import FindForge from 0x179b6b1cb6755e31
   |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `DapperUtilityCoin` in `01cf0e2f2f715450.DapperUtilityCoin`
  --> 179b6b1cb6755e31.ExampleNFT:17:7
   |
17 | import DapperUtilityCoin from 0x01cf0e2f2f715450
   |        ^^^^^^^^^^^^^^^^^ available exported declarations are:


error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.ExampleNFT:215:15
    |
215 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: ambiguous intersection type
   --> 179b6b1cb6755e31.ExampleNFT:405:41
    |
405 |     access(account) fun createForge() : @{FindForge.Forge} {
    |                                          ^^^^^^^^^^^^^^^^^

error: too many arguments
   --> 179b6b1cb6755e31.ExampleNFT:327:33
    |
327 |             let collectionData = MetadataViews.NFTCollectionData(
328 |                 storagePath: collectionRef.getDefaultStoragePath()!,
329 |                 publicPath: collectionRef.getDefaultPublicPath()!,
330 |                 providerPath: /private/cadenceExampleNFTCollection,
331 |                 publicCollection: Type<&ExampleNFT.Collection>(),
332 |                 publicLinkedType: Type<&ExampleNFT.Collection>(),
333 |                 providerLinkedType: Type<auth(NonFungibleToken.Withdraw) &ExampleNFT.Collection>(),
334 |                 createEmptyCollectionFunction: (fun(): @{NonFungibleToken.Collection} {
335 |                     return <-collectionRef.createEmptyCollection()
336 |                 })
337 |             )
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected up to 5, got 7

error: mismatched types
   --> 179b6b1cb6755e31.ExampleNFT:330:30
    |
330 |                 providerPath: /private/cadenceExampleNFTCollection,
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Type`, got `PrivatePath`

error: mismatched types
   --> 179b6b1cb6755e31.ExampleNFT:332:34
    |
332 |                 publicLinkedType: Type<&ExampleNFT.Collection>(),
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `fun(): @{NonFungibleToken.Collection}`, got `Type`

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.ExampleNFT:333:46
    |
333 |                 providerLinkedType: Type<auth(NonFungibleToken.Withdraw) &ExampleNFT.Collection>(),
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: incorrect argument label
   --> 179b6b1cb6755e31.ExampleNFT:330:16
    |
330 |                 providerPath: /private/cadenceExampleNFTCollection,
    |                 ^^^^^^^^^^^^^ expected `publicCollection`, got `providerPath`

error: incorrect argument label
   --> 179b6b1cb6755e31.ExampleNFT:331:16
    |
331 |                 publicCollection: Type<&ExampleNFT.Collection>(),
    |                 ^^^^^^^^^^^^^^^^^ expected `publicLinkedType`, got `publicCollection`

error: incorrect argument label
   --> 179b6b1cb6755e31.ExampleNFT:332:16
    |
332 |                 publicLinkedType: Type<&ExampleNFT.Collection>(),
    |                 ^^^^^^^^^^^^^^^^^ expected `createEmptyCollectionFunction`, got `publicLinkedType`

error: contract `ExampleNFT` does not conform to contract interface `ViewResolver`
  --> 179b6b1cb6755e31.ExampleNFT:21:21
   |
21 | access(all) contract ExampleNFT: ViewResolver {
   |                      ^ `ExampleNFT` is missing definitions for members: `getContractViews`, `resolveContractView`

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.ExampleNFT:114:30
    |
114 |                 views.concat([Type<FindViews.SoulBound>()])
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.ExampleNFT:155:17
    |
155 |             case Type<FindViews.SoulBound>() :
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: resource `ExampleNFT.NFT` does not conform to resource interface `NonFungibleToken.NFT`
  --> 179b6b1cb6755e31.ExampleNFT:51:25
   |
51 |     access(all) resource NFT: NonFungibleToken.NFT, ViewResolver.Resolver {
   |                          ^ `ExampleNFT.NFT` is missing definitions for members: `createEmptyCollection`

error: missing access modifier for function
   --> 179b6b1cb6755e31.ExampleNFT:215:8
    |
215 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |         ^

error: resource `ExampleNFT.Collection` does not conform to resource interface `NonFungibleToken.Collection`
   --> 179b6b1cb6755e31.ExampleNFT:172:25
    |
172 |     access(all) resource Collection: NonFungibleToken.Collection {
    |                          ^
   ... 
    |
215 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                                                   -------- mismatch here

error: missing access modifier for function
   --> 179b6b1cb6755e31.ExampleNFT:372:8
    |
372 |         access(FindForge.ForgeOwner) fun mint(platform: FindForge.MinterPlatform, data: AnyStruct, verifier: &FindForge.Verifier) : @{NonFungibleToken.NFT} {
    |         ^

error: missing access modifier for function
   --> 179b6b1cb6755e31.ExampleNFT:389:8
    |
389 |         access(FindForge.ForgeOwner) fun addContractData(platform: FindForge.MinterPlatform, data: AnyStruct, verifier: &FindForge.Verifier) {
    |         ^


, Bl0x: failed to deploy contract Bl0x: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> a16d17cb026af670bf868c01f6209d41fd634148dd98d2cf010a105a9a2518d1:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.Bl0x:293:15
    |
293 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: contract `Bl0x` does not conform to contract interface `ViewResolver`
 --> 179b6b1cb6755e31.Bl0x:5:21
  |
5 | access(all) contract Bl0x: ViewResolver {
  |                      ^ `Bl0x` is missing definitions for members: `getContractViews`, `resolveContractView`

error: too many arguments
   --> 179b6b1cb6755e31.Bl0x:187:23
    |
187 |                 return MetadataViews.NFTCollectionData(storagePath: Bl0x.CollectionStoragePath,
188 |                 publicPath: Bl0x.CollectionPublicPath,
189 |                 providerPath: /private/bl0xNFTCollection,
190 |                 publicCollection: Type<&Collection>(),
191 |                 publicLinkedType: Type<&Collection>(),
192 |                 providerLinkedType: Type<auth(NonFungibleToken.Withdraw) &Collection>(),
193 |                 createEmptyCollectionFunction: (fun(): @{NonFungibleToken.Collection} {return <- Bl0x.createEmptyCollection()}))
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected up to 5, got 7

error: mismatched types
   --> 179b6b1cb6755e31.Bl0x:189:30
    |
189 |                 providerPath: /private/bl0xNFTCollection,
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Type`, got `PrivatePath`

error: mismatched types
   --> 179b6b1cb6755e31.Bl0x:191:34
    |
191 |                 publicLinkedType: Type<&Collection>(),
    |                                   ^^^^^^^^^^^^^^^^^^^ expected `fun(): @{NonFungibleToken.Collection}`, got `Type`

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.Bl0x:192:46
    |
192 |                 providerLinkedType: Type<auth(NonFungibleToken.Withdraw) &Collection>(),
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: incorrect argument label
   --> 179b6b1cb6755e31.Bl0x:189:16
    |
189 |                 providerPath: /private/bl0xNFTCollection,
    |                 ^^^^^^^^^^^^^ expected `publicCollection`, got `providerPath`

error: incorrect argument label
   --> 179b6b1cb6755e31.Bl0x:190:16
    |
190 |                 publicCollection: Type<&Collection>(),
    |                 ^^^^^^^^^^^^^^^^^ expected `publicLinkedType`, got `publicCollection`

error: incorrect argument label
   --> 179b6b1cb6755e31.Bl0x:191:16
    |
191 |                 publicLinkedType: Type<&Collection>(),
    |                 ^^^^^^^^^^^^^^^^^ expected `createEmptyCollectionFunction`, got `publicLinkedType`

error: resource `Bl0x.NFT` does not conform to resource interface `NonFungibleToken.NFT`
  --> 179b6b1cb6755e31.Bl0x:70:25
   |
70 |     access(all) resource NFT: NonFungibleToken.NFT, ViewResolver.Resolver {
   |                          ^ `Bl0x.NFT` is missing definitions for members: `createEmptyCollection`

error: missing access modifier for function
   --> 179b6b1cb6755e31.Bl0x:293:8
    |
293 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |         ^

error: resource `Bl0x.Collection` does not conform to resource interface `NonFungibleToken.Provider`
   --> 179b6b1cb6755e31.Bl0x:278:25
    |
278 |     access(all) resource Collection: NonFungibleToken.Provider, NonFungibleToken.Receiver, NonFungibleToken.Collection, ViewResolver.ResolverCollection {
    |                          ^
   ... 
    |
293 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                                                   -------- mismatch here


,

goroutine 1 [running]:
github.com/findonflow/find.TestMain(0x14000094688?)
	/Users/bjartek/dev/find/setup_test.go:35 +0xe0
main.main()
	_testmain.go:103 +0x1ac
FAIL .

=== Failed
=== FAIL: .  (0.00s)
panic: could not deploy contracts: errors : []:  Admin: failed to deploy contract Admin: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> be7159078c5f85f273483acfa6498bad63a0dc4aac00ad7eec258a82c0227300:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `Profile` in `179b6b1cb6755e31.Profile`
 --> 179b6b1cb6755e31.Admin:5:7
  |
5 | import Profile from 0x179b6b1cb6755e31
  |        ^^^^^^^ available exported declarations are:


error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.Admin:6:7
  |
6 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot find declaration `FindForge` in `179b6b1cb6755e31.FindForge`
  --> 179b6b1cb6755e31.Admin:10:7
   |
10 | import FindForge from 0x179b6b1cb6755e31
   |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindForgeOrder` in `179b6b1cb6755e31.FindForgeOrder`
  --> 179b6b1cb6755e31.Admin:11:7
   |
11 | import FindForgeOrder from 0x179b6b1cb6755e31
   |        ^^^^^^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindPack` in `179b6b1cb6755e31.FindPack`
  --> 179b6b1cb6755e31.Admin:12:7
   |
12 | import FindPack from 0x179b6b1cb6755e31
   |        ^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
  --> 179b6b1cb6755e31.Admin:15:7
   |
15 | import FindViews from 0x179b6b1cb6755e31
   |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `NameVoucher` in `179b6b1cb6755e31.NameVoucher`
  --> 179b6b1cb6755e31.Admin:16:7
   |
16 | import NameVoucher from 0x179b6b1cb6755e31
   |        ^^^^^^^^^^^ available exported declarations are:


error: ambiguous intersection type
   --> 179b6b1cb6755e31.Admin:157:70
    |
157 |         access(Owner) fun register(name: String, profile: Capability<&{Profile.Public}>, leases: Capability<&{FIND.LeaseCollectionPublic}>){
    |                                                                       ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.Admin:157:109
    |
157 |         access(Owner) fun register(name: String, profile: Capability<&{Profile.Public}>, leases: Capability<&{FIND.LeaseCollectionPublic}>){
    |                                                                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.Admin:180:57
    |
180 |             let ref = getAccount(user).capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!.borrow() ?? panic("Cannot borrow reference to lease collection of user : ".concat(name))
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.Admin:180:22
    |
180 |             let ref = getAccount(user).capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!.borrow() ?? panic("Cannot borrow reference to lease collection of user : ".concat(name))
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.Admin:180:22
    |
180 |             let ref = getAccount(user).capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!.borrow() ?? panic("Cannot borrow reference to lease collection of user : ".concat(name))
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.Admin:271:68
    |
271 |             var cap = Admin.account.capabilities.storage.issue<auth(NonFungibleToken.Withdraw) &{ViewResolver.ResolverCollection, NonFungibleToken.Provider, NonFungibleToken.Collection}>(storagePath)
    |                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.Admin:290:64
    |
290 |             FindForge.adminMint(lease: packTypeName, forgeType: Type<@FindPack.Forge>() , data: mintPackData, receiver: receiver)
    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.Admin:305:21
    |
305 |             let cap= Admin.account.storage.borrow<auth(FindPack.Owner) &FindPack.Collection>(from: FindPack.DLQCollectionStoragePath)!
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.Admin:361:27
    |
361 |             let receiver = Admin.account.storage.borrow<&NameVoucher.Collection>(from: NameVoucher.CollectionStoragePath)!
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


, FindMarketAuctionSoft: failed to deploy contract FindMarketAuctionSoft: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 94953428d8ca8bae5f9599106c1bcc4f14457b425d4f743de833d85c14f83355:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
 --> 179b6b1cb6755e31.FindMarketAuctionSoft:4:7
  |
4 | import FindViews from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindMarketAuctionSoft:6:7
  |
6 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot find declaration `FindMarket` in `179b6b1cb6755e31.FindMarket`
 --> 179b6b1cb6755e31.FindMarketAuctionSoft:7:7
  |
7 | import FindMarket from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^ available exported declarations are:


error: cannot find declaration `Profile` in `179b6b1cb6755e31.Profile`
 --> 179b6b1cb6755e31.FindMarketAuctionSoft:8:7
  |
8 | import Profile from 0x179b6b1cb6755e31
  |        ^^^^^^^ available exported declarations are:


error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionSoft:263:46
    |
263 |         init (_ tenantCapability: Capability<&{FindMarket.TenantPublic}>) {
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionSoft:261:59
    |
261 |         access(contract) let tenantCapability: Capability<&{FindMarket.TenantPublic}>
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionSoft:268:40
    |
268 |         access(self) fun getTenant() : &{FindMarket.TenantPublic} {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionSoft:641:56
    |
641 |         access(all) fun borrowSaleItem(_ id: UInt64) : &{FindMarket.SaleItem} {
    |                                                         ^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionSoft:705:92
    |
705 |         init(receiver: Capability<&{FungibleToken.Receiver}>, tenantCapability: Capability<&{FindMarket.TenantPublic}>) {
    |                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionSoft:702:59
    |
702 |         access(contract) let tenantCapability: Capability<&{FindMarket.TenantPublic}>
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionSoft:711:40
    |
711 |         access(self) fun getTenant() : &{FindMarket.TenantPublic} {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionSoft:808:54
    |
808 |         access(all) fun borrowBidItem(_ id: UInt64): &{FindMarket.Bid} {
    |                                                       ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionSoft:825:82
    |
825 |     access(all) fun createEmptySaleItemCollection(_ tenantCapability: Capability<&{FindMarket.TenantPublic}>) : @SaleItemCollection {
    |                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionSoft:829:130
    |
829 |     access(all) fun createEmptyMarketBidCollection(receiver: Capability<&{FungibleToken.Receiver}>, tenantCapability: Capability<&{FindMarket.TenantPublic}>) : @MarketBidCollection {
    |                                                                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindMarketAuctionSoft:509:21
    |
509 |             if valut.balance < saleItem.auctionReservePrice {
    |                      ^^^^^^^^^^ unknown member

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindMarketAuctionSoft:510:114
    |
510 |                 panic("cannot fulfill auction reserve price was not met, cancel it without a vault ".concat(valut.balance.toString()).concat(" < ").concat(saleItem.auctionReservePrice.toString()))
    |                                                                                                                   ^^^^^^^^^^ unknown member

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionSoft:645:40
    |
645 |             return (&self.items[id] as &{FindMarket.SaleItem}?)!
    |                                         ^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionSoft:812:39
    |
812 |             return (&self.bids[id] as &{FindMarket.Bid}?)!
    |                                        ^^^^^^^^^^^^^^^^


, FUSD: failed to deploy contract FUSD: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 160675f3badc8f738179274636d4c199d7465d352b0cb033e1a709cd842cfeb2:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> f8d6e0586b0a20c7.FUSD:179:15
    |
179 |         access(FungibleToken.Withdraw) fun withdraw(amount: UFix64): @FUSD.Vault {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> f8d6e0586b0a20c7.FUSD:203:15
    |
203 |         access(FungibleToken.Withdraw) fun transfer(amount: UFix64, receiver: Capability<&{FungibleToken.Receiver}>) {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: contract `FUSD` does not conform to contract interface `ViewResolver`
 --> f8d6e0586b0a20c7.FUSD:6:21
  |
6 | access(all) contract FUSD: ViewResolver {
  |                      ^ `FUSD` is missing definitions for members: `getContractViews`, `resolveContractView`

error: too many arguments
   --> f8d6e0586b0a20c7.FUSD:124:23
    |
124 |                 return FungibleTokenMetadataViews.FTVaultData(
125 |                     storagePath: self.storagePath,
126 |                     receiverPath: self.receiverPath,
127 |                     metadataPath: self.publicPath,
128 |                     providerPath: /private/fusdVault,
129 |                     receiverLinkedType: Type<&{FungibleToken.Receiver}>(),
130 |                     metadataLinkedType: Type<&FUSD.Vault>(),
131 |                     providerLinkedType: Type<&FUSD.Vault>(),
132 |                     createEmptyVaultFunction: (fun(): @{FungibleToken.Vault} {
133 |                         return <-vaultRef.createEmptyVault()
134 |                     })
135 |                 )
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected up to 6, got 8

error: mismatched types
   --> f8d6e0586b0a20c7.FUSD:128:34
    |
128 |                     providerPath: /private/fusdVault,
    |                                   ^^^^^^^^^^^^^^^^^^ expected `Type`, got `PrivatePath`

error: mismatched types
   --> f8d6e0586b0a20c7.FUSD:130:40
    |
130 |                     metadataLinkedType: Type<&FUSD.Vault>(),
    |                                         ^^^^^^^^^^^^^^^^^^^ expected `fun(): @{FungibleToken.Vault}`, got `Type`

error: incorrect argument label
   --> f8d6e0586b0a20c7.FUSD:128:20
    |
128 |                     providerPath: /private/fusdVault,
    |                     ^^^^^^^^^^^^^ expected `receiverLinkedType`, got `providerPath`

error: incorrect argument label
   --> f8d6e0586b0a20c7.FUSD:129:20
    |
129 |                     receiverLinkedType: Type<&{FungibleToken.Receiver}>(),
    |                     ^^^^^^^^^^^^^^^^^^^ expected `metadataLinkedType`, got `receiverLinkedType`

error: incorrect argument label
   --> f8d6e0586b0a20c7.FUSD:130:20
    |
130 |                     metadataLinkedType: Type<&FUSD.Vault>(),
    |                     ^^^^^^^^^^^^^^^^^^^ expected `createEmptyVaultFunction`, got `metadataLinkedType`

error: missing access modifier for function
   --> f8d6e0586b0a20c7.FUSD:179:8
    |
179 |         access(FungibleToken.Withdraw) fun withdraw(amount: UFix64): @FUSD.Vault {
    |         ^

error: missing access modifier for function
   --> f8d6e0586b0a20c7.FUSD:203:8
    |
203 |         access(FungibleToken.Withdraw) fun transfer(amount: UFix64, receiver: Capability<&{FungibleToken.Receiver}>) {
    |         ^

error: resource `FUSD.Vault` does not conform to resource interface `FungibleToken.Vault`
  --> f8d6e0586b0a20c7.FUSD:63:25
   |
63 |     access(all) resource Vault: FungibleToken.Vault {
   |                          ^ `FUSD.Vault` is missing definitions for members: `burnCallback`
   ... 
    |
179 |         access(FungibleToken.Withdraw) fun withdraw(amount: UFix64): @FUSD.Vault {
    |                                                -------- mismatch here

error: resource `FUSD.Vault` does not conform to resource interface `FungibleToken.Vault`
  --> f8d6e0586b0a20c7.FUSD:63:25
   |
63 |     access(all) resource Vault: FungibleToken.Vault {
   |                          ^ `FUSD.Vault` is missing definitions for members: `isAvailableToWithdraw`
   ... 
    |
179 |         access(FungibleToken.Withdraw) fun withdraw(amount: UFix64): @FUSD.Vault {
    |                                                -------- mismatch here

error: resource `FUSD.Vault` does not conform to resource interface `FungibleToken.Vault`
  --> f8d6e0586b0a20c7.FUSD:63:25
   |
63 |     access(all) resource Vault: FungibleToken.Vault {
   |                          ^ `FUSD.Vault` is missing definitions for members: `burnCallback`


, LostAndFoundHelper: failed to deploy contract LostAndFoundHelper: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> fbf6e8f2067ed992b6fae1edfef2842310e1d1720d642366ca51130280f67e09:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `LostAndFound` in `f8d6e0586b0a20c7.LostAndFound`
 --> f8d6e0586b0a20c7.LostAndFoundHelper:1:7
  |
1 | import LostAndFound from 0xf8d6e0586b0a20c7
  |        ^^^^^^^^^^^^ available exported declarations are:



, FindForgeOrder: failed to deploy contract FindForgeOrder: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 8553f22e29718d26dd9649a0322afb23627e1f990885886bc03345ceeee5e026:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindForgeOrder:5:7
  |
5 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:



, FindMarketAuctionEscrow: failed to deploy contract FindMarketAuctionEscrow: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 0b46781a0ff15d56ab852f85b49ce073e0f601431a5a7f0377087b36a0e19ad1:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
 --> 179b6b1cb6755e31.FindMarketAuctionEscrow:4:7
  |
4 | import FindViews from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindMarketAuctionEscrow:6:7
  |
6 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot find declaration `FindMarket` in `179b6b1cb6755e31.FindMarket`
 --> 179b6b1cb6755e31.FindMarketAuctionEscrow:7:7
  |
7 | import FindMarket from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^ available exported declarations are:


error: cannot find declaration `Profile` in `179b6b1cb6755e31.Profile`
 --> 179b6b1cb6755e31.FindMarketAuctionEscrow:8:7
  |
8 | import Profile from 0x179b6b1cb6755e31
  |        ^^^^^^^ available exported declarations are:


error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:270:46
    |
270 |         init (_ tenantCapability: Capability<&{FindMarket.TenantPublic}>) {
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:268:59
    |
268 |         access(contract) let tenantCapability: Capability<&{FindMarket.TenantPublic}>
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:276:40
    |
276 |         access(self) fun getTenant() : &{FindMarket.TenantPublic} {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:697:56
    |
697 |         access(all) fun borrowSaleItem(_ id: UInt64) : &{FindMarket.SaleItem} {
    |                                                         ^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:758:92
    |
758 |         init(receiver: Capability<&{FungibleToken.Receiver}>, tenantCapability: Capability<&{FindMarket.TenantPublic}>) {
    |                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:755:59
    |
755 |         access(contract) let tenantCapability: Capability<&{FindMarket.TenantPublic}>
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:764:40
    |
764 |         access(self) fun getTenant() : &{FindMarket.TenantPublic} {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:874:54
    |
874 |         access(all) fun borrowBidItem(_ id: UInt64): &{FindMarket.Bid} {
    |                                                       ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:888:82
    |
888 |     access(all) fun createEmptySaleItemCollection(_ tenantCapability: Capability<&{FindMarket.TenantPublic}>) : @SaleItemCollection {
    |                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:892:130
    |
892 |     access(all) fun createEmptyMarketBidCollection(receiver: Capability<&{FungibleToken.Receiver}>, tenantCapability: Capability<&{FindMarket.TenantPublic}>) : @MarketBidCollection {
    |                                                                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:731:30
    |
731 |             return self.valut.balance
    |                               ^^^^^^^^^^ unknown member

error: value of type `{NonFungibleToken.NFT}` has no member `getID`
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:773:24
    |
773 |             let id= nft.getID()
    |                         ^^^^^ unknown member

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:775:46
    |
775 |             let vaultRef = &bid.vault as auth(FungibleToken.Withdraw) &{FungibleToken.Vault}
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot access `withdraw`: function requires `Withdraw` authorization, but reference only has `not specified` authorization
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:787:26
    |
787 |             let vault  <- vaultRef.withdraw(amount: vaultRef.getBalance())
    |                           ^^^^^^^^^^^^^^^^^

error: value of type `auth(not specified) &{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:787:61
    |
787 |             let vault  <- vaultRef.withdraw(amount: vaultRef.getBalance())
    |                                                              ^^^^^^^^^^ unknown member

error: value of type `&{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:845:37
    |
845 |             let oldBalance=bid.valut.balance
    |                                      ^^^^^^^^^^ unknown member

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:859:46
    |
859 |             let vaultRef = &bid.vault as auth(FungibleToken.Withdraw) &{FungibleToken.Vault}
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot access `withdraw`: function requires `Withdraw` authorization, but reference only has `not specified` authorization
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:863:53
    |
863 |             self.receiver.borrow()!.deposit(from: <- vaultRef.withdraw(amount: vaultRef.getBalance()))
    |                                                      ^^^^^^^^^^^^^^^^^

error: value of type `auth(not specified) &{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:863:88
    |
863 |             self.receiver.borrow()!.deposit(from: <- vaultRef.withdraw(amount: vaultRef.getBalance()))
    |                                                                                         ^^^^^^^^^^ unknown member

error: value of type `&{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindMarketAuctionEscrow:883:29
    |
883 |             return bid.valut.balance
    |                              ^^^^^^^^^^ unknown member


, GeneratedExperiences: failed to deploy contract GeneratedExperiences: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> a80e00dae390d22f4e2862a058e19e490bda6198f1f2da3c8aed2c6628910eeb:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindForge` in `179b6b1cb6755e31.FindForge`
 --> e03daebed8ca0615.GeneratedExperiences:5:7
  |
5 | import FindForge from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindPack` in `179b6b1cb6755e31.FindPack`
 --> e03daebed8ca0615.GeneratedExperiences:6:7
  |
6 | import FindPack from 0x179b6b1cb6755e31
  |        ^^^^^^^^ available exported declarations are:


error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> e03daebed8ca0615.GeneratedExperiences:227:15
    |
227 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: too many arguments
   --> e03daebed8ca0615.GeneratedExperiences:303:15
    |
303 |         return MetadataViews.NFTCollectionData(
304 |             storagePath: GeneratedExperiences.CollectionStoragePath,
305 |             publicPath: GeneratedExperiences.CollectionPublicPath,
306 |             providerPath: GeneratedExperiences.CollectionPrivatePath,
307 |             publicCollection: Type<&GeneratedExperiences.Collection>(),
308 |             publicLinkedType: Type<&GeneratedExperiences.Collection>(),
309 |             providerLinkedType: Type<auth(NonFungibleToken.Withdraw) &GeneratedExperiences.Collection>(),
310 |             createEmptyCollectionFunction: (fun (): @{NonFungibleToken.Collection} {
311 |                 return <-GeneratedExperiences.createEmptyCollection()
312 |             })
313 |         )
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected up to 5, got 7

error: mismatched types
   --> e03daebed8ca0615.GeneratedExperiences:306:26
    |
306 |             providerPath: GeneratedExperiences.CollectionPrivatePath,
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Type`, got `PrivatePath`

error: mismatched types
   --> e03daebed8ca0615.GeneratedExperiences:308:30
    |
308 |             publicLinkedType: Type<&GeneratedExperiences.Collection>(),
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `fun(): @{NonFungibleToken.Collection}`, got `Type`

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> e03daebed8ca0615.GeneratedExperiences:309:42
    |
309 |             providerLinkedType: Type<auth(NonFungibleToken.Withdraw) &GeneratedExperiences.Collection>(),
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: incorrect argument label
   --> e03daebed8ca0615.GeneratedExperiences:306:12
    |
306 |             providerPath: GeneratedExperiences.CollectionPrivatePath,
    |             ^^^^^^^^^^^^^ expected `publicCollection`, got `providerPath`

error: incorrect argument label
   --> e03daebed8ca0615.GeneratedExperiences:307:12
    |
307 |             publicCollection: Type<&GeneratedExperiences.Collection>(),
    |             ^^^^^^^^^^^^^^^^^ expected `publicLinkedType`, got `publicCollection`

error: incorrect argument label
   --> e03daebed8ca0615.GeneratedExperiences:308:12
    |
308 |             publicLinkedType: Type<&GeneratedExperiences.Collection>(),
    |             ^^^^^^^^^^^^^^^^^ expected `createEmptyCollectionFunction`, got `publicLinkedType`

error: contract `GeneratedExperiences` does not conform to contract interface `ViewResolver`
 --> e03daebed8ca0615.GeneratedExperiences:8:21
  |
8 | access(all) contract GeneratedExperiences: ViewResolver {
  |                      ^ `GeneratedExperiences` is missing definitions for members: `getContractViews`, `resolveContractView`

error: cannot infer type parameter: `T`
   --> e03daebed8ca0615.GeneratedExperiences:118:12
    |
118 |             Type<FindPack.PackRevealData>()
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> e03daebed8ca0615.GeneratedExperiences:128:17
    |
128 |             case Type<FindPack.PackRevealData>():
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: resource `GeneratedExperiences.NFT` does not conform to resource interface `NonFungibleToken.NFT`
  --> e03daebed8ca0615.GeneratedExperiences:90:25
   |
90 |     access(all) resource NFT: NonFungibleToken.NFT, ViewResolver.Resolver {
   |                          ^ `GeneratedExperiences.NFT` is missing definitions for members: `createEmptyCollection`

error: missing access modifier for function
   --> e03daebed8ca0615.GeneratedExperiences:227:8
    |
227 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |         ^

error: resource `GeneratedExperiences.Collection` does not conform to resource interface `NonFungibleToken.Collection`
   --> e03daebed8ca0615.GeneratedExperiences:190:25
    |
190 |     access(all) resource Collection: NonFungibleToken.Collection {
    |                          ^
   ... 
    |
227 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                                                   -------- mismatch here

error: missing access modifier for function
   --> e03daebed8ca0615.GeneratedExperiences:340:8
    |
340 |         access(FindForge.ForgeOwner) fun mint(platform: FindForge.MinterPlatform, data: AnyStruct, verifier: &FindForge.Verifier) : @{NonFungibleToken.NFT} {
    |         ^

error: missing access modifier for function
   --> e03daebed8ca0615.GeneratedExperiences:353:8
    |
353 |         access(FindForge.ForgeOwner) fun addContractData(platform: FindForge.MinterPlatform, data: AnyStruct, verifier: &FindForge.Verifier) {
    |         ^


, FiatToken: failed to deploy contract FiatToken: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> e40192241f65468d1838f1d10c5ae151a256e2beaad66007c2ada158b2a3f16e:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find type in this scope: `FungibleToken.Withdraw`
  --> f8d6e0586b0a20c7.FiatToken:97:15
   |
97 |         access(FungibleToken.Withdraw) fun withdraw(amount: UFix64): @{FungibleToken.Vault} {
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: missing access modifier for function
  --> f8d6e0586b0a20c7.FiatToken:97:8
   |
97 |         access(FungibleToken.Withdraw) fun withdraw(amount: UFix64): @{FungibleToken.Vault} {
   |         ^

error: resource `FiatToken.Vault` does not conform to resource interface `FungibleToken.Vault`
  --> f8d6e0586b0a20c7.FiatToken:60:25
   |
60 |     access(all) resource Vault: FungibleToken.Vault, ResourceId, FungibleToken.Provider, FungibleToken.Receiver{
   |                          ^ `FiatToken.Vault` is missing definitions for members: `burnCallback`
  ... 
   |
97 |         access(FungibleToken.Withdraw) fun withdraw(amount: UFix64): @{FungibleToken.Vault} {
   |                                                -------- mismatch here

error: resource `FiatToken.Vault` does not conform to resource interface `FungibleToken.Vault`
  --> f8d6e0586b0a20c7.FiatToken:60:25
   |
60 |     access(all) resource Vault: FungibleToken.Vault, ResourceId, FungibleToken.Provider, FungibleToken.Receiver{
   |                          ^ `FiatToken.Vault` is missing definitions for members: `isAvailableToWithdraw`
  ... 
   |
97 |         access(FungibleToken.Withdraw) fun withdraw(amount: UFix64): @{FungibleToken.Vault} {
   |                                                -------- mismatch here

error: resource `FiatToken.Vault` does not conform to resource interface `FungibleToken.Vault`
  --> f8d6e0586b0a20c7.FiatToken:60:25
   |
60 |     access(all) resource Vault: FungibleToken.Vault, ResourceId, FungibleToken.Provider, FungibleToken.Receiver{
   |                          ^ `FiatToken.Vault` is missing definitions for members: `getViews`, `resolveView`

error: resource `FiatToken.Vault` does not conform to resource interface `FungibleToken.Vault`
  --> f8d6e0586b0a20c7.FiatToken:60:25
   |
60 |     access(all) resource Vault: FungibleToken.Vault, ResourceId, FungibleToken.Provider, FungibleToken.Receiver{
   |                          ^ `FiatToken.Vault` is missing definitions for members: `burnCallback`


, FLOATVerifiers: failed to deploy contract FLOATVerifiers: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 90b6277b37b8bad3b03043a0912ef0293fa1cfc67071ec43eca2de9989658ccb:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FLOAT` in `f8d6e0586b0a20c7.FLOAT`
  --> f8d6e0586b0a20c7.FLOATVerifiers:23:7
   |
23 | import FLOAT from 0xf8d6e0586b0a20c7
   |        ^^^^^ available exported declarations are:



, Dandy: failed to deploy contract Dandy: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 6cce4895ba61591201182679ad917cd32cf7e47ffef0aac8aa4ba32ea7796c09:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
 --> 179b6b1cb6755e31.Dandy:4:7
  |
4 | import FindViews from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindForge` in `179b6b1cb6755e31.FindForge`
 --> 179b6b1cb6755e31.Dandy:5:7
  |
5 | import FindForge from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.Dandy:228:15
    |
228 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: ambiguous intersection type
   --> 179b6b1cb6755e31.Dandy:359:41
    |
359 |     access(account) fun createForge() : @{FindForge.Forge} {
    |                                          ^^^^^^^^^^^^^^^^^

error: contract `Dandy` does not conform to contract interface `ViewResolver`
 --> 179b6b1cb6755e31.Dandy:8:21
  |
8 | access(all) contract Dandy :ViewResolver{
  |                      ^ `Dandy` is missing definitions for members: `getContractViews`, `resolveContractView`

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.Dandy:106:12
    |
106 |             Type<FindViews.Nounce>(),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.Dandy:171:23
    |
171 |             if type == Type<FindViews.Nounce>() {
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^

error: too many arguments
   --> 179b6b1cb6755e31.Dandy:185:23
    |
185 |                 return MetadataViews.NFTCollectionData(
186 |                     storagePath: Dandy.CollectionStoragePath,
187 |                     publicPath: Dandy.CollectionPublicPath,
188 |                     providerPath: Dandy.CollectionPrivatePath,
189 |                     publicCollection: Type<&Dandy.Collection>(),
190 |                     publicLinkedType: Type<&Dandy.Collection>(),
191 |                     providerLinkedType: Type<auth (NonFungibleToken.Withdraw) &Dandy.Collection>(),
192 |                     createEmptyCollectionFunction: fun(): @{NonFungibleToken.Collection} {
193 |                         return <- Dandy.createEmptyCollection()
194 |                     }
195 |                 )
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected up to 5, got 7

error: mismatched types
   --> 179b6b1cb6755e31.Dandy:188:34
    |
188 |                     providerPath: Dandy.CollectionPrivatePath,
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Type`, got `PrivatePath`

error: mismatched types
   --> 179b6b1cb6755e31.Dandy:190:38
    |
190 |                     publicLinkedType: Type<&Dandy.Collection>(),
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `fun(): @{NonFungibleToken.Collection}`, got `Type`

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.Dandy:191:51
    |
191 |                     providerLinkedType: Type<auth (NonFungibleToken.Withdraw) &Dandy.Collection>(),
    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: incorrect argument label
   --> 179b6b1cb6755e31.Dandy:188:20
    |
188 |                     providerPath: Dandy.CollectionPrivatePath,
    |                     ^^^^^^^^^^^^^ expected `publicCollection`, got `providerPath`

error: incorrect argument label
   --> 179b6b1cb6755e31.Dandy:189:20
    |
189 |                     publicCollection: Type<&Dandy.Collection>(),
    |                     ^^^^^^^^^^^^^^^^^ expected `publicLinkedType`, got `publicCollection`

error: incorrect argument label
   --> 179b6b1cb6755e31.Dandy:190:20
    |
190 |                     publicLinkedType: Type<&Dandy.Collection>(),
    |                     ^^^^^^^^^^^^^^^^^ expected `createEmptyCollectionFunction`, got `publicLinkedType`

error: resource `Dandy.NFT` does not conform to resource interface `NonFungibleToken.NFT`
  --> 179b6b1cb6755e31.Dandy:53:25
   |
53 |     access(all) resource NFT: NonFungibleToken.NFT, ViewResolver.Resolver {
   |                          ^ `Dandy.NFT` is missing definitions for members: `createEmptyCollection`

error: missing access modifier for function
   --> 179b6b1cb6755e31.Dandy:228:8
    |
228 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |         ^

error: resource `Dandy.Collection` does not conform to resource interface `NonFungibleToken.Provider`
   --> 179b6b1cb6755e31.Dandy:213:25
    |
213 |     access(all) resource Collection: NonFungibleToken.Provider, NonFungibleToken.Receiver, NonFungibleToken.Collection, ViewResolver.ResolverCollection, CollectionPublic {
    |                          ^
   ... 
    |
228 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                                                   -------- mismatch here

error: missing access modifier for function
   --> 179b6b1cb6755e31.Dandy:347:8
    |
347 |         access(FindForge.ForgeOwner) fun mint(platform: FindForge.MinterPlatform, data: AnyStruct, verifier: &FindForge.Verifier) : @{NonFungibleToken.NFT} {
    |         ^

error: missing access modifier for function
   --> 179b6b1cb6755e31.Dandy:352:8
    |
352 |         access(FindForge.ForgeOwner) fun addContractData(platform: FindForge.MinterPlatform, data: AnyStruct, verifier: &FindForge.Verifier) {
    |         ^


, Bl0xPack: failed to deploy contract Bl0xPack: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 0e1e52dd6ed582e91c26dc129a65d59cdb25f3adb1a150545392fbdb668c6dd7:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FLOAT` in `f8d6e0586b0a20c7.FLOAT`
 --> 179b6b1cb6755e31.Bl0xPack:7:7
  |
7 | import FLOAT from 0xf8d6e0586b0a20c7
  |        ^^^^^ available exported declarations are:


error: cannot find declaration `Bl0x` in `179b6b1cb6755e31.Bl0x`
 --> 179b6b1cb6755e31.Bl0xPack:8:7
  |
8 | import Bl0x from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot find type in this scope: `NonFungibleToken.Withdraw`
  --> 179b6b1cb6755e31.Bl0xPack:73:235
   |
73 |         init(name: String, description: String, thumbnailUrl: String?,thumbnailHash: String?, wallet: Capability<&{FungibleToken.Receiver}>, price: UFix64, buyTime:UFix64, openTime:UFix64, walletType:Type, providerCap: Capability<auth(NonFungibleToken.Withdraw) &{NonFungibleToken.Provider, ViewResolver.ResolverCollection}>, requiresReservation:Bool, royaltyCut: UFix64, royaltyWallet: Capability<&{FungibleToken.Receiver}>, floatEventId:UInt64?, whiteListTime: UFix64?, storageRequirement: UInt... 
   |                                                                                                                                                                                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
  --> 179b6b1cb6755e31.Bl0xPack:66:58
   |
66 |         access(contract) let providerCap: Capability<auth(NonFungibleToken.Withdraw) &{NonFungibleToken.Provider, ViewResolver.ResolverCollection}> 
   |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.Bl0xPack:448:19
    |
448 |             access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.Bl0xPack:580:77
    |
580 |             let openedPacksCollection = Bl0xPack.account.storage.borrow<auth(NonFungibleToken.Withdraw) &Bl0xPack.Collection>(from: Bl0xPack.OpenedCollectionStoragePath)!
    |                                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot access `withdraw`: function requires `not specified` authorization
   --> 179b6b1cb6755e31.Bl0xPack:581:24
    |
581 |             let pack <- openedPacksCollection.withdraw(withdrawID: packId) as! @Bl0xPack.NFT
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.Bl0xPack:630:80
    |
630 |                 let metadata=source.borrowViewResolver(id: reward)!.resolveView(Type<Bl0x.Metadata>())! as! Bl0x.Metadata
    |                                                                                 ^^^^^^^^^^^^^^^^^^^^^

error: cannot access `withdraw`: function requires `Withdraw | Owner` authorization, but reference only has `not specified` authorization
   --> 179b6b1cb6755e31.Bl0xPack:632:29
    |
632 |                 let token <- source.withdraw(withdrawID: reward)
    |                              ^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.Bl0xPack:693:24
    |
693 |             let float = getAccount(user).capabilities.borrow<&FLOAT.Collection>(FLOAT.FLOATCollectionPublicPath)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: contract `Bl0xPack` does not conform to contract interface `ViewResolver`
  --> 179b6b1cb6755e31.Bl0xPack:11:21
   |
11 | access(all) contract Bl0xPack: ViewResolver {
   |                      ^ `Bl0xPack` is missing definitions for members: `getContractViews`, `resolveContractView`

error: too many arguments
   --> 179b6b1cb6755e31.Bl0xPack:218:23
    |
218 |                 return MetadataViews.NFTCollectionData(
219 |                     storagePath: Bl0xPack.CollectionStoragePath,
220 |                     publicPath: Bl0xPack.CollectionPublicPath,
221 |                     providerPath: /private/bl0xPackCollection,
222 |                     publicCollection: Type<&Bl0xPack.Collection>(),
223 |                     publicLinkedType: Type<&Bl0xPack.Collection>(),
224 |                     providerLinkedType: Type<auth(NonFungibleToken.Withdraw) &Bl0xPack.Collection>(),
225 |                     createEmptyCollectionFunction: (fun(): @{NonFungibleToken.Collection} {return <- Bl0xPack.createEmptyCollection()}))
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected up to 5, got 7

error: mismatched types
   --> 179b6b1cb6755e31.Bl0xPack:221:34
    |
221 |                     providerPath: /private/bl0xPackCollection,
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Type`, got `PrivatePath`

error: mismatched types
   --> 179b6b1cb6755e31.Bl0xPack:223:38
    |
223 |                     publicLinkedType: Type<&Bl0xPack.Collection>(),
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `fun(): @{NonFungibleToken.Collection}`, got `Type`

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.Bl0xPack:224:50
    |
224 |                     providerLinkedType: Type<auth(NonFungibleToken.Withdraw) &Bl0xPack.Collection>(),
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: incorrect argument label
   --> 179b6b1cb6755e31.Bl0xPack:221:20
    |
221 |                     providerPath: /private/bl0xPackCollection,
    |                     ^^^^^^^^^^^^^ expected `publicCollection`, got `providerPath`

error: incorrect argument label
   --> 179b6b1cb6755e31.Bl0xPack:222:20
    |
222 |                     publicCollection: Type<&Bl0xPack.Collection>(),
    |                     ^^^^^^^^^^^^^^^^^ expected `publicLinkedType`, got `publicCollection`

error: incorrect argument label
   --> 179b6b1cb6755e31.Bl0xPack:223:20
    |
223 |                     publicLinkedType: Type<&Bl0xPack.Collection>(),
    |                     ^^^^^^^^^^^^^^^^^ expected `createEmptyCollectionFunction`, got `publicLinkedType`

error: resource `Bl0xPack.NFT` does not conform to resource interface `NonFungibleToken.NFT`
   --> 179b6b1cb6755e31.Bl0xPack:119:25
    |
119 |     access(all) resource NFT: NonFungibleToken.NFT, ViewResolver.Resolver {
    |                          ^ `Bl0xPack.NFT` is missing definitions for members: `createEmptyCollection`

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.Bl0xPack:341:43
    |
341 |                 if metadata.price != valut.balance {
    |                                            ^^^^^^^^^^ unknown member

error: too few arguments
   --> 179b6b1cb6755e31.Bl0xPack:369:20
    |
369 |                 if(!keyList.verify(signatureSet: signatureSet, signedData: nft.hash.utf8)){
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected at least 3, got 2

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.Bl0xPack:374:97
    |
374 |                     metadata.royaltyCap!.borrow()!.deposit(from: <- vault.withdraw(amount: valut.balance * metadata.royaltyCut))
    |                                                                                                  ^^^^^^^^^^ unknown member

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.Bl0xPack:430:43
    |
430 |                 if metadata.price != valut.balance {
    |                                            ^^^^^^^^^^ unknown member

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.Bl0xPack:435:97
    |
435 |                     metadata.royaltyCap!.borrow()!.deposit(from: <- vault.withdraw(amount: valut.balance * metadata.royaltyCut))
    |                                                                                                  ^^^^^^^^^^ unknown member

error: missing access modifier for function
   --> 179b6b1cb6755e31.Bl0xPack:448:12
    |
448 |             access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |             ^

error: resource `Bl0xPack.Collection` does not conform to resource interface `NonFungibleToken.Provider`
   --> 179b6b1cb6755e31.Bl0xPack:253:29
    |
253 |         access(all) resource Collection: NonFungibleToken.Provider, NonFungibleToken.Receiver, NonFungibleToken.Collection, CollectionPublic, ViewResolver.ResolverCollection {
    |                              ^
   ... 
    |
448 |             access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                                                       -------- mismatch here


, FindLeaseMarket: failed to deploy contract FindLeaseMarket: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> bf25fe82171b451b96bd9e98d3f59d867b30c1ac8e0f0da6d033725e32d84694:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
 --> 179b6b1cb6755e31.FindLeaseMarket:2:7
  |
2 | import FindViews from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindLeaseMarket:3:7
  |
3 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot find declaration `Profile` in `179b6b1cb6755e31.Profile`
 --> 179b6b1cb6755e31.FindLeaseMarket:4:7
  |
4 | import Profile from 0x179b6b1cb6755e31
  |        ^^^^^^^ available exported declarations are:


error: cannot find declaration `FindMarket` in `179b6b1cb6755e31.FindMarket`
 --> 179b6b1cb6755e31.FindLeaseMarket:8:7
  |
8 | import FindMarket from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^ available exported declarations are:


error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarket:332:41
    |
332 |         access(contract) fun borrow() : &{FIND.LeaseCollectionPublic}
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarket:336:42
    |
336 |         access(self) let cap: Capability<&{FIND.LeaseCollectionPublic}>
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarket:355:41
    |
355 |         access(contract) fun borrow() : &{FIND.LeaseCollectionPublic} {
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarket:404:41
    |
404 |         access(contract) fun borrow() : &{FIND.LeaseCollectionPublic} {
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
  --> 179b6b1cb6755e31.FindLeaseMarket:29:52
   |
29 |     access(all) fun getTenant(_ tenant: Address) : &{FindMarket.TenantPublic} {
   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
  --> 179b6b1cb6755e31.FindLeaseMarket:42:66
   |
42 |     access(all) fun getSaleItemCollectionCapabilities(tenantRef: &{FindMarket.TenantPublic}, address: Address) : [Capability<&{FindLeaseMarket.SaleItemCollectionPublic}>] {
   |                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
  --> 179b6b1cb6755e31.FindLeaseMarket:56:64
   |
56 |     access(all) fun getSaleItemCollectionCapability(tenantRef: &{FindMarket.TenantPublic}, marketOption: String, address: Address) : Capability<&{FindLeaseMarket.SaleItemCollectionPublic}>? {
   |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarket:140:58
    |
140 |     access(contract) fun checkSaleInformation(tenantRef: &{FindMarket.TenantPublic}, marketOption: String, address: Address, name: String?, getGhost: Bool, getLeaseInfo: Bool) : FindLeaseMarket.SaleItemCollectionReport {
    |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarket:214:67
    |
214 |     access(all) fun getMarketBidCollectionCapabilities(tenantRef: &{FindMarket.TenantPublic}, address: Address) : [Capability<&{FindLeaseMarket.MarketBidCollectionPublic}>] {
    |                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarket:225:65
    |
225 |     access(all) fun getMarketBidCollectionCapability(tenantRef: &{FindMarket.TenantPublic}, marketOption: String, address: Address) : Capability<&{FindLeaseMarket.MarketBidCollectionPublic}>? {
    |                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarket:257:57
    |
257 |     access(contract) fun checkBidInformation(tenantRef: &{FindMarket.TenantPublic}, marketOption: String, address: Address, name: String?, getGhost:Bool, getLeaseInfo: Bool) : FindLeaseMarket.BidItemCollectionReport {
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindLeaseMarket:446:26
    |
446 |         let soldFor=valut.balance
    |                           ^^^^^^^^^^ unknown member

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindLeaseMarket:674:15
    |
674 |         return FindLeaseMarket.account.storage.borrow<&FIND.Network>(from : FIND.NetworkStoragePath) ?? panic("Network is not up")
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarket:344:59
    |
344 |             self.cap=getAccount(address).capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindLeaseMarket:344:21
    |
344 |             self.cap=getAccount(address).capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarket:432:53
    |
432 |             let profile = receiver.capabilities.get<&{Profile.Public}>(Profile.publicPath)!
    |                                                      ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindLeaseMarket:432:26
    |
432 |             let profile = receiver.capabilities.get<&{Profile.Public}>(Profile.publicPath)!
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindLeaseMarket:433:25
    |
433 |             let leases = receiver.capabilities.get<&FIND.LeaseCollection>(FIND.LeasePublicPath)!
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


, FindViews: failed to deploy contract FindViews: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> aff24f05d12374a56129ad8016cf7f36723ae34a8de9168bc412194e62a371bc:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.FindViews:241:34
    |
241 |         init(cap: Capability<auth(NonFungibleToken.Withdraw) &{NonFungibleToken.Collection}>, id: UInt64) {
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.FindViews:235:46
    |
235 |         access(self) let cap: Capability<auth(NonFungibleToken.Withdraw) &{NonFungibleToken.Collection}>
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: value of type `auth(not specified) &{NonFungibleToken.Collection}` has no member `borrowViewResolver`
   --> 179b6b1cb6755e31.FindViews:249:48
    |
249 |             let viewResolver=self.cap.borrow()!.borrowViewResolver(id: self.id)!
    |                                                 ^^^^^^^^^^^^^^^^^^ unknown member

error: value of type `auth(not specified) &{NonFungibleToken.Collection}` has no member `borrowViewResolver`
   --> 179b6b1cb6755e31.FindViews:259:35
    |
259 |             let viewResolver = cap.borrowViewResolver(id: self.id) ?? panic("The capability of view pointer is not linked.")
    |                                    ^^^^^^^^^^^^^^^^^^ unknown member

error: cannot access `withdraw`: function requires `Withdraw | Owner` authorization, but reference only has `not specified` authorization
   --> 179b6b1cb6755e31.FindViews:327:22
    |
327 |             return <- self.cap.borrow()!.withdraw(withdrawID: self.id)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^


, Dev: failed to deploy contract Dev: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> f69209a4c96387496efe32659cdb9e2ffe88891d2259b5f1dd76d0658deedbda:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindMarket` in `179b6b1cb6755e31.FindMarket`
 --> 179b6b1cb6755e31.Dev:4:7
  |
4 | import FindMarket from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^ available exported declarations are:



, FindLostAndFoundWrapper: failed to deploy contract FindLostAndFoundWrapper: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> a9e4b621fa105c872214af068fdbc60f4f43593543cd81cfce7e40ac386bb26a:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `LostAndFound` in `f8d6e0586b0a20c7.LostAndFound`
 --> 179b6b1cb6755e31.FindLostAndFoundWrapper:6:7
  |
6 | import LostAndFound from 0xf8d6e0586b0a20c7
  |        ^^^^^^^^^^^^ available exported declarations are:


error: cannot find declaration `LostAndFoundHelper` in `f8d6e0586b0a20c7.LostAndFoundHelper`
 --> 179b6b1cb6755e31.FindLostAndFoundWrapper:7:7
  |
7 | import LostAndFoundHelper from 0xf8d6e0586b0a20c7
  |        ^^^^^^^^^^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindLostAndFoundWrapper:9:7
  |
9 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
  --> 179b6b1cb6755e31.FindLostAndFoundWrapper:11:7
   |
11 | import FindViews from 0x179b6b1cb6755e31
   |        ^^^^^^^^^ available exported declarations are:


error: cannot find type in this scope: `FungibleToken.Withdraw`
  --> 179b6b1cb6755e31.FindLostAndFoundWrapper:38:29
   |
38 |         storagePayment: auth(FungibleToken.Withdraw) &{FungibleToken.Vault},
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> 179b6b1cb6755e31.FindLostAndFoundWrapper:239:79
    |
239 |     access(contract) fun depositVault(_ vault: @{FungibleToken.Vault}) : auth (FungibleToken.Withdraw) &{FungibleToken.Vault} {
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> 179b6b1cb6755e31.FindLostAndFoundWrapper:255:136
    |
255 |     access(contract) fun subsidizeUserStorage(requiredStorage: UInt64, receiverAvailableStorage: UInt64, receiver: Address, vault: auth(FungibleToken.Withdraw) &{FungibleToken.Vault}, sender: Address, uuid: UInt64) : Bool {
    |                                                                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot access `withdraw`: function requires `Withdraw` authorization, but reference only has `not specified` authorization
   --> 179b6b1cb6755e31.FindLostAndFoundWrapper:110:21
    |
110 |         let vault <- storagePayment.withdraw(amount: estimate.storageFee + 0.00005)
    |                      ^^^^^^^^^^^^^^^^^^^^^^^

error: value of type `auth(not specified) &{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindLostAndFoundWrapper:117:38
    |
117 |         let flowStorageFee = vaultRef.getBalance()
    |                                       ^^^^^^^^^^ unknown member

error: value of type `&{NonFungibleToken.Collection}` has no member `borrowViewResolver`
   --> 179b6b1cb6755e31.FindLostAndFoundWrapper:156:40
    |
156 |         let viewResolver=cap!.borrow()!.borrowViewResolver(id: nftID)!
    |                                         ^^^^^^^^^^^^^^^^^^ unknown member

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindLostAndFoundWrapper:247:17
    |
247 |         if valut.balance != nil {
    |                  ^^^^^^^^^^ unknown member

error: cannot access `withdraw`: function requires `Withdraw` authorization, but reference only has `not specified` authorization
   --> 179b6b1cb6755e31.FindLostAndFoundWrapper:269:38
    |
269 |         flowReceiver.deposit(from: <- vault.withdraw(amount: subsidizeAmount))
    |                                       ^^^^^^^^^^^^^^


, FindPack: failed to deploy contract FindPack: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> d421df47a74608a9f1ed14c509496bc530b8073deee15819313dd015e88b2a91:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindForge` in `179b6b1cb6755e31.FindForge`
 --> 179b6b1cb6755e31.FindPack:7:7
  |
7 | import FindForge from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindVerifier` in `179b6b1cb6755e31.FindVerifier`
 --> 179b6b1cb6755e31.FindPack:8:7
  |
8 | import FindVerifier from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^^^ available exported declarations are:


error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindPack:166:25
    |
166 |             verifiers : [{FindVerifier.Verifier}],
    |                          ^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindPack:158:37
    |
158 |         access(all) let verifiers : [{FindVerifier.Verifier}]
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindPack:213:122
    |
213 |         init(name : String, startTime : UFix64 , endTime : UFix64? , price : UFix64, purchaseLimit : UInt64?, verifiers: [{FindVerifier.Verifier}], verifyAll : Bool ) {
    |                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindPack:210:37
    |
210 |         access(all) let verifiers : [{FindVerifier.Verifier}]
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.FindPack:353:233
    |
353 |         init(name: String, description: String, thumbnailUrl: String?,thumbnailHash: String?, wallet: Capability<&{FungibleToken.Receiver}>, openTime:UFix64, walletType:Type, itemTypes: [Type],  providerCaps: {Type : Capability<auth(NonFungibleToken.Withdraw) &{NonFungibleToken.Collection}>} , requiresReservation:Bool, storageRequirement: UInt64, saleInfos: [SaleInfo], primarySaleRoyalties : MetadataViews.Royalties, royalties : MetadataViews.Royalties, collectionDisplay: MetadataViews.NFTCol... 
    |                                                                                                                                                                                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.FindPack:346:68
    |
346 |         access(contract) let providerCaps: {Type : Capability<auth (NonFungibleToken.Withdraw) &{NonFungibleToken.Collection}>}
    |                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.FindPack:818:15
    |
818 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FindPack:1170:41
     |
1170 |     access(account) fun createForge() : @{FindForge.Forge} {
     |                                          ^^^^^^^^^^^^^^^^^

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.FindPack:943:74
    |
943 |         let openedPacksCollection = FindPack.account.storage.borrow<auth (NonFungibleToken.Withdraw) &FindPack.Collection>(from: FindPack.OpenedCollectionStoragePath)!
    |                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot access `withdraw`: function requires `not specified` authorization
   --> 179b6b1cb6755e31.FindPack:944:20
    |
944 |         let pack <- openedPacksCollection.withdraw(withdrawID: packId) as! @FindPack.NFT
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: value of type `auth(not specified) &{NonFungibleToken.Collection}` has no member `borrowViewResolver`
    --> 179b6b1cb6755e31.FindPack:1010:27
     |
1010 |             let nft=source.borrowViewResolver(id: id)!
     |                            ^^^^^^^^^^^^^^^^^^ unknown member

error: cannot access `withdraw`: function requires `Withdraw | Owner` authorization, but reference only has `not specified` authorization
    --> 179b6b1cb6755e31.FindPack:1026:25
     |
1026 |             let token <- source.withdraw(withdrawID: id)
     |                          ^^^^^^^^^^^^^^^

error: value of type `auth(not specified) &{NonFungibleToken.Collection}` has no member `borrowViewResolver`
    --> 179b6b1cb6755e31.FindPack:1069:27
     |
1069 |         let resolver = ref.borrowViewResolver(id : ref.getIDs()[0])!  // if the ID length is 0, there must be some problem
     |                            ^^^^^^^^^^^^^^^^^^ unknown member

error: too many arguments
   --> 179b6b1cb6755e31.FindPack:544:23
    |
544 |                 return MetadataViews.NFTCollectionData(
545 |                     storagePath: FindPack.CollectionStoragePath,
546 |                     publicPath: FindPack.CollectionPublicPath,
547 |                     providerPath: FindPack.CollectionPrivatePath,
548 |                     publicCollection: Type<&FindPack.Collection>(),
549 |                     publicLinkedType: Type<&FindPack.Collection>(),
550 |                     providerLinkedType: Type<auth (NonFungibleToken.Withdraw) &FindPack.Collection>(),
551 |                     createEmptyCollectionFunction: fun () : @{NonFungibleToken.Collection} {
552 |                         return <- FindPack.createEmptyCollection()
553 |                     }
554 |                 )
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected up to 5, got 7

error: mismatched types
   --> 179b6b1cb6755e31.FindPack:547:34
    |
547 |                     providerPath: FindPack.CollectionPrivatePath,
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Type`, got `PrivatePath`

error: mismatched types
   --> 179b6b1cb6755e31.FindPack:549:38
    |
549 |                     publicLinkedType: Type<&FindPack.Collection>(),
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `fun(): @{NonFungibleToken.Collection}`, got `Type`

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.FindPack:550:51
    |
550 |                     providerLinkedType: Type<auth (NonFungibleToken.Withdraw) &FindPack.Collection>(),
    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: incorrect argument label
   --> 179b6b1cb6755e31.FindPack:547:20
    |
547 |                     providerPath: FindPack.CollectionPrivatePath,
    |                     ^^^^^^^^^^^^^ expected `publicCollection`, got `providerPath`

error: incorrect argument label
   --> 179b6b1cb6755e31.FindPack:548:20
    |
548 |                     publicCollection: Type<&FindPack.Collection>(),
    |                     ^^^^^^^^^^^^^^^^^ expected `publicLinkedType`, got `publicCollection`

error: incorrect argument label
   --> 179b6b1cb6755e31.FindPack:549:20
    |
549 |                     publicLinkedType: Type<&FindPack.Collection>(),
    |                     ^^^^^^^^^^^^^^^^^ expected `createEmptyCollectionFunction`, got `publicLinkedType`

error: resource `FindPack.NFT` does not conform to resource interface `NonFungibleToken.NFT`
   --> 179b6b1cb6755e31.FindPack:438:25
    |
438 |     access(all) resource NFT: NonFungibleToken.NFT, ViewResolver.Resolver {
    |                          ^ `FindPack.NFT` is missing definitions for members: `createEmptyCollection`

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindPack:680:40
    |
680 |             if saleInfo!.price != valut.balance {
    |                                         ^^^^^^^^^^ unknown member

error: too few arguments
   --> 179b6b1cb6755e31.FindPack:707:16
    |
707 |             if(!keyList.verify(signatureSet: signatureSet, signedData: nft.hash.utf8)){
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected at least 3, got 2

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindPack:780:40
    |
780 |             if saleInfo!.price != valut.balance {
    |                                         ^^^^^^^^^^ unknown member

error: missing access modifier for function
   --> 179b6b1cb6755e31.FindPack:818:8
    |
818 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |         ^

error: resource `FindPack.Collection` does not conform to resource interface `NonFungibleToken.Provider`
   --> 179b6b1cb6755e31.FindPack:597:25
    |
597 |     access(all) resource Collection: NonFungibleToken.Provider, NonFungibleToken.Receiver, NonFungibleToken.Collection, CollectionPublic, ViewResolver.ResolverCollection {
    |                          ^
   ... 
    |
818 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                                                   -------- mismatch here

error: missing access modifier for function
    --> 179b6b1cb6755e31.FindPack:1142:8
     |
1142 |         access(FindForge.ForgeOwner) fun mint(platform: FindForge.MinterPlatform, data: AnyStruct, verifier: &FindForge.Verifier) : @{NonFungibleToken.NFT} {
     |         ^

error: missing access modifier for function
    --> 179b6b1cb6755e31.FindPack:1153:8
     |
1153 |         access(FindForge.ForgeOwner) fun addContractData(platform: FindForge.MinterPlatform, data: AnyStruct, verifier: &FindForge.Verifier) {
     |         ^


, TokenForwarding: failed to deploy contract TokenForwarding: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> e002000e398b1cdfb8c9a5cb06fdb92dfc4ce197bd87f22f4dcdf02c4f1e09fa:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
  --> f8d6e0586b0a20c7.TokenForwarding:54:31
   |
54 |             let balance = from.getBalance()
   |                                ^^^^^^^^^^ unknown member


, FLOAT: failed to deploy contract FLOAT: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 957290f850d6cf0235de0462c387ed62d85806e4adbea2a30041d2e71f156cd4:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> f8d6e0586b0a20c7.FLOAT:249:15
    |
249 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdrawWithUUID(_ uuid: UInt64): @{NonFungibleToken.NFT} {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> f8d6e0586b0a20c7.FLOAT:262:15
    |
262 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdrawWithType(type: Type, withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> f8d6e0586b0a20c7.FLOAT:275:15
    |
275 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdrawWithTypeAndUUID(type: Type, uuid: UInt64): @{NonFungibleToken.NFT} {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> f8d6e0586b0a20c7.FLOAT:286:15
    |
286 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> f8d6e0586b0a20c7.FLOAT:316:15
    |
316 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun transfer(id: UInt64, receiver: Capability<&{NonFungibleToken.Receiver}>): Bool {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: resource `FLOAT.NFT` does not conform to resource interface `NonFungibleToken.NFT`
   --> f8d6e0586b0a20c7.FLOAT:105:25
    |
105 |     access(all) resource NFT: NonFungibleToken.NFT, ViewResolver.Resolver {
    |                          ^ `FLOAT.NFT` is missing definitions for members: `createEmptyCollection`

error: missing access modifier for function
   --> f8d6e0586b0a20c7.FLOAT:249:8
    |
249 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdrawWithUUID(_ uuid: UInt64): @{NonFungibleToken.NFT} {
    |         ^

error: missing access modifier for function
   --> f8d6e0586b0a20c7.FLOAT:262:8
    |
262 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdrawWithType(type: Type, withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |         ^

error: missing access modifier for function
   --> f8d6e0586b0a20c7.FLOAT:275:8
    |
275 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdrawWithTypeAndUUID(type: Type, uuid: UInt64): @{NonFungibleToken.NFT} {
    |         ^

error: missing access modifier for function
   --> f8d6e0586b0a20c7.FLOAT:286:8
    |
286 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |         ^

error: missing access modifier for function
   --> f8d6e0586b0a20c7.FLOAT:316:8
    |
316 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun transfer(id: UInt64, receiver: Capability<&{NonFungibleToken.Receiver}>): Bool {
    |         ^

error: resource `FLOAT.Collection` does not conform to resource interface `NonFungibleToken.Provider`
   --> f8d6e0586b0a20c7.FLOAT:211:25
    |
211 |     access(all) resource Collection: NonFungibleToken.Provider, NonFungibleToken.Receiver, NonFungibleToken.Collection, ViewResolver.ResolverCollection, CollectionPublic {
    |                          ^
   ... 
    |
286 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                                                   -------- mismatch here

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> f8d6e0586b0a20c7.FLOAT:763:24
    |
763 |             if (payment.getBalance() != self.getPrices()![payment.getType().identifier]!.price) {
    |                         ^^^^^^^^^^ unknown member

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> f8d6e0586b0a20c7.FLOAT:787:67
    |
787 |             let emeraldCityCut <- payment.withdraw(amount: payment.getBalance() * royalty)
    |                                                                    ^^^^^^^^^^ unknown member


, FindForge: failed to deploy contract FindForge: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> d19f8f391c905b5832b6d2e452a978bc0b8a5523c8afe91c2e7519bac8fa8711:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindForge:4:7
  |
4 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot find declaration `FindForgeOrder` in `179b6b1cb6755e31.FindForgeOrder`
 --> 179b6b1cb6755e31.FindForge:5:7
  |
5 | import FindForgeOrder from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^^^^^ available exported declarations are:


error: cannot find declaration `Profile` in `179b6b1cb6755e31.Profile`
 --> 179b6b1cb6755e31.FindForge:6:7
  |
6 | import Profile from 0x179b6b1cb6755e31
  |        ^^^^^^^ available exported declarations are:


error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindForge:157:65
    |
157 |         let leaseCollection = getAccount(user).capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!.borrow() ?? panic("Cannot borrow reference to lease collection of user : ".concat(leaseName))
    |                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindForge:157:30
    |
157 |         let leaseCollection = getAccount(user).capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!.borrow() ?? panic("Cannot borrow reference to lease collection of user : ".concat(leaseName))
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindForge:157:30
    |
157 |         let leaseCollection = getAccount(user).capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!.borrow() ?? panic("Cannot borrow reference to lease collection of user : ".concat(leaseName))
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: value of type `{NonFungibleToken.NFT}` has no member `getID`
   --> 179b6b1cb6755e31.FindForge:209:21
    |
209 |         let id = nft.getID()
    |                      ^^^^^ unknown member

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindForge:274:61
    |
274 |         let leaseCol = getAccount(address).capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!.borrow() ?? panic("Cannot borrow lease collection to lease owner. Owner : ".concat(address.toString()))
    |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindForge:274:23
    |
274 |         let leaseCol = getAccount(address).capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!.borrow() ?? panic("Cannot borrow lease collection to lease owner. Owner : ".concat(address.toString()))
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindForge:274:23
    |
274 |         let leaseCol = getAccount(address).capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!.borrow() ?? panic("Cannot borrow lease collection to lease owner. Owner : ".concat(address.toString()))
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: value of type `{NonFungibleToken.NFT}` has no member `getID`
   --> 179b6b1cb6755e31.FindForge:292:21
    |
292 |         let id = nft.getID()
    |                      ^^^^^ unknown member

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindForge:321:61
    |
321 |         let leaseCol = getAccount(address).capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!.borrow() ?? panic("Cannot borrow lease collection to lease owner. Owner : ".concat(address.toString()))
    |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindForge:321:23
    |
321 |         let leaseCol = getAccount(address).capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!.borrow() ?? panic("Cannot borrow lease collection to lease owner. Owner : ".concat(address.toString()))
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindForge:321:23
    |
321 |         let leaseCol = getAccount(address).capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!.borrow() ?? panic("Cannot borrow lease collection to lease owner. Owner : ".concat(address.toString()))
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


, FindMarketDirectOfferEscrow: failed to deploy contract FindMarketDirectOfferEscrow: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> fed3c5fdd5e1fdea41b42deb52bf2e46c1ba1984b2d11e9bfd8d98686d34d0cd:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
 --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:4:7
  |
4 | import FindViews from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:7:7
  |
7 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot find declaration `FindMarket` in `179b6b1cb6755e31.FindMarket`
 --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:8:7
  |
8 | import FindMarket from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^ available exported declarations are:


error: cannot find declaration `Profile` in `179b6b1cb6755e31.Profile`
 --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:9:7
  |
9 | import Profile from 0x179b6b1cb6755e31
  |        ^^^^^^^ available exported declarations are:


error: ambiguous intersection type
  --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:25:22
   |
25 |         init(pointer: {FindViews.Pointer}, callback: Capability<&MarketBidCollection>, validUntil: UFix64?, saleItemExtraField: {String : AnyStruct}) {
   |                       ^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
  --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:18:38
   |
18 |         access(contract) var pointer: {FindViews.Pointer}
   |                                       ^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:182:46
    |
182 |         init (_ tenantCapability: Capability<&{FindMarket.TenantPublic}>) {
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:180:59
    |
180 |         access(contract) let tenantCapability: Capability<&{FindMarket.TenantPublic}>
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:187:40
    |
187 |         access(self) fun getTenant() : &{FindMarket.TenantPublic} {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:445:56
    |
445 |         access(all) fun borrowSaleItem(_ id: UInt64) : &{FindMarket.SaleItem} {
    |                                                         ^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:507:92
    |
507 |         init(receiver: Capability<&{FungibleToken.Receiver}>, tenantCapability: Capability<&{FindMarket.TenantPublic}>) {
    |                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:504:59
    |
504 |         access(contract) let tenantCapability: Capability<&{FindMarket.TenantPublic}>
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:513:40
    |
513 |         access(self) fun getTenant() : &{FindMarket.TenantPublic} {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:638:54
    |
638 |         access(all) fun borrowBidItem(_ id: UInt64): &{FindMarket.Bid} {
    |                                                       ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:651:84
    |
651 |     access(all)   fun createEmptySaleItemCollection(_ tenantCapability: Capability<&{FindMarket.TenantPublic}>): @SaleItemCollection {
    |                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:655:130
    |
655 |     access(all) fun createEmptyMarketBidCollection(receiver: Capability<&{FungibleToken.Receiver}>, tenantCapability: Capability<&{FindMarket.TenantPublic}>) : @MarketBidCollection {
    |                                                                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:674:75
    |
674 |             if let saleItemCollection = getAccount(user).capabilities.get<&{FindMarket.SaleItemCollectionPublic}>(tenant.getPublicPath(Type<@SaleItemCollection>()))!.borrow() {
    |                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:674:40
    |
674 |             if let saleItemCollection = getAccount(user).capabilities.get<&{FindMarket.SaleItemCollectionPublic}>(tenant.getPublicPath(Type<@SaleItemCollection>()))!.borrow() {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:674:40
    |
674 |             if let saleItemCollection = getAccount(user).capabilities.get<&{FindMarket.SaleItemCollectionPublic}>(tenant.getPublicPath(Type<@SaleItemCollection>()))!.borrow() {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:449:40
    |
449 |             return (&self.items[id] as &{FindMarket.SaleItem}?)!
    |                                         ^^^^^^^^^^^^^^^^^^^^^

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:479:30
    |
479 |             return self.valut.balance
    |                               ^^^^^^^^^^ unknown member

error: value of type `{NonFungibleToken.NFT}` has no member `getID`
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:521:24
    |
521 |             let id= nft.getID()
    |                         ^^^^^ unknown member

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:523:46
    |
523 |             let vaultRef = &bid.vault as auth(FungibleToken.Withdraw) &{FungibleToken.Vault}
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot access `withdraw`: function requires `Withdraw` authorization, but reference only has `not specified` authorization
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:537:26
    |
537 |             let vault  <- vaultRef.withdraw(amount: vaultRef.getBalance())
    |                           ^^^^^^^^^^^^^^^^^

error: value of type `auth(not specified) &{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:537:61
    |
537 |             let vault  <- vaultRef.withdraw(amount: vaultRef.getBalance())
    |                                                              ^^^^^^^^^^ unknown member

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:561:21
    |
561 |             if valut.balance <= 0.0 {
    |                      ^^^^^^^^^^ unknown member

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:589:25
    |
589 |                 if valut.balance <= 0.65 {
    |                          ^^^^^^^^^^ unknown member

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:626:46
    |
626 |             let vaultRef = &bid.vault as auth(FungibleToken.Withdraw) &{FungibleToken.Vault}
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot access `withdraw`: function requires `Withdraw` authorization, but reference only has `not specified` authorization
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:627:53
    |
627 |             self.receiver.borrow()!.deposit(from: <- vaultRef.withdraw(amount: vaultRef.getBalance()))
    |                                                      ^^^^^^^^^^^^^^^^^

error: value of type `auth(not specified) &{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:627:88
    |
627 |             self.receiver.borrow()!.deposit(from: <- vaultRef.withdraw(amount: vaultRef.getBalance()))
    |                                                                                         ^^^^^^^^^^ unknown member

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:642:39
    |
642 |             return (&self.bids[id] as &{FindMarket.Bid}?)!
    |                                        ^^^^^^^^^^^^^^^^

error: value of type `&{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindMarketDirectOfferEscrow:647:29
    |
647 |             return bid.valut.balance
    |                              ^^^^^^^^^^ unknown member


, FindMarketSale: failed to deploy contract FindMarketSale: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 0ea1566089adc9b3c6ab23a1c6c84ad0a6d83f78b3d8c99f0d09264c0042bdf2:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
 --> 179b6b1cb6755e31.FindMarketSale:4:7
  |
4 | import FindViews from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindMarketSale:6:7
  |
6 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot find declaration `Profile` in `179b6b1cb6755e31.Profile`
 --> 179b6b1cb6755e31.FindMarketSale:7:7
  |
7 | import Profile from 0x179b6b1cb6755e31
  |        ^^^^^^^ available exported declarations are:


error: cannot find declaration `FindMarket` in `179b6b1cb6755e31.FindMarket`
 --> 179b6b1cb6755e31.FindMarketSale:8:7
  |
8 | import FindMarket from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^ available exported declarations are:


error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketSale:156:56
    |
156 |         access(all) fun borrowSaleItem(_ id: UInt64) : &{FindMarket.SaleItem}? //TODO: look if this is safe
    |                                                         ^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketSale:168:46
    |
168 |         init (_ tenantCapability: Capability<&{FindMarket.TenantPublic}>) {
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketSale:166:59
    |
166 |         access(contract) let tenantCapability: Capability<&{FindMarket.TenantPublic}>
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketSale:173:40
    |
173 |         access(self) fun getTenant() : &{FindMarket.TenantPublic} {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketSale:358:56
    |
358 |         access(all) fun borrowSaleItem(_ id: UInt64) : &{FindMarket.SaleItem}? {
    |                                                         ^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketSale:367:82
    |
367 |     access(all) fun createEmptySaleItemCollection(_ tenantCapability: Capability<&{FindMarket.TenantPublic}>) : @SaleItemCollection {
    |                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindMarketSale:195:43
    |
195 |             if saleItem.salePrice != valut.balance {
    |                                            ^^^^^^^^^^ unknown member

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindMarketSale:196:134
    |
196 |                 panic("Incorrect balance sent in vault. Expected ".concat(saleItem.salePrice.toString()).concat(" got ").concat(valut.balance.toString()))
    |                                                                                                                                       ^^^^^^^^^^ unknown member

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketSale:362:39
    |
362 |             return &self.items[id] as &{FindMarket.SaleItem}?
    |                                        ^^^^^^^^^^^^^^^^^^^^^


, FindVerifier: failed to deploy contract FindVerifier: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 8dd9534deb3a2651898ed7bca99175f87ced4988152b3702ac38c8097ab26fb7:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FLOAT` in `f8d6e0586b0a20c7.FLOAT`
 --> 179b6b1cb6755e31.FindVerifier:1:7
  |
1 | import FLOAT from 0xf8d6e0586b0a20c7
  |        ^^^^^ available exported declarations are:


error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindVerifier:2:7
  |
2 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot infer type parameter: `T`
  --> 179b6b1cb6755e31.FindVerifier:38:24
   |
38 |             let float = getAccount(user).capabilities.borrow<&FLOAT.Collection>(FLOAT.FLOATCollectionPublicPath)
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
  --> 179b6b1cb6755e31.FindVerifier:81:24
   |
81 |             let float = getAccount(user).capabilities.get<&FLOAT.Collection>(FLOAT.FLOATCollectionPublicPath)!.borrow() 
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
  --> 179b6b1cb6755e31.FindVerifier:81:24
   |
81 |             let float = getAccount(user).capabilities.get<&FLOAT.Collection>(FLOAT.FLOATCollectionPublicPath)!.borrow() 
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindVerifier:153:57
    |
153 |             let cap = getAccount(user).capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindVerifier:153:22
    |
153 |             let cap = getAccount(user).capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindVerifier:154:16
    |
154 |             if !cap.check() {
    |                 ^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindVerifier:157:22
    |
157 |             let ref = cap.borrow()!
    |                       ^^^^^^^^^^^^


, CharityNFT: failed to deploy contract CharityNFT: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> b8c2b3a20db296086e0e1cc5bb9c2b968042f96aaf1bf604835e0e7e517655c4:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.CharityNFT:171:15
    |
171 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: contract `CharityNFT` does not conform to contract interface `ViewResolver`
 --> 179b6b1cb6755e31.CharityNFT:6:21
  |
6 | access(all) contract CharityNFT: ViewResolver {
  |                      ^ `CharityNFT` is missing definitions for members: `getContractViews`, `resolveContractView`

error: too many arguments
  --> 179b6b1cb6755e31.CharityNFT:83:23
   |
83 |                 return MetadataViews.NFTCollectionData(
84 |                     storagePath: CharityNFT.CollectionStoragePath,
85 |                     publicPath: CharityNFT.CollectionPublicPath,
86 |                     providerPath: /private/findCharityCollection,
87 |                     publicCollection: Type<&CharityNFT.Collection>(),
88 |                     publicLinkedType: Type<&CharityNFT.Collection>(),
89 |                     providerLinkedType: Type<auth(NonFungibleToken.Withdraw) &CharityNFT.Collection>(),
90 |                     createEmptyCollectionFunction: (fun(): @{NonFungibleToken.Collection} {return <- CharityNFT.createEmptyCollection()}))
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected up to 5, got 7

error: mismatched types
  --> 179b6b1cb6755e31.CharityNFT:86:34
   |
86 |                     providerPath: /private/findCharityCollection,
   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Type`, got `PrivatePath`

error: mismatched types
  --> 179b6b1cb6755e31.CharityNFT:88:38
   |
88 |                     publicLinkedType: Type<&CharityNFT.Collection>(),
   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `fun(): @{NonFungibleToken.Collection}`, got `Type`

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
  --> 179b6b1cb6755e31.CharityNFT:89:50
   |
89 |                     providerLinkedType: Type<auth(NonFungibleToken.Withdraw) &CharityNFT.Collection>(),
   |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: incorrect argument label
  --> 179b6b1cb6755e31.CharityNFT:86:20
   |
86 |                     providerPath: /private/findCharityCollection,
   |                     ^^^^^^^^^^^^^ expected `publicCollection`, got `providerPath`

error: incorrect argument label
  --> 179b6b1cb6755e31.CharityNFT:87:20
   |
87 |                     publicCollection: Type<&CharityNFT.Collection>(),
   |                     ^^^^^^^^^^^^^^^^^ expected `publicLinkedType`, got `publicCollection`

error: incorrect argument label
  --> 179b6b1cb6755e31.CharityNFT:88:20
   |
88 |                     publicLinkedType: Type<&CharityNFT.Collection>(),
   |                     ^^^^^^^^^^^^^^^^^ expected `createEmptyCollectionFunction`, got `publicLinkedType`

error: resource `CharityNFT.NFT` does not conform to resource interface `NonFungibleToken.NFT`
  --> 179b6b1cb6755e31.CharityNFT:18:25
   |
18 |     access(all) resource NFT: NonFungibleToken.NFT, Public, ViewResolver.Resolver {
   |                          ^ `CharityNFT.NFT` is missing definitions for members: `createEmptyCollection`

error: missing access modifier for function
   --> 179b6b1cb6755e31.CharityNFT:171:8
    |
171 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |         ^

error: resource `CharityNFT.Collection` does not conform to resource interface `NonFungibleToken.Provider`
   --> 179b6b1cb6755e31.CharityNFT:156:25
    |
156 |     access(all) resource Collection: NonFungibleToken.Provider, NonFungibleToken.Receiver, NonFungibleToken.Collection, CollectionPublic , ViewResolver.ResolverCollection{
    |                          ^
   ... 
    |
171 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                                                   -------- mismatch here


, FindThoughts: failed to deploy contract FindThoughts: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> b101d9ce4c39db94e4740b851b4f62500a9d78766cb95582969c65b5134cb698:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
 --> 179b6b1cb6755e31.FindThoughts:1:7
  |
1 | import FindViews from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindMarket` in `179b6b1cb6755e31.FindMarket`
 --> 179b6b1cb6755e31.FindThoughts:2:7
  |
2 | import FindMarket from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindThoughts:6:7
  |
6 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:



, FindMarketAdmin: failed to deploy contract FindMarketAdmin: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 5e20003ab74c920375a83e85e390f3a8a5129ea81d66d039b74c0116a52af83f:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindMarketAdmin:3:7
  |
3 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot find declaration `FindMarket` in `179b6b1cb6755e31.FindMarket`
 --> 179b6b1cb6755e31.FindMarketAdmin:4:7
  |
4 | import FindMarket from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^ available exported declarations are:


error: cannot infer type parameter: `T`
  --> 179b6b1cb6755e31.FindMarketAdmin:63:19
   |
63 |             return FindMarketAdmin.account.storage.borrow<auth(FindMarket.TenantClientOwner) &FindMarket.TenantClient>(from: path) ?? panic("Cannot borrow Find market tenant client Reference.")
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindMarketAdmin:134:22
    |
134 |             let cap = FindMarketAdmin.account.capabilities.borrow<&FindMarket.Tenant>(pp) ?? panic("Cannot borrow tenant reference from path. Path : ".concat(pp.toString()) )
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


, FindFurnace: failed to deploy contract FindFurnace: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> e62aa680632fdbb0a1553118e7b8b518c7c1f07c53d4d64b09face758df714f3:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindMarket` in `179b6b1cb6755e31.FindMarket`
 --> 179b6b1cb6755e31.FindFurnace:2:7
  |
2 | import FindMarket from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
 --> 179b6b1cb6755e31.FindFurnace:3:7
  |
3 | import FindViews from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindFurnace:4:7
  |
4 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:



, NameVoucher: failed to deploy contract NameVoucher: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 7eccca36940c58fadb0ac9ad6329aa696502bf3ec2c520ad6f095cbb8c1c0bfd:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `Profile` in `179b6b1cb6755e31.Profile`
 --> 179b6b1cb6755e31.NameVoucher:7:7
  |
7 | import Profile from 0x179b6b1cb6755e31
  |        ^^^^^^^ available exported declarations are:


error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.NameVoucher:8:7
  |
8 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
 --> 179b6b1cb6755e31.NameVoucher:9:7
  |
9 | import FindViews from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindAirdropper` in `179b6b1cb6755e31.FindAirdropper`
  --> 179b6b1cb6755e31.NameVoucher:10:7
   |
10 | import FindAirdropper from 0x179b6b1cb6755e31
   |        ^^^^^^^^^^^^^^ available exported declarations are:


error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.NameVoucher:148:15
    |
148 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: too many arguments
   --> 179b6b1cb6755e31.NameVoucher:109:23
    |
109 |                 return MetadataViews.NFTCollectionData(storagePath: NameVoucher.CollectionStoragePath,
110 |                 publicPath: NameVoucher.CollectionPublicPath,
111 |                 providerPath: NameVoucher.CollectionPrivatePath,
112 |                 publicCollection: Type<&Collection>(),
113 |                 publicLinkedType: Type<&Collection>(),
114 |                 providerLinkedType: Type<&Collection>(),
115 |                 createEmptyCollectionFunction: fun(): @{NonFungibleToken.Collection} {return <- NameVoucher.createEmptyCollection()})
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected up to 5, got 7

error: mismatched types
   --> 179b6b1cb6755e31.NameVoucher:111:30
    |
111 |                 providerPath: NameVoucher.CollectionPrivatePath,
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Type`, got `PrivatePath`

error: mismatched types
   --> 179b6b1cb6755e31.NameVoucher:113:34
    |
113 |                 publicLinkedType: Type<&Collection>(),
    |                                   ^^^^^^^^^^^^^^^^^^^ expected `fun(): @{NonFungibleToken.Collection}`, got `Type`

error: incorrect argument label
   --> 179b6b1cb6755e31.NameVoucher:111:16
    |
111 |                 providerPath: NameVoucher.CollectionPrivatePath,
    |                 ^^^^^^^^^^^^^ expected `publicCollection`, got `providerPath`

error: incorrect argument label
   --> 179b6b1cb6755e31.NameVoucher:112:16
    |
112 |                 publicCollection: Type<&Collection>(),
    |                 ^^^^^^^^^^^^^^^^^ expected `publicLinkedType`, got `publicCollection`

error: incorrect argument label
   --> 179b6b1cb6755e31.NameVoucher:113:16
    |
113 |                 publicLinkedType: Type<&Collection>(),
    |                 ^^^^^^^^^^^^^^^^^ expected `createEmptyCollectionFunction`, got `publicLinkedType`

error: resource `NameVoucher.NFT` does not conform to resource interface `NonFungibleToken.NFT`
  --> 179b6b1cb6755e31.NameVoucher:31:25
   |
31 |     access(all) resource NFT: NonFungibleToken.NFT, ViewResolver.Resolver {
   |                          ^ `NameVoucher.NFT` is missing definitions for members: `createEmptyCollection`

error: missing access modifier for function
   --> 179b6b1cb6755e31.NameVoucher:148:8
    |
148 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |         ^

error: value of type `{NonFungibleToken.NFT}` has no member `getID`
   --> 179b6b1cb6755e31.NameVoucher:151:36
    |
151 |             emit Withdraw(id: token.getID(), from: self.owner?.address)
    |                                     ^^^^^ unknown member

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.NameVoucher:208:26
    |
208 |             let network = NameVoucher.account.storage.borrow<&FIND.Network>(from: FIND.NetworkStoragePath) ?? panic("Cannot borrow find network for registration")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.NameVoucher:213:60
    |
213 |                 let profile = self.owner!.capabilities.get<&{Profile.Public}>(Profile.publicPath)!
    |                                                             ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.NameVoucher:213:30
    |
213 |                 let profile = self.owner!.capabilities.get<&{Profile.Public}>(Profile.publicPath)!
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.NameVoucher:214:58
    |
214 |                 let lease = self.owner!.capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!
    |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.NameVoucher:214:28
    |
214 |                 let lease = self.owner!.capabilities.get<&{FIND.LeaseCollectionPublic}>(FIND.LeasePublicPath)!
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: resource `NameVoucher.Collection` does not conform to resource interface `NonFungibleToken.Collection`
   --> 179b6b1cb6755e31.NameVoucher:138:25
    |
138 |     access(all) resource Collection: NonFungibleToken.Collection {
    |                          ^
   ... 
    |
148 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                                                   -------- mismatch here


, FindLeaseMarketSale: failed to deploy contract FindLeaseMarketSale: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> b6d8e687ccd3f891b98bd79578d28dba5c1b32c5e41b5f4d2dc7d6cd5713b034:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
 --> 179b6b1cb6755e31.FindLeaseMarketSale:2:7
  |
2 | import FindViews from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindLeaseMarketSale:4:7
  |
4 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot find declaration `FindLeaseMarket` in `179b6b1cb6755e31.FindLeaseMarket`
 --> 179b6b1cb6755e31.FindLeaseMarketSale:5:7
  |
5 | import FindLeaseMarket from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindMarket` in `179b6b1cb6755e31.FindMarket`
 --> 179b6b1cb6755e31.FindLeaseMarketSale:6:7
  |
6 | import FindMarket from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^ available exported declarations are:


error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketSale:129:58
    |
129 |         access(all) fun borrowSaleItem(_ name: String) : &{FindLeaseMarket.SaleItem}
    |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketSale:139:46
    |
139 |         init (_ tenantCapability: Capability<&{FindMarket.TenantPublic}>) {
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketSale:137:59
    |
137 |         access(contract) let tenantCapability: Capability<&{FindMarket.TenantPublic}>
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketSale:144:40
    |
144 |         access(self) fun getTenant() : &{FindMarket.TenantPublic} {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketSale:270:58
    |
270 |         access(all) fun borrowSaleItem(_ name: String) : &{FindLeaseMarket.SaleItem} {
    |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketSale:280:82
    |
280 |     access(all) fun createEmptySaleItemCollection(_ tenantCapability: Capability<&{FindMarket.TenantPublic}>) : @SaleItemCollection {
    |                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
  --> 179b6b1cb6755e31.FindLeaseMarketSale:75:19
   |
75 |             return Type<@FIND.Lease>()
   |                    ^^^^^^^^^^^^^^^^^^^

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindLeaseMarketSale:163:43
    |
163 |             if saleItem.salePrice != valut.balance {
    |                                            ^^^^^^^^^^ unknown member

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindLeaseMarketSale:164:134
    |
164 |                 panic("Incorrect balance sent in vault. Expected ".concat(saleItem.salePrice.toString()).concat(" got ").concat(valut.balance.toString()))
    |                                                                                                                                       ^^^^^^^^^^ unknown member


, LostAndFound: failed to deploy contract LostAndFound: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 8bde3f872794b142f1379aeaa446d21962246a0c8e78f32a5352563bf815b794:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> f8d6e0586b0a20c7.LostAndFound:392:33
    |
392 |             storagePayment: auth(FungibleToken.Withdraw) &{FungibleToken.Vault},
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> f8d6e0586b0a20c7.LostAndFound:361:49
    |
361 |     access(contract) fun getFlowProvider(): auth(FungibleToken.Withdraw) &{FungibleToken.Provider} {
    |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> f8d6e0586b0a20c7.LostAndFound:668:29
    |
668 |         storagePayment: auth(FungibleToken.Withdraw) &{FungibleToken.Vault},
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> f8d6e0586b0a20c7.LostAndFound:685:30
    |
685 |         storagePayment: auth (FungibleToken.Withdraw) &{FungibleToken.Vault},
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> f8d6e0586b0a20c7.LostAndFound:362:48
    |
362 |         return self.account.storage.borrow<auth(FungibleToken.Withdraw) &{FungibleToken.Provider}>(from: /storage/flowTokenVault)!
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: value of type `&{NonFungibleToken.NFT}` has no member `getID`
   --> f8d6e0586b0a20c7.LostAndFound:120:27
    |
120 |                 return nft.getID()
    |                            ^^^^^ unknown member

error: value of type `&{FungibleToken.Vault}` has no member `getBalance`
   --> f8d6e0586b0a20c7.LostAndFound:130:26
    |
130 |                 return ft.getBalance()
    |                           ^^^^^^^^^^ unknown member

error: cannot access `withdraw`: function requires `Withdraw` authorization, but reference only has `not specified` authorization
   --> f8d6e0586b0a20c7.LostAndFound:339:38
    |
339 |                 let repaymentVault <- refundProvider.withdraw(amount: LostAndFound.storageFees[uuid]!)
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^

error: cannot access `withdraw`: function requires `Withdraw` authorization, but reference only has `not specified` authorization
   --> f8d6e0586b0a20c7.LostAndFound:353:33
    |
353 |                     let vault <- provider.withdraw(amount: LostAndFound.storageFees[uuid]!)
    |                                  ^^^^^^^^^^^^^^^^^

error: cannot access `withdraw`: function requires `Withdraw` authorization, but reference only has `not specified` authorization
   --> f8d6e0586b0a20c7.LostAndFound:404:41
    |
404 |                 receiver.deposit(from: <-storagePayment.withdraw(amount: LostAndFound.storageFees[shelf.uuid]!))
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^

error: cannot access `withdraw`: function requires `Withdraw` authorization, but reference only has `not specified` authorization
   --> f8d6e0586b0a20c7.LostAndFound:410:41
    |
410 |                 receiver.deposit(from: <-storagePayment.withdraw(amount: LostAndFound.storageFees[bin.uuid]!))
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^

error: cannot access `withdraw`: function requires `Withdraw` authorization, but reference only has `not specified` authorization
   --> f8d6e0586b0a20c7.LostAndFound:422:39
    |
422 |             let storagePaymentVault <- storagePayment.withdraw(amount: storageFee)
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^

error: cannot access `withdraw`: function requires `Withdraw` authorization, but reference only has `not specified` authorization
   --> f8d6e0586b0a20c7.LostAndFound:445:29
    |
445 |                 let vault <- provider.withdraw(amount: LostAndFound.storageFees[uuid]!)
    |                              ^^^^^^^^^^^^^^^^^

error: too few arguments
   --> f8d6e0586b0a20c7.LostAndFound:559:25
    |
559 |             let vault <- FlowToken.createEmptyVault()
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected at least 1, got 0


, DapperUtilityCoin: failed to deploy contract DapperUtilityCoin: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 5af992a47a2adc19c7b70f8bfd65d3928d40c7df883ef968218b2fbdd1795572:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> 01cf0e2f2f715450.DapperUtilityCoin:172:15
    |
172 |         access(FungibleToken.Withdraw) fun withdraw(amount: UFix64): @DapperUtilityCoin.Vault {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> 01cf0e2f2f715450.DapperUtilityCoin:194:15
    |
194 |         access(FungibleToken.Withdraw) fun transfer(amount: UFix64, receiver: Capability<&{FungibleToken.Receiver}>) {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: contract `DapperUtilityCoin` does not conform to contract interface `ViewResolver`
 --> 01cf0e2f2f715450.DapperUtilityCoin:6:21
  |
6 | access(all) contract DapperUtilityCoin: ViewResolver  {
  |                      ^ `DapperUtilityCoin` is missing definitions for members: `getContractViews`, `resolveContractView`

error: too many arguments
   --> 01cf0e2f2f715450.DapperUtilityCoin:117:23
    |
117 |                 return FungibleTokenMetadataViews.FTVaultData(
118 |                     storagePath: self.storagePath,
119 |                     receiverPath: self.receiverPath,
120 |                     metadataPath: self.publicPath,
121 |                     providerPath: /private/exampleTokenVault,
122 |                     receiverLinkedType: Type<&{FungibleToken.Receiver}>(),
123 |                     metadataLinkedType: Type<&DapperUtilityCoin.Vault>(),
124 |                     providerLinkedType: Type<&DapperUtilityCoin.Vault>(),
125 |                     createEmptyVaultFunction: (fun(): @{FungibleToken.Vault} {
126 |                         return <-vaultRef.createEmptyVault()
127 |                     })
128 |                 )
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected up to 6, got 8

error: mismatched types
   --> 01cf0e2f2f715450.DapperUtilityCoin:121:34
    |
121 |                     providerPath: /private/exampleTokenVault,
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Type`, got `PrivatePath`

error: mismatched types
   --> 01cf0e2f2f715450.DapperUtilityCoin:123:40
    |
123 |                     metadataLinkedType: Type<&DapperUtilityCoin.Vault>(),
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `fun(): @{FungibleToken.Vault}`, got `Type`

error: incorrect argument label
   --> 01cf0e2f2f715450.DapperUtilityCoin:121:20
    |
121 |                     providerPath: /private/exampleTokenVault,
    |                     ^^^^^^^^^^^^^ expected `receiverLinkedType`, got `providerPath`

error: incorrect argument label
   --> 01cf0e2f2f715450.DapperUtilityCoin:122:20
    |
122 |                     receiverLinkedType: Type<&{FungibleToken.Receiver}>(),
    |                     ^^^^^^^^^^^^^^^^^^^ expected `metadataLinkedType`, got `receiverLinkedType`

error: incorrect argument label
   --> 01cf0e2f2f715450.DapperUtilityCoin:123:20
    |
123 |                     metadataLinkedType: Type<&DapperUtilityCoin.Vault>(),
    |                     ^^^^^^^^^^^^^^^^^^^ expected `createEmptyVaultFunction`, got `metadataLinkedType`

error: missing access modifier for function
   --> 01cf0e2f2f715450.DapperUtilityCoin:172:8
    |
172 |         access(FungibleToken.Withdraw) fun withdraw(amount: UFix64): @DapperUtilityCoin.Vault {
    |         ^

error: missing access modifier for function
   --> 01cf0e2f2f715450.DapperUtilityCoin:194:8
    |
194 |         access(FungibleToken.Withdraw) fun transfer(amount: UFix64, receiver: Capability<&{FungibleToken.Receiver}>) {
    |         ^

error: resource `DapperUtilityCoin.Vault` does not conform to resource interface `FungibleToken.Vault`
  --> 01cf0e2f2f715450.DapperUtilityCoin:56:25
   |
56 |     access(all) resource Vault: FungibleToken.Vault {
   |                          ^ `DapperUtilityCoin.Vault` is missing definitions for members: `burnCallback`
   ... 
    |
172 |         access(FungibleToken.Withdraw) fun withdraw(amount: UFix64): @DapperUtilityCoin.Vault {
    |                                                -------- mismatch here

error: resource `DapperUtilityCoin.Vault` does not conform to resource interface `FungibleToken.Vault`
  --> 01cf0e2f2f715450.DapperUtilityCoin:56:25
   |
56 |     access(all) resource Vault: FungibleToken.Vault {
   |                          ^ `DapperUtilityCoin.Vault` is missing definitions for members: `isAvailableToWithdraw`
   ... 
    |
172 |         access(FungibleToken.Withdraw) fun withdraw(amount: UFix64): @DapperUtilityCoin.Vault {
    |                                                -------- mismatch here

error: resource `DapperUtilityCoin.Vault` does not conform to resource interface `FungibleToken.Vault`
  --> 01cf0e2f2f715450.DapperUtilityCoin:56:25
   |
56 |     access(all) resource Vault: FungibleToken.Vault {
   |                          ^ `DapperUtilityCoin.Vault` is missing definitions for members: `burnCallback`


, FIND: failed to deploy contract FIND: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 700e35632854f5dee5d1eb2bda93bbf9af24bc788bd2f750229dcffd7de0a42e:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FUSD` in `f8d6e0586b0a20c7.FUSD`
 --> 179b6b1cb6755e31.FIND:2:7
  |
2 | import FUSD from 0xf8d6e0586b0a20c7
  |        ^^^^ available exported declarations are:


error: cannot find declaration `FiatToken` in `f8d6e0586b0a20c7.FiatToken`
 --> 179b6b1cb6755e31.FIND:4:7
  |
4 | import FiatToken from 0xf8d6e0586b0a20c7
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `DapperUtilityCoin` in `01cf0e2f2f715450.DapperUtilityCoin`
 --> 179b6b1cb6755e31.FIND:5:7
  |
5 | import DapperUtilityCoin from 0x01cf0e2f2f715450
  |        ^^^^^^^^^^^^^^^^^ available exported declarations are:


error: cannot find declaration `Profile` in `179b6b1cb6755e31.Profile`
 --> 179b6b1cb6755e31.FIND:6:7
  |
6 | import Profile from 0x179b6b1cb6755e31
  |        ^^^^^^^ available exported declarations are:


error: ambiguous intersection type
   --> 179b6b1cb6755e31.FIND:622:68
    |
622 |         access(account) fun move(name: String, profile: Capability<&{Profile.Public}>, to: Capability<&LeaseCollection>)
    |                                                                     ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FIND:392:55
    |
392 |         access(contract) fun move(profile: Capability<&{Profile.Public}>) {
    |                                                        ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FIND:438:38
    |
438 |         access(all) fun getProfile():&{Profile.Public}? {
    |                                       ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1292:64
     |
1292 |         access(all) fun move(name: String, profile: Capability<&{Profile.Public}>, to: Capability<&LeaseCollection>) {
     |                                                                 ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1433:74
     |
1433 |         init( validUntil:UFix64, lockedUntil:UFix64, profile: Capability<&{Profile.Public}>, name: String) {
     |                                                                           ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1428:45
     |
1428 |         access(all) var profile: Capability<&{Profile.Public}>
     |                                              ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1463:59
     |
1463 |         access(all) fun setProfile (_ profile: Capability<&{Profile.Public}>) {
     |                                                            ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1599:69
     |
1599 |         access(contract) fun move(name: String, profile: Capability<&{Profile.Public}>) {
     |                                                                      ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1609:97
     |
1609 |         access(all) fun registerUSDC(name: String, vault: @FiatToken.Vault, profile: Capability<&{Profile.Public}>,  leases: Capability<&{LeaseCollectionPublic}>) {
     |                                                                                                  ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1640:88
     |
1640 |         access(all) fun register(name: String, vault: @FUSD.Vault, profile: Capability<&{Profile.Public}>,  leases: Capability<&{LeaseCollectionPublic}>) {
     |                                                                                         ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1666:130
     |
1666 |         access(all) fun registerDapper(merchAccount: Address, name: String, vault: @DapperUtilityCoin.Vault, profile: Capability<&{Profile.Public}>, leases: Capability<&{LeaseCollectionPublic}>) {
     |                                                                                                                                   ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1695:81
     |
1695 |         access(account) fun internal_register(name: String, profile: Capability<&{Profile.Public}>,  leases: Capability<&{LeaseCollectionPublic}>) {
     |                                                                                  ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1751:55
     |
1751 |         access(account) fun profile(_ name: String) : &{Profile.Public}? {
     |                                                        ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1765:50
     |
1765 |         access(all) fun lookup(_ name: String) : &{Profile.Public}? {
     |                                                   ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FIND:149:45
    |
149 |     access(all) fun lookup(_ input:String): &{Profile.Public}? {
    |                                              ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:2110:11
     |
2110 |         if self.account.storage.borrow<&FUSD.Vault>(from: FUSD.VaultStoragePath) == nil {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:2118:27
     |
2118 |             let vaultCap = self.account.capabilities.storage.issue<&FUSD.Vault>(
2119 |                 FUSD.VaultStoragePath
2120 |             )
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FIND:152:51
    |
152 |             if let cap = account.capabilities.get<&{Profile.Public}>(Profile.publicPath) {
    |                                                    ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:152:25
    |
152 |             if let cap = account.capabilities.get<&{Profile.Public}>(Profile.publicPath) {
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:153:23
    |
153 |                 return cap.borrow()
    |                        ^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FIND:229:44
    |
229 |         let cap = account.capabilities.get<&{Profile.Public}>(Profile.publicPath)
    |                                             ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:229:18
    |
229 |         let cap = account.capabilities.get<&{Profile.Public}>(Profile.publicPath)
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:231:25
    |
231 |             let profile= cap!.borrow()!
    |                          ^^^^^^^^^^^^^

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FIND:232:179
    |
232 |             emit FungibleTokenSent(from: fromAddress, fromName: FIND.reverseLookup(fromAddress), name: to, toAddress: profile.getAddress(), message:message, tag:tag, amount:valut.balance, ftType:vault.getType().identifier)
    |                                                                                                                                                                                    ^^^^^^^^^^ unknown member

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:240:37
    |
240 |         } else if vault.getType() == Type<@FUSD.Vault>() {
    |                                      ^^^^^^^^^^^^^^^^^^^

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FIND:244:166
    |
244 |             emit FungibleTokenSent(from: fromAddress, fromName: FIND.reverseLookup(fromAddress), name: "", toAddress: address, message:message, tag:tag, amount:valut.balance, ftType:vault.getType().identifier)
    |                                                                                                                                                                       ^^^^^^^^^^ unknown member

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FIND:526:61
    |
526 |             let profile=getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()!
    |                                                              ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:526:24
    |
526 |             let profile=getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()!
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:526:24
    |
526 |             let profile=getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()!
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:540:226
    |
540 |             emit EnglishAuction(name: self.name, uuid: lease.uuid, seller: owner, sellerName:ownerName, amount: offer.getBalance(self.name), auctionReservePrice: lease.auctionReservePrice!, status: "active_ongoing", vaultType:Type<@FUSD.Vault>().identifier, buyer:bidder, buyerName:bidderName, buyerAvatar:bidderAvatar, endsAt: self.endsAt ,validUntil: lease.getLeaseExpireTime(), lockedUntil: lease.getLeaseLockedUntil(), previousBuyer:previousBuyer, previousBuyerName:previousBuyerName)
    |                                                                                                                                                                                                                                   ^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FIND:856:68
    |
856 |             let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow() ?? panic("Bidder unlinked the profile capability. bidder address : ".concat(bidder.toString()))
    |                                                                     ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:856:31
    |
856 |             let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow() ?? panic("Bidder unlinked the profile capability. bidder address : ".concat(bidder.toString()))
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:856:31
    |
856 |             let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow() ?? panic("Bidder unlinked the profile capability. bidder address : ".concat(bidder.toString()))
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:863:231
    |
863 |             emit EnglishAuction(name: name, uuid:lease.uuid, seller: owner, sellerName:FIND.reverseLookup(owner), amount: offer.getBalance(name), auctionReservePrice: lease.auctionReservePrice!, status: "active_ongoing", vaultType:Type<@FUSD.Vault>().identifier, buyer:bidder, buyerName:bidderName, buyerAvatar:bidderAvatar, endsAt: endsAt, validUntil: lease.getLeaseExpireTime(), lockedUntil: lease.getLeaseLockedUntil(), previousBuyer:nil, previousBuyerName:nil)
    |                                                                                                                                                                                                                                        ^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FIND:892:72
    |
892 |                 let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()
    |                                                                         ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:892:35
    |
892 |                 let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:892:35
    |
892 |                 let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:901:154
    |
901 |                 emit DirectOffer(name: name, uuid: lease.uuid, seller: owner, sellerName: ownerName, amount: amount, status: "cancel_rejected", vaultType:Type<@FUSD.Vault>().identifier, buyer:bidder, buyerName:bidderName, buyerAvatar: bidderAvatar, validUntil: lease.getLeaseExpireTime(), lockedUntil: lease.getLeaseLockedUntil(), previousBuyer:nil, previousBuyerName:nil)
    |                                                                                                                                                           ^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FIND:934:68
    |
934 |             let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow() ?? panic("Create a profile before you make a bid")
    |                                                                     ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:934:31
    |
934 |             let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow() ?? panic("Create a profile before you make a bid")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:934:31
    |
934 |             let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow() ?? panic("Create a profile before you make a bid")
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:944:154
    |
944 |                 emit DirectOffer(name: name, uuid: lease.uuid, seller: owner, sellerName: ownerName, amount: balance, status: "active_offered", vaultType:Type<@FUSD.Vault>().identifier, buyer:bidder, buyerName:bidderName, buyerAvatar: bidderAvatar, validUntil: lease.getLeaseExpireTime(), lockedUntil: lease.getLeaseLockedUntil(), previousBuyer:nil, previousBuyerName:nil)
    |                                                                                                                                                           ^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FIND:954:154
    |
954 |                 emit DirectOffer(name: name, uuid: lease.uuid, seller: owner, sellerName: ownerName, amount: balance, status: "active_offered", vaultType:Type<@FUSD.Vault>().identifier, buyer:bidder, buyerName:bidderName,  buyerAvatar: bidderAvatar, validUntil: lease.getLeaseExpireTime(), lockedUntil: lease.getLeaseLockedUntil(), previousBuyer:nil, previousBuyerName:nil)
    |                                                                                                                                                           ^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1007:61
     |
1007 |             let profile=getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()
     |                                                              ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1007:24
     |
1007 |             let profile=getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1007:24
     |
1007 |             let profile=getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1023:153
     |
1023 |                 emit DirectOffer(name: name, uuid:lease.uuid, seller: owner, sellerName: ownerName, amount: balance, status: "active_offered", vaultType:Type<@FUSD.Vault>().identifier, buyer:bidder, buyerName:bidderName,  buyerAvatar: bidderAvatar, validUntil: lease.getLeaseExpireTime(), lockedUntil: lease.getLeaseLockedUntil(), previousBuyer:previousBuyer, previousBuyerName:previousBuyerName)
     |                                                                                                                                                          ^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1033:154
     |
1033 |                 emit DirectOffer(name: name, uuid: lease.uuid, seller: owner, sellerName: ownerName, amount: balance, status: "active_offered", vaultType:Type<@FUSD.Vault>().identifier, buyer:bidder, buyerName:bidderName,  buyerAvatar: bidderAvatar, validUntil: lease.getLeaseExpireTime(), lockedUntil: lease.getLeaseLockedUntil(), previousBuyer:previousBuyer, previousBuyerName:previousBuyerName)
     |                                                                                                                                                           ^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1049:72
     |
1049 |                 let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()
     |                                                                         ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1049:35
     |
1049 |                 let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()
     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1049:35
     |
1049 |                 let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()
     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1056:162
     |
1056 |                 emit DirectOffer(name: name, uuid:lease.uuid, seller: owner, sellerName: ownerName, amount: cbRef.getBalance(name), status: "rejected", vaultType:Type<@FUSD.Vault>().identifier, buyer:bidder, buyerName:bidderName, buyerAvatar: bidderAvatar, validUntil: lease.getLeaseExpireTime(), lockedUntil: lease.getLeaseLockedUntil(), previousBuyer:nil, previousBuyerName:nil)
     |                                                                                                                                                                   ^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1081:72
     |
1081 |                 let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()
     |                                                                         ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1081:35
     |
1081 |                 let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()
     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1081:35
     |
1081 |                 let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()
     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1091:217
     |
1091 |                     emit EnglishAuction(name: name, uuid:lease.uuid, seller: owner, sellerName:ownerName, amount: balance, auctionReservePrice: lease.auctionReservePrice!, status: "cancel_reserved_not_met", vaultType:Type<@FUSD.Vault>().identifier, buyer:bidder, buyerName:bidderName, buyerAvatar: bidderAvatar, endsAt: auction.endsAt, validUntil: lease.getLeaseExpireTime(), lockedUntil: lease.getLeaseLockedUntil(), previousBuyer:nil, previousBuyerName:nil)
     |                                                                                                                                                                                                                          ^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1093:208
     |
1093 |                     emit EnglishAuction(name: name, uuid:lease.uuid, seller: owner, sellerName:ownerName, amount: balance, auctionReservePrice: lease.auctionReservePrice!, status: "cancel_listing", vaultType:Type<@FUSD.Vault>().identifier, buyer:bidder, buyerName:bidderName, buyerAvatar: bidderAvatar, endsAt: auction.endsAt, validUntil: lease.getLeaseExpireTime(), lockedUntil: lease.getLeaseLockedUntil(), previousBuyer:nil, previousBuyerName:nil)
     |                                                                                                                                                                                                                 ^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1102:196
     |
1102 |             emit EnglishAuction(name: name, uuid:lease.uuid, seller: owner, sellerName:ownerName, amount: 0.0, auctionReservePrice: lease.auctionReservePrice!, status: "cancel_listing", vaultType:Type<@FUSD.Vault>().identifier, buyer:nil, buyerName:nil, buyerAvatar: nil, endsAt: nil, validUntil: lease.getLeaseExpireTime(), lockedUntil: lease.getLeaseLockedUntil(), previousBuyer:nil, previousBuyerName:nil)
     |                                                                                                                                                                                                     ^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1140:73
     |
1140 |                 let newProfile= getAccount(cb.address).capabilities.get<&{Profile.Public}>(Profile.publicPath)!
     |                                                                          ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1140:32
     |
1140 |                 let newProfile= getAccount(cb.address).capabilities.get<&{Profile.Public}>(Profile.publicPath)!
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1141:28
     |
1141 |                 let avatar= newProfile.borrow()?.getAvatar() ?? panic("Create a profile before you fulfill a bid")
     |                             ^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1148:194
     |
1148 |                     emit DirectOffer(name: name, uuid: lease.uuid, seller: lease.owner!.address, sellerName: FIND.reverseLookup(lease.owner!.address), amount: soldFor, status: "sold", vaultType:Type<@FUSD.Vault>().identifier, buyer:newProfile.address, buyerName:FIND.reverseLookup(newProfile.address), buyerAvatar: avatar, validUntil: lease.getLeaseExpireTime(), lockedUntil: lease.getLeaseLockedUntil(), previousBuyer:nil, previousBuyerName:nil)
     |                                                                                                                                                                                                   ^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1150:187
     |
1150 |                     emit Sale(name: name, uuid: lease.uuid, seller: lease.owner!.address, sellerName: FIND.reverseLookup(lease.owner!.address), amount: soldFor, status: "sold", vaultType:Type<@FUSD.Vault>().identifier, buyer:newProfile.address, buyerName:FIND.reverseLookup(newProfile.address), buyerAvatar: avatar, validUntil: lease.getLeaseExpireTime(), lockedUntil: lease.getLeaseLockedUntil())
     |                                                                                                                                                                                            ^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1188:95
     |
1188 |             let newProfile= getAccount(auctionRef.latestBidCallback.address).capabilities.get<&{Profile.Public}>(Profile.publicPath)!
     |                                                                                                ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1188:28
     |
1188 |             let newProfile= getAccount(auctionRef.latestBidCallback.address).capabilities.get<&{Profile.Public}>(Profile.publicPath)!
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1189:24
     |
1189 |             let avatar= newProfile.borrow()?.getAvatar() ?? panic("Create a profile before you fulfill a bid")
     |                         ^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1196:236
     |
1196 |             emit EnglishAuction(name: name, uuid:lease.uuid, seller: lease.owner!.address, sellerName:FIND.reverseLookup(lease.owner!.address), amount: soldFor, auctionReservePrice: lease.auctionReservePrice!, status: "sold", vaultType:Type<@FUSD.Vault>().identifier, buyer:newProfile.address, buyerName:FIND.reverseLookup(newProfile.address), buyerAvatar: avatar, endsAt: self.borrowAuction(name).endsAt, validUntil: lease.getLeaseExpireTime(), lockedUntil: lease.getLeaseLockedUntil(), previousBuye... 
     |                                                                                                                                                                                                                                             ^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1233:72
     |
1233 |                 let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()
     |                                                                         ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1233:35
     |
1233 |                 let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()
     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1233:35
     |
1233 |                 let bidderProfile= getAccount(bidder).capabilities.get<&{Profile.Public}>(Profile.publicPath)!.borrow()
     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1240:165
     |
1240 |                 emit DirectOffer(name: name, uuid:tokenRef.uuid, seller: owner, sellerName: ownerName, amount: cbRef.getBalance(name), status: "rejected", vaultType:Type<@FUSD.Vault>().identifier, buyer:bidder, buyerName:bidderName, buyerAvatar: bidderAvatar, validUntil: tokenRef.getLeaseExpireTime(), lockedUntil: tokenRef.getLeaseLockedUntil(), previousBuyer:nil, previousBuyerName:nil)
     |                                                                                                                                                                      ^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1249:270
     |
1249 |             emit EnglishAuction(name: name, uuid: tokenRef.uuid, seller: self.owner!.address, sellerName:FIND.reverseLookup(self.owner!.address), amount: tokenRef.auctionStartPrice!, auctionReservePrice: tokenRef.auctionReservePrice!, status: "active_listed", vaultType:Type<@FUSD.Vault>().identifier, buyer:nil, buyerName:nil, buyerAvatar: nil, endsAt: nil, validUntil: tokenRef.getLeaseExpireTime(), lockedUntil: tokenRef.getLeaseLockedUntil(), previousBuyer:nil, previousBuyerName:nil)
     |                                                                                                                                                                                                                                                                               ^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1264:201
     |
1264 |             emit Sale(name: name, uuid: tokenRef.uuid, seller: self.owner!.address, sellerName: FIND.reverseLookup(self.owner!.address), amount: tokenRef.salePrice!, status: "active_listed", vaultType:Type<@FUSD.Vault>().identifier, buyer:nil, buyerName:nil, buyerAvatar: nil, validUntil: tokenRef.getLeaseExpireTime(), lockedUntil: tokenRef.getLeaseLockedUntil())
     |                                                                                                                                                                                                          ^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1287:193
     |
1287 |             emit Sale(name: name, uuid:tokenRef.uuid, seller: self.owner!.address, sellerName: FIND.reverseLookup(self.owner!.address), amount: tokenRef.salePrice!, status: "cancel", vaultType:Type<@FUSD.Vault>().identifier, buyer:nil, buyerName:nil, buyerAvatar: nil, validUntil: tokenRef.getLeaseExpireTime(), lockedUntil: tokenRef.getLeaseLockedUntil())
     |                                                                                                                                                                                                  ^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1358:59
     |
1358 |             let profileCap = self.owner!.capabilities.get<&{Profile.Public}>(Profile.publicPath)!
     |                                                            ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1358:29
     |
1358 |             let profileCap = self.owner!.capabilities.get<&{Profile.Public}>(Profile.publicPath)!
     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1373:59
     |
1373 |             let profileCap = self.owner!.capabilities.get<&{Profile.Public}>(Profile.publicPath)!
     |                                                            ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1373:29
     |
1373 |             let profileCap = self.owner!.capabilities.get<&{Profile.Public}>(Profile.publicPath)!
     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FIND:1388:59
     |
1388 |             let profileCap = self.owner!.capabilities.get<&{Profile.Public}>(Profile.publicPath)!
     |                                                            ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FIND:1388:29
     |
1388 |             let profileCap = self.owner!.capabilities.get<&{Profile.Public}>(Profile.publicPath)!
     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find type in this scope: `FungibleToken.Withdraw`
    --> 179b6b1cb6755e31.FIND:1883:47
     |
1883 |             let vaultRef = &bid.vault as auth (FungibleToken.Withdraw) &{FungibleToken.Vault}
     |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot access `withdraw`: function requires `Withdraw` authorization, but reference only has `not specified` authorization
    --> 179b6b1cb6755e31.FIND:1889:26
     |
1889 |             let vault  <- vaultRef.withdraw(amount: vaultRef.getBalance())
     |                           ^^^^^^^^^^^^^^^^^

error: value of type `auth(not specified) &{FungibleToken.Vault}` has no member `getBalance`
    --> 179b6b1cb6755e31.FIND:1889:61
     |
1889 |             let vault  <- vaultRef.withdraw(amount: vaultRef.getBalance())
     |                                                              ^^^^^^^^^^ unknown member

error: cannot find type in this scope: `FungibleToken.Withdraw`
    --> 179b6b1cb6755e31.FIND:1901:47
     |
1901 |             let vaultRef = &bid.vault as auth (FungibleToken.Withdraw) &{FungibleToken.Vault}
     |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot access `withdraw`: function requires `Withdraw` authorization, but reference only has `not specified` authorization
    --> 179b6b1cb6755e31.FIND:1902:53
     |
1902 |             self.receiver.borrow()!.deposit(from: <- vaultRef.withdraw(amount: vaultRef.getBalance()))
     |                                                      ^^^^^^^^^^^^^^^^^

error: value of type `auth(not specified) &{FungibleToken.Vault}` has no member `getBalance`
    --> 179b6b1cb6755e31.FIND:1902:88
     |
1902 |             self.receiver.borrow()!.deposit(from: <- vaultRef.withdraw(amount: vaultRef.getBalance()))
     |                                                                                         ^^^^^^^^^^ unknown member

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
    --> 179b6b1cb6755e31.FIND:1947:32
     |
1947 |             let balance = valut.balance
     |                                 ^^^^^^^^^^ unknown member


, FindLeaseMarketAuctionSoft: failed to deploy contract FindLeaseMarketAuctionSoft: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 39b1c7ddd462c1425c689a554973d98ab87cbf38c4badaf38f7a2c5d66202ba4:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
 --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:4:7
  |
4 | import FindViews from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:6:7
  |
6 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot find declaration `FindMarket` in `179b6b1cb6755e31.FindMarket`
 --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:7:7
  |
7 | import FindMarket from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindLeaseMarket` in `179b6b1cb6755e31.FindLeaseMarket`
 --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:8:7
  |
8 | import FindLeaseMarket from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^^^^^^ available exported declarations are:


error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:232:46
    |
232 |         init (_ tenantCapability: Capability<&{FindMarket.TenantPublic}>) {
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:230:59
    |
230 |         access(contract) let tenantCapability: Capability<&{FindMarket.TenantPublic}>
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:237:40
    |
237 |         access(self) fun getTenant() : &{FindMarket.TenantPublic} {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:512:58
    |
512 |         access(all) fun borrowSaleItem(_ name: String) : &{FindLeaseMarket.SaleItem} {
    |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:575:92
    |
575 |         init(receiver: Capability<&{FungibleToken.Receiver}>, tenantCapability: Capability<&{FindMarket.TenantPublic}>) {
    |                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:572:59
    |
572 |         access(contract) let tenantCapability: Capability<&{FindMarket.TenantPublic}>
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:581:40
    |
581 |         access(self) fun getTenant() : &{FindMarket.TenantPublic} {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:671:56
    |
671 |         access(all) fun borrowBidItem(_ name: String): &{FindLeaseMarket.Bid} {
    |                                                         ^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:688:82
    |
688 |     access(all) fun createEmptySaleItemCollection(_ tenantCapability: Capability<&{FindMarket.TenantPublic}>) : @SaleItemCollection {
    |                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:692:130
    |
692 |     access(all) fun createEmptyMarketBidCollection(receiver: Capability<&{FungibleToken.Receiver}>, tenantCapability: Capability<&{FindMarket.TenantPublic}>) : @MarketBidCollection {
    |                                                                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:175:19
    |
175 |             return Type<@FIND.Lease>()
    |                    ^^^^^^^^^^^^^^^^^^^

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:438:21
    |
438 |             if valut.balance < saleItem.auctionReservePrice {
    |                      ^^^^^^^^^^ unknown member

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:439:114
    |
439 |                 panic("cannot fulfill auction reserve price was not met, cancel it without a vault ".concat(valut.balance.toString()).concat(" < ").concat(saleItem.auctionReservePrice.toString()))
    |                                                                                                                   ^^^^^^^^^^ unknown member

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:516:42
    |
516 |             return (&self.items[name] as &{FindLeaseMarket.SaleItem}?)!
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketAuctionSoft:675:41
    |
675 |             return (&self.bids[name] as &{FindLeaseMarket.Bid}?)!
    |                                          ^^^^^^^^^^^^^^^^^^^^^


, FindMarketDirectOfferSoft: failed to deploy contract FindMarketDirectOfferSoft: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> c821bdae1d87269768d491308b8da959109b353c4d2b5b783c3966fba678c680:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
 --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:5:7
  |
5 | import FindViews from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:8:7
  |
8 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot find declaration `FindMarket` in `179b6b1cb6755e31.FindMarket`
 --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:9:7
  |
9 | import FindMarket from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^ available exported declarations are:


error: cannot find declaration `Profile` in `179b6b1cb6755e31.Profile`
  --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:10:7
   |
10 | import Profile from 0x179b6b1cb6755e31
   |        ^^^^^^^ available exported declarations are:


error: ambiguous intersection type
  --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:26:22
   |
26 |         init(pointer: {FindViews.Pointer}, callback: Capability<&MarketBidCollection>, validUntil: UFix64?, saleItemExtraField: {String : AnyStruct}) {
   |                       ^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
  --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:18:38
   |
18 |         access(contract) var pointer: {FindViews.Pointer}
   |                                       ^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:193:46
    |
193 |         init (_ tenantCapability: Capability<&{FindMarket.TenantPublic}>) {
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:191:59
    |
191 |         access(contract) let tenantCapability: Capability<&{FindMarket.TenantPublic}>
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:198:40
    |
198 |         access(self) fun getTenant() : &{FindMarket.TenantPublic} {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:518:56
    |
518 |         access(all) fun borrowSaleItem(_ id: UInt64) : &{FindMarket.SaleItem} {
    |                                                         ^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:590:92
    |
590 |         init(receiver: Capability<&{FungibleToken.Receiver}>, tenantCapability: Capability<&{FindMarket.TenantPublic}>) {
    |                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:587:59
    |
587 |         access(contract) let tenantCapability: Capability<&{FindMarket.TenantPublic}>
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:596:40
    |
596 |         access(self) fun getTenant() : &{FindMarket.TenantPublic} {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:728:54
    |
728 |         access(all) fun borrowBidItem(_ id: UInt64): &{FindMarket.Bid} {
    |                                                       ^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:743:82
    |
743 |     access(all) fun createEmptySaleItemCollection(_ tenantCapability: Capability<&{FindMarket.TenantPublic}>) : @SaleItemCollection {
    |                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:747:130
    |
747 |     access(all) fun createEmptyMarketBidCollection(receiver: Capability<&{FungibleToken.Receiver}>, tenantCapability: Capability<&{FindMarket.TenantPublic}>) : @MarketBidCollection {
    |                                                                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:522:40
    |
522 |             return (&self.items[id] as &{FindMarket.SaleItem}?)!
    |                                         ^^^^^^^^^^^^^^^^^^^^^

error: value of type `{NonFungibleToken.NFT}` has no member `getID`
   --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:605:24
    |
605 |             let id= nft.getID()
    |                         ^^^^^ unknown member

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarketDirectOfferSoft:732:39
    |
732 |             return (&self.bids[id] as &{FindMarket.Bid}?)!
    |                                        ^^^^^^^^^^^^^^^^


, NFGv3: failed to deploy contract NFGv3: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 3fcd0fb14963a26ad0c9963060ad39585784da3ba2797f34c1f214856c425c98:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindForge` in `179b6b1cb6755e31.FindForge`
 --> 179b6b1cb6755e31.NFGv3:4:7
  |
4 | import FindForge from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.NFGv3:185:15
    |
185 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: contract `NFGv3` does not conform to contract interface `ViewResolver`
 --> 179b6b1cb6755e31.NFGv3:7:21
  |
7 | access(all) contract NFGv3: ViewResolver {
  |                      ^ `NFGv3` is missing definitions for members: `getContractViews`, `resolveContractView`

error: too many arguments
   --> 179b6b1cb6755e31.NFGv3:128:23
    |
128 |                 return MetadataViews.NFTCollectionData(
129 |                     storagePath: NFGv3.CollectionStoragePath,
130 |                     publicPath: NFGv3.CollectionPublicPath,
131 |                     providerPath: /private/NFGv3Collection,
132 |                     publicCollection: Type<&NFGv3.Collection>(),
133 |                     publicLinkedType: Type<&NFGv3.Collection>(),
134 |                     providerLinkedType: Type<auth(NonFungibleToken.Withdraw) &NFGv3.Collection>(),
135 |                     createEmptyCollectionFunction: (fun(): @{NonFungibleToken.Collection} {return <- NFGv3.createEmptyCollection()})
136 |                 )
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected up to 5, got 7

error: mismatched types
   --> 179b6b1cb6755e31.NFGv3:131:34
    |
131 |                     providerPath: /private/NFGv3Collection,
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^ expected `Type`, got `PrivatePath`

error: mismatched types
   --> 179b6b1cb6755e31.NFGv3:133:38
    |
133 |                     publicLinkedType: Type<&NFGv3.Collection>(),
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `fun(): @{NonFungibleToken.Collection}`, got `Type`

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.NFGv3:134:50
    |
134 |                     providerLinkedType: Type<auth(NonFungibleToken.Withdraw) &NFGv3.Collection>(),
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: incorrect argument label
   --> 179b6b1cb6755e31.NFGv3:131:20
    |
131 |                     providerPath: /private/NFGv3Collection,
    |                     ^^^^^^^^^^^^^ expected `publicCollection`, got `providerPath`

error: incorrect argument label
   --> 179b6b1cb6755e31.NFGv3:132:20
    |
132 |                     publicCollection: Type<&NFGv3.Collection>(),
    |                     ^^^^^^^^^^^^^^^^^ expected `publicLinkedType`, got `publicCollection`

error: incorrect argument label
   --> 179b6b1cb6755e31.NFGv3:133:20
    |
133 |                     publicLinkedType: Type<&NFGv3.Collection>(),
    |                     ^^^^^^^^^^^^^^^^^ expected `createEmptyCollectionFunction`, got `publicLinkedType`

error: resource `NFGv3.NFT` does not conform to resource interface `NonFungibleToken.NFT`
  --> 179b6b1cb6755e31.NFGv3:47:25
   |
47 |     access(all) resource NFT: NonFungibleToken.NFT, ViewResolver.Resolver {
   |                          ^ `NFGv3.NFT` is missing definitions for members: `createEmptyCollection`

error: missing access modifier for function
   --> 179b6b1cb6755e31.NFGv3:185:8
    |
185 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |         ^

error: resource `NFGv3.Collection` does not conform to resource interface `NonFungibleToken.Provider`
   --> 179b6b1cb6755e31.NFGv3:170:25
    |
170 |     access(all) resource Collection: NonFungibleToken.Provider, NonFungibleToken.Receiver, NonFungibleToken.Collection, ViewResolver.ResolverCollection {
    |                          ^
   ... 
    |
185 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                                                   -------- mismatch here

error: missing access modifier for function
   --> 179b6b1cb6755e31.NFGv3:267:8
    |
267 |         access(FindForge.ForgeOwner) fun mint(platform: FindForge.MinterPlatform, data: AnyStruct, verifier: &FindForge.Verifier) : @{NonFungibleToken.NFT} {
    |         ^

error: missing access modifier for function
   --> 179b6b1cb6755e31.NFGv3:285:8
    |
285 |         access(FindForge.ForgeOwner) fun addContractData(platform: FindForge.MinterPlatform, data: AnyStruct, verifier: &FindForge.Verifier) {
    |         ^


, FlowUtilityToken: failed to deploy contract FlowUtilityToken: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> a2d9b203282f41ce78cef28f3c4e5ae58d3c7dc98897416c5c1c362640ee8443:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> 01cf0e2f2f715450.FlowUtilityToken:172:15
    |
172 |         access(FungibleToken.Withdraw) fun withdraw(amount: UFix64): @FlowUtilityToken.Vault {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `FungibleToken.Withdraw`
   --> 01cf0e2f2f715450.FlowUtilityToken:194:15
    |
194 |         access(FungibleToken.Withdraw) fun transfer(amount: UFix64, receiver: Capability<&{FungibleToken.Receiver}>) {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: contract `FlowUtilityToken` does not conform to contract interface `ViewResolver`
 --> 01cf0e2f2f715450.FlowUtilityToken:6:21
  |
6 | access(all) contract FlowUtilityToken: ViewResolver  {
  |                      ^ `FlowUtilityToken` is missing definitions for members: `getContractViews`, `resolveContractView`

error: too many arguments
   --> 01cf0e2f2f715450.FlowUtilityToken:117:23
    |
117 |                 return FungibleTokenMetadataViews.FTVaultData(
118 |                     storagePath: self.storagePath,
119 |                     receiverPath: self.receiverPath,
120 |                     metadataPath: self.publicPath,
121 |                     providerPath: /private/exampleTokenVault,
122 |                     receiverLinkedType: Type<&{FungibleToken.Receiver}>(),
123 |                     metadataLinkedType: Type<&FlowUtilityToken.Vault>(),
124 |                     providerLinkedType: Type<&FlowUtilityToken.Vault>(),
125 |                     createEmptyVaultFunction: (fun(): @{FungibleToken.Vault} {
126 |                         return <-vaultRef.createEmptyVault()
127 |                     })
128 |                 )
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected up to 6, got 8

error: mismatched types
   --> 01cf0e2f2f715450.FlowUtilityToken:121:34
    |
121 |                     providerPath: /private/exampleTokenVault,
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Type`, got `PrivatePath`

error: mismatched types
   --> 01cf0e2f2f715450.FlowUtilityToken:123:40
    |
123 |                     metadataLinkedType: Type<&FlowUtilityToken.Vault>(),
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `fun(): @{FungibleToken.Vault}`, got `Type`

error: incorrect argument label
   --> 01cf0e2f2f715450.FlowUtilityToken:121:20
    |
121 |                     providerPath: /private/exampleTokenVault,
    |                     ^^^^^^^^^^^^^ expected `receiverLinkedType`, got `providerPath`

error: incorrect argument label
   --> 01cf0e2f2f715450.FlowUtilityToken:122:20
    |
122 |                     receiverLinkedType: Type<&{FungibleToken.Receiver}>(),
    |                     ^^^^^^^^^^^^^^^^^^^ expected `metadataLinkedType`, got `receiverLinkedType`

error: incorrect argument label
   --> 01cf0e2f2f715450.FlowUtilityToken:123:20
    |
123 |                     metadataLinkedType: Type<&FlowUtilityToken.Vault>(),
    |                     ^^^^^^^^^^^^^^^^^^^ expected `createEmptyVaultFunction`, got `metadataLinkedType`

error: missing access modifier for function
   --> 01cf0e2f2f715450.FlowUtilityToken:172:8
    |
172 |         access(FungibleToken.Withdraw) fun withdraw(amount: UFix64): @FlowUtilityToken.Vault {
    |         ^

error: missing access modifier for function
   --> 01cf0e2f2f715450.FlowUtilityToken:194:8
    |
194 |         access(FungibleToken.Withdraw) fun transfer(amount: UFix64, receiver: Capability<&{FungibleToken.Receiver}>) {
    |         ^

error: resource `FlowUtilityToken.Vault` does not conform to resource interface `FungibleToken.Vault`
  --> 01cf0e2f2f715450.FlowUtilityToken:56:25
   |
56 |     access(all) resource Vault: FungibleToken.Vault {
   |                          ^ `FlowUtilityToken.Vault` is missing definitions for members: `burnCallback`
   ... 
    |
172 |         access(FungibleToken.Withdraw) fun withdraw(amount: UFix64): @FlowUtilityToken.Vault {
    |                                                -------- mismatch here

error: resource `FlowUtilityToken.Vault` does not conform to resource interface `FungibleToken.Vault`
  --> 01cf0e2f2f715450.FlowUtilityToken:56:25
   |
56 |     access(all) resource Vault: FungibleToken.Vault {
   |                          ^ `FlowUtilityToken.Vault` is missing definitions for members: `isAvailableToWithdraw`
   ... 
    |
172 |         access(FungibleToken.Withdraw) fun withdraw(amount: UFix64): @FlowUtilityToken.Vault {
    |                                                -------- mismatch here

error: resource `FlowUtilityToken.Vault` does not conform to resource interface `FungibleToken.Vault`
  --> 01cf0e2f2f715450.FlowUtilityToken:56:25
   |
56 |     access(all) resource Vault: FungibleToken.Vault {
   |                          ^ `FlowUtilityToken.Vault` is missing definitions for members: `burnCallback`


, Profile: failed to deploy contract Profile: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> a7be0137faa8c85442827175bd4c43dc47e1e9ade4d11e558d542a93e17b40ac:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: value of type `&{FungibleToken.Vault}?` has no member `getBalance`
   --> 179b6b1cb6755e31.Profile:124:50
    |
124 |             self.balance=wallet.balance.borrow()?.getBalance() ?? 0.0
    |                                                   ^^^^^^^^^^ unknown member

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.Profile:436:215
    |
436 |                 let ref = self.wallets[walletIndexCache!].receiver.borrow() ?? panic("This vault is not set up. ".concat(from.getType().identifier).concat(self.owner!.address.toString()).concat("  .  ").concat(from.getBalance().toString()))
    |                                                                                                                                                                                                                        ^^^^^^^^^^ unknown member

error: value of type `{FungibleToken.Vault}` has no member `getBalance`
   --> 179b6b1cb6755e31.Profile:444:189
    |
444 |                     let ref = w.receiver.borrow() ?? panic("This vault is not set up. ".concat(from.getType().identifier).concat(self.owner!.address.toString()).concat("  .  ").concat(from.getBalance().toString()))
    |                                                                                                                                                                                              ^^^^^^^^^^ unknown member


, FindMarket: failed to deploy contract FindMarket: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 6dc533af8d7463533a0c44b3c184967b82d0cffa8394d378d58d91a561ffc47b:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `Profile` in `179b6b1cb6755e31.Profile`
 --> 179b6b1cb6755e31.FindMarket:3:7
  |
3 | import Profile from 0x179b6b1cb6755e31
  |        ^^^^^^^ available exported declarations are:


error: cannot find declaration `TokenForwarding` in `f8d6e0586b0a20c7.TokenForwarding`
  --> 179b6b1cb6755e31.FindMarket:12:7
   |
12 | import TokenForwarding from 0xf8d6e0586b0a20c7
   |        ^^^^^^^^^^^^^^^ available exported declarations are:


error: value of type `{FungibleToken.Vault}` has no member `getBalance`
    --> 179b6b1cb6755e31.FindMarket:1334:22
     |
1334 |     let soldFor=valut.balance
     |                       ^^^^^^^^^^ unknown member

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FindMarket:1410:13
     |
1410 |         case Type<@Profile.User>():
     |              ^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FindMarket:1426:13
     |
1426 |         case Type<@TokenForwarding.Forwarder>() :
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
    --> 179b6b1cb6755e31.FindMarket:1411:77
     |
1411 |             if let ProfileRef = getAccount(cap.address).capabilities.borrow<&{Profile.Public}>(Profile.publicPath) {
     |                                                                              ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
    --> 179b6b1cb6755e31.FindMarket:1411:32
     |
1411 |             if let ProfileRef = getAccount(cap.address).capabilities.borrow<&{Profile.Public}>(Profile.publicPath) {
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindMarket:953:92
    |
953 |     let profile = getAccount(FindMarket.tenantNameAddress[self.name]!).capabilities.borrow<&{Profile.Public}>(Profile.publicPath) ?? panic("Cannot get reference to Profile to check honour banning. Tenant Name : ".concat(self.name))
    |                                                                                             ^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.FindMarket:953:18
    |
953 |     let profile = getAccount(FindMarket.tenantNameAddress[self.name]!).capabilities.borrow<&{Profile.Public}>(Profile.publicPath) ?? panic("Cannot get reference to Profile to check honour banning. Tenant Name : ".concat(self.name))
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


, Flomies: failed to deploy contract Flomies: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> febdfff7256e38b4be59edc9a795f4acd4bb112a50730ccdb6104f2d582f43aa:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindForge` in `179b6b1cb6755e31.FindForge`
 --> 179b6b1cb6755e31.Flomies:4:7
  |
4 | import FindForge from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindPack` in `179b6b1cb6755e31.FindPack`
 --> 179b6b1cb6755e31.Flomies:5:7
  |
5 | import FindPack from 0x179b6b1cb6755e31
  |        ^^^^^^^^ available exported declarations are:


error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.Flomies:217:9
    |
217 | 		access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    | 		       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: ambiguous intersection type
   --> 179b6b1cb6755e31.Flomies:393:38
    |
393 | 	access(account) fun createForge() : @{FindForge.Forge} {
    | 	                                     ^^^^^^^^^^^^^^^^^

error: contract `Flomies` does not conform to contract interface `ViewResolver`
 --> 179b6b1cb6755e31.Flomies:9:21
  |
9 | access(all) contract Flomies: ViewResolver{
  |                      ^ `Flomies` is missing definitions for members: `getContractViews`, `resolveContractView`

error: cannot infer type parameter: `T`
  --> 179b6b1cb6755e31.Flomies:80:3
   |
80 | 			Type<FindPack.PackRevealData>(), 
   | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.Flomies:158:8
    |
158 | 			case Type<FindPack.PackRevealData>():
    | 			     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: too many arguments
   --> 179b6b1cb6755e31.Flomies:146:11
    |
146 | 				return MetadataViews.NFTCollectionData(storagePath: Flomies.CollectionStoragePath,
147 | 				publicPath: Flomies.CollectionPublicPath,
148 | 				providerPath: /private/FlomiesCollection,
149 | 				publicCollection: Type<&Collection>(),
150 | 				publicLinkedType: Type<&Collection>(),
151 | 				providerLinkedType: Type<auth(NonFungibleToken.Withdraw) &Collection>(),
152 | 				createEmptyCollectionFunction: (fun(): @{NonFungibleToken.Collection} {return <- Flomies.createEmptyCollection()}))
    | 				       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected up to 5, got 7

error: mismatched types
   --> 179b6b1cb6755e31.Flomies:148:18
    |
148 | 				providerPath: /private/FlomiesCollection,
    | 				              ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Type`, got `PrivatePath`

error: mismatched types
   --> 179b6b1cb6755e31.Flomies:150:22
    |
150 | 				publicLinkedType: Type<&Collection>(),
    | 				                  ^^^^^^^^^^^^^^^^^^^ expected `fun(): @{NonFungibleToken.Collection}`, got `Type`

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.Flomies:151:34
    |
151 | 				providerLinkedType: Type<auth(NonFungibleToken.Withdraw) &Collection>(),
    | 				                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: incorrect argument label
   --> 179b6b1cb6755e31.Flomies:148:4
    |
148 | 				providerPath: /private/FlomiesCollection,
    | 				^^^^^^^^^^^^^ expected `publicCollection`, got `providerPath`

error: incorrect argument label
   --> 179b6b1cb6755e31.Flomies:149:4
    |
149 | 				publicCollection: Type<&Collection>(),
    | 				^^^^^^^^^^^^^^^^^ expected `publicLinkedType`, got `publicCollection`

error: incorrect argument label
   --> 179b6b1cb6755e31.Flomies:150:4
    |
150 | 				publicLinkedType: Type<&Collection>(),
    | 				^^^^^^^^^^^^^^^^^ expected `createEmptyCollectionFunction`, got `publicLinkedType`

error: resource `Flomies.NFT` does not conform to resource interface `NonFungibleToken.NFT`
  --> 179b6b1cb6755e31.Flomies:50:22
   |
50 | 	access(all) resource NFT: NonFungibleToken.NFT, ViewResolver.Resolver {
   | 	                     ^ `Flomies.NFT` is missing definitions for members: `createEmptyCollection`

error: missing access modifier for function
   --> 179b6b1cb6755e31.Flomies:217:2
    |
217 | 		access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    | 		^

error: resource `Flomies.Collection` does not conform to resource interface `NonFungibleToken.Provider`
   --> 179b6b1cb6755e31.Flomies:202:22
    |
202 | 	access(all) resource Collection: NonFungibleToken.Provider, NonFungibleToken.Receiver, NonFungibleToken.Collection, ViewResolver.ResolverCollection {
    | 	                     ^
   ... 
    |
217 | 		access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    | 		                                          -------- mismatch here

error: missing access modifier for function
   --> 179b6b1cb6755e31.Flomies:360:2
    |
360 | 		access(FindForge.ForgeOwner) fun mint(platform: FindForge.MinterPlatform, data: AnyStruct, verifier: &FindForge.Verifier) : @{NonFungibleToken.NFT} {
    | 		^

error: missing access modifier for function
   --> 179b6b1cb6755e31.Flomies:374:2
    |
374 | 		access(FindForge.ForgeOwner) fun addContractData(platform: FindForge.MinterPlatform, data: AnyStruct, verifier: &FindForge.Verifier) {
    | 		^


, PartyFavorz: failed to deploy contract PartyFavorz: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 2bcac0221475f5ed33506aa31ca7e21624554fd31bb11c2f8942ffc40a79bbe6:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindForge` in `179b6b1cb6755e31.FindForge`
 --> 179b6b1cb6755e31.PartyFavorz:4:7
  |
4 | import FindForge from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindPack` in `179b6b1cb6755e31.FindPack`
 --> 179b6b1cb6755e31.PartyFavorz:5:7
  |
5 | import FindPack from 0x179b6b1cb6755e31
  |        ^^^^^^^^ available exported declarations are:


error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.PartyFavorz:241:9
    |
241 | 		access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    | 		       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: contract `PartyFavorz` does not conform to contract interface `ViewResolver`
 --> 179b6b1cb6755e31.PartyFavorz:9:21
  |
9 | access(all) contract PartyFavorz: ViewResolver {
  |                      ^ `PartyFavorz` is missing definitions for members: `getContractViews`, `resolveContractView`

error: cannot infer type parameter: `T`
  --> 179b6b1cb6755e31.PartyFavorz:78:3
   |
78 | 			Type<FindPack.PackRevealData>()
   | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
  --> 179b6b1cb6755e31.PartyFavorz:87:8
   |
87 | 			case Type<FindPack.PackRevealData>():
   | 			     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: too many arguments
   --> 179b6b1cb6755e31.PartyFavorz:129:11
    |
129 | 				return MetadataViews.NFTCollectionData(
130 | 					storagePath: PartyFavorz.CollectionStoragePath,
131 | 					publicPath: PartyFavorz.CollectionPublicPath,
132 | 					providerPath: /private/PartyFavorzCollection,
133 | 					publicCollection: Type<&PartyFavorz.Collection>(),
134 | 					publicLinkedType: Type<&PartyFavorz.Collection>(),
135 | 					providerLinkedType: Type<auth (NonFungibleToken.Withdraw) &PartyFavorz.Collection>(),
136 | 					createEmptyCollectionFunction: (fun(): @{NonFungibleToken.Collection} {return <- PartyFavorz.createEmptyCollection()})
137 | 				)
    | 				^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected up to 5, got 7

error: mismatched types
   --> 179b6b1cb6755e31.PartyFavorz:132:19
    |
132 | 					providerPath: /private/PartyFavorzCollection,
    | 					              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Type`, got `PrivatePath`

error: mismatched types
   --> 179b6b1cb6755e31.PartyFavorz:134:23
    |
134 | 					publicLinkedType: Type<&PartyFavorz.Collection>(),
    | 					                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `fun(): @{NonFungibleToken.Collection}`, got `Type`

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.PartyFavorz:135:36
    |
135 | 					providerLinkedType: Type<auth (NonFungibleToken.Withdraw) &PartyFavorz.Collection>(),
    | 					                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: incorrect argument label
   --> 179b6b1cb6755e31.PartyFavorz:132:5
    |
132 | 					providerPath: /private/PartyFavorzCollection,
    | 					^^^^^^^^^^^^^ expected `publicCollection`, got `providerPath`

error: incorrect argument label
   --> 179b6b1cb6755e31.PartyFavorz:133:5
    |
133 | 					publicCollection: Type<&PartyFavorz.Collection>(),
    | 					^^^^^^^^^^^^^^^^^ expected `publicLinkedType`, got `publicCollection`

error: incorrect argument label
   --> 179b6b1cb6755e31.PartyFavorz:134:5
    |
134 | 					publicLinkedType: Type<&PartyFavorz.Collection>(),
    | 					^^^^^^^^^^^^^^^^^ expected `createEmptyCollectionFunction`, got `publicLinkedType`

error: resource `PartyFavorz.NFT` does not conform to resource interface `NonFungibleToken.NFT`
  --> 179b6b1cb6755e31.PartyFavorz:44:22
   |
44 | 	access(all) resource NFT: NonFungibleToken.NFT, ViewResolver.Resolver {
   | 	                     ^ `PartyFavorz.NFT` is missing definitions for members: `createEmptyCollection`

error: missing access modifier for function
   --> 179b6b1cb6755e31.PartyFavorz:241:2
    |
241 | 		access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    | 		^

error: resource `PartyFavorz.Collection` does not conform to resource interface `NonFungibleToken.Provider`
   --> 179b6b1cb6755e31.PartyFavorz:226:22
    |
226 | 	access(all) resource Collection: NonFungibleToken.Provider, NonFungibleToken.Receiver, NonFungibleToken.Collection, ViewResolver.ResolverCollection {
    | 	                     ^
   ... 
    |
241 | 		access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    | 		                                          -------- mismatch here

error: missing access modifier for function
   --> 179b6b1cb6755e31.PartyFavorz:323:2
    |
323 | 		access(FindForge.ForgeOwner) fun mint(platform: FindForge.MinterPlatform, data: AnyStruct, verifier: &FindForge.Verifier) : @{NonFungibleToken.NFT} {
    | 		^

error: missing access modifier for function
   --> 179b6b1cb6755e31.PartyFavorz:343:2
    |
343 | 		access(FindForge.ForgeOwner) fun addContractData(platform: FindForge.MinterPlatform, data: AnyStruct, verifier: &FindForge.Verifier) {
    | 		^


, FindLeaseMarketDirectOfferSoft: failed to deploy contract FindLeaseMarketDirectOfferSoft: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 64fef4416a448f4ca37334d2cd3549b1abd0f5291d976d29bc70bf82fa3d0165:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
 --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:5:7
  |
5 | import FindViews from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:8:7
  |
8 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot find declaration `FindMarket` in `179b6b1cb6755e31.FindMarket`
 --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:9:7
  |
9 | import FindMarket from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindLeaseMarket` in `179b6b1cb6755e31.FindLeaseMarket`
  --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:10:7
   |
10 | import FindLeaseMarket from 0x179b6b1cb6755e31
   |        ^^^^^^^^^^^^^^^ available exported declarations are:


error: ambiguous intersection type
  --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:18:38
   |
18 |         access(contract) var pointer: {FindLeaseMarket.LeasePointer}
   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:173:46
    |
173 |         init (_ tenantCapability: Capability<&{FindMarket.TenantPublic}>) {
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:171:59
    |
171 |         access(contract) let tenantCapability: Capability<&{FindMarket.TenantPublic}>
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:178:40
    |
178 |         access(self) fun getTenant() : &{FindMarket.TenantPublic} {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:395:58
    |
395 |         access(all) fun borrowSaleItem(_ name: String) : &{FindLeaseMarket.SaleItem} {
    |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:466:92
    |
466 |         init(receiver: Capability<&{FungibleToken.Receiver}>, tenantCapability: Capability<&{FindMarket.TenantPublic}>) {
    |                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:463:59
    |
463 |         access(contract) let tenantCapability: Capability<&{FindMarket.TenantPublic}>
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:472:40
    |
472 |         access(self) fun getTenant() : &{FindMarket.TenantPublic} {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:581:56
    |
581 |         access(all) fun borrowBidItem(_ name: String): &{FindLeaseMarket.Bid} {
    |                                                         ^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:595:82
    |
595 |     access(all) fun createEmptySaleItemCollection(_ tenantCapability: Capability<&{FindMarket.TenantPublic}>) : @SaleItemCollection {
    |                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:599:130
    |
599 |     access(all) fun createEmptyMarketBidCollection(receiver: Capability<&{FungibleToken.Receiver}>, tenantCapability: Capability<&{FindMarket.TenantPublic}>) : @MarketBidCollection {
    |                                                                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
  --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:64:19
   |
64 |             return Type<@FIND.Lease>()
   |                    ^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:399:42
    |
399 |             return (&self.items[name] as &{FindLeaseMarket.SaleItem}?)!
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: ambiguous intersection type
   --> 179b6b1cb6755e31.FindLeaseMarketDirectOfferSoft:585:41
    |
585 |             return (&self.bids[name] as &{FindLeaseMarket.Bid}?)!
    |                                          ^^^^^^^^^^^^^^^^^^^^^


, FindAirdropper: failed to deploy contract FindAirdropper: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 50f71acb5b6faf08f1b9236b8ee9df2507908a047b016cd38c6dd9ea22ab1571:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FIND` in `179b6b1cb6755e31.FIND`
 --> 179b6b1cb6755e31.FindAirdropper:2:7
  |
2 | import FIND from 0x179b6b1cb6755e31
  |        ^^^^ available exported declarations are:


error: cannot find declaration `FindMarket` in `179b6b1cb6755e31.FindMarket`
 --> 179b6b1cb6755e31.FindAirdropper:5:7
  |
5 | import FindMarket from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
 --> 179b6b1cb6755e31.FindAirdropper:6:7
  |
6 | import FindViews from 0x179b6b1cb6755e31
  |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindLostAndFoundWrapper` in `179b6b1cb6755e31.FindLostAndFoundWrapper`
 --> 179b6b1cb6755e31.FindAirdropper:7:7
  |
7 | import FindLostAndFoundWrapper from 0x179b6b1cb6755e31
  |        ^^^^^^^^^^^^^^^^^^^^^^^ available exported declarations are:


error: cannot find type in this scope: `FungibleToken.Withdraw`
  --> 179b6b1cb6755e31.FindAirdropper:66:155
   |
66 |     access(all) fun forcedAirdrop(pointer: FindViews.AuthNFTPointer, receiver: Address, path: PublicPath, context: {String : String}, storagePayment: auth(FungibleToken.Withdraw) &{FungibleToken.Vault}, flowTokenRepayment: Capability<&{FungibleToken.Receiver}>, deepValidation: Bool) {
   |                                                                                                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: cannot find type in this scope: `FungibleToken.Withdraw`
  --> 179b6b1cb6755e31.FindAirdropper:98:159
   |
98 |     access(all) fun subsidizedAirdrop(pointer: FindViews.AuthNFTPointer, receiver: Address, path: PublicPath, context: {String : String}, storagePayment: auth(FungibleToken.Withdraw) &{FungibleToken.Vault}, flowTokenRepayment: Capability<&{FungibleToken.Receiver}>, deepValidation: Bool) {
   |                                                                                                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope


, ExampleNFT: failed to deploy contract ExampleNFT: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> 645c964f77570a8b8bfe53aed0b8e8d17e1829e0749ab9929fa773851e5739b4:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find declaration `FindViews` in `179b6b1cb6755e31.FindViews`
  --> 179b6b1cb6755e31.ExampleNFT:15:7
   |
15 | import FindViews from 0x179b6b1cb6755e31
   |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `FindForge` in `179b6b1cb6755e31.FindForge`
  --> 179b6b1cb6755e31.ExampleNFT:16:7
   |
16 | import FindForge from 0x179b6b1cb6755e31
   |        ^^^^^^^^^ available exported declarations are:


error: cannot find declaration `DapperUtilityCoin` in `01cf0e2f2f715450.DapperUtilityCoin`
  --> 179b6b1cb6755e31.ExampleNFT:17:7
   |
17 | import DapperUtilityCoin from 0x01cf0e2f2f715450
   |        ^^^^^^^^^^^^^^^^^ available exported declarations are:


error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.ExampleNFT:215:15
    |
215 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: ambiguous intersection type
   --> 179b6b1cb6755e31.ExampleNFT:405:41
    |
405 |     access(account) fun createForge() : @{FindForge.Forge} {
    |                                          ^^^^^^^^^^^^^^^^^

error: too many arguments
   --> 179b6b1cb6755e31.ExampleNFT:327:33
    |
327 |             let collectionData = MetadataViews.NFTCollectionData(
328 |                 storagePath: collectionRef.getDefaultStoragePath()!,
329 |                 publicPath: collectionRef.getDefaultPublicPath()!,
330 |                 providerPath: /private/cadenceExampleNFTCollection,
331 |                 publicCollection: Type<&ExampleNFT.Collection>(),
332 |                 publicLinkedType: Type<&ExampleNFT.Collection>(),
333 |                 providerLinkedType: Type<auth(NonFungibleToken.Withdraw) &ExampleNFT.Collection>(),
334 |                 createEmptyCollectionFunction: (fun(): @{NonFungibleToken.Collection} {
335 |                     return <-collectionRef.createEmptyCollection()
336 |                 })
337 |             )
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected up to 5, got 7

error: mismatched types
   --> 179b6b1cb6755e31.ExampleNFT:330:30
    |
330 |                 providerPath: /private/cadenceExampleNFTCollection,
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Type`, got `PrivatePath`

error: mismatched types
   --> 179b6b1cb6755e31.ExampleNFT:332:34
    |
332 |                 publicLinkedType: Type<&ExampleNFT.Collection>(),
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `fun(): @{NonFungibleToken.Collection}`, got `Type`

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.ExampleNFT:333:46
    |
333 |                 providerLinkedType: Type<auth(NonFungibleToken.Withdraw) &ExampleNFT.Collection>(),
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: incorrect argument label
   --> 179b6b1cb6755e31.ExampleNFT:330:16
    |
330 |                 providerPath: /private/cadenceExampleNFTCollection,
    |                 ^^^^^^^^^^^^^ expected `publicCollection`, got `providerPath`

error: incorrect argument label
   --> 179b6b1cb6755e31.ExampleNFT:331:16
    |
331 |                 publicCollection: Type<&ExampleNFT.Collection>(),
    |                 ^^^^^^^^^^^^^^^^^ expected `publicLinkedType`, got `publicCollection`

error: incorrect argument label
   --> 179b6b1cb6755e31.ExampleNFT:332:16
    |
332 |                 publicLinkedType: Type<&ExampleNFT.Collection>(),
    |                 ^^^^^^^^^^^^^^^^^ expected `createEmptyCollectionFunction`, got `publicLinkedType`

error: contract `ExampleNFT` does not conform to contract interface `ViewResolver`
  --> 179b6b1cb6755e31.ExampleNFT:21:21
   |
21 | access(all) contract ExampleNFT: ViewResolver {
   |                      ^ `ExampleNFT` is missing definitions for members: `getContractViews`, `resolveContractView`

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.ExampleNFT:114:30
    |
114 |                 views.concat([Type<FindViews.SoulBound>()])
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot infer type parameter: `T`
   --> 179b6b1cb6755e31.ExampleNFT:155:17
    |
155 |             case Type<FindViews.SoulBound>() :
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: resource `ExampleNFT.NFT` does not conform to resource interface `NonFungibleToken.NFT`
  --> 179b6b1cb6755e31.ExampleNFT:51:25
   |
51 |     access(all) resource NFT: NonFungibleToken.NFT, ViewResolver.Resolver {
   |                          ^ `ExampleNFT.NFT` is missing definitions for members: `createEmptyCollection`

error: missing access modifier for function
   --> 179b6b1cb6755e31.ExampleNFT:215:8
    |
215 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |         ^

error: resource `ExampleNFT.Collection` does not conform to resource interface `NonFungibleToken.Collection`
   --> 179b6b1cb6755e31.ExampleNFT:172:25
    |
172 |     access(all) resource Collection: NonFungibleToken.Collection {
    |                          ^
   ... 
    |
215 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                                                   -------- mismatch here

error: missing access modifier for function
   --> 179b6b1cb6755e31.ExampleNFT:372:8
    |
372 |         access(FindForge.ForgeOwner) fun mint(platform: FindForge.MinterPlatform, data: AnyStruct, verifier: &FindForge.Verifier) : @{NonFungibleToken.NFT} {
    |         ^

error: missing access modifier for function
   --> 179b6b1cb6755e31.ExampleNFT:389:8
    |
389 |         access(FindForge.ForgeOwner) fun addContractData(platform: FindForge.MinterPlatform, data: AnyStruct, verifier: &FindForge.Verifier) {
    |         ^


, Bl0x: failed to deploy contract Bl0x: execution error code 1: [Error Code: 1101] error caused by: 1 error occurred:
	* transaction execute failed: [Error Code: 1101] cadence runtime error: Execution failed:
error: cannot deploy invalid contract
 --> a16d17cb026af670bf868c01f6209d41fd634148dd98d2cf010a105a9a2518d1:4:3
  |
4 | 			signer.contracts.add(name: name, code: code.utf8 )
  | 			^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.Bl0x:293:15
    |
293 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: contract `Bl0x` does not conform to contract interface `ViewResolver`
 --> 179b6b1cb6755e31.Bl0x:5:21
  |
5 | access(all) contract Bl0x: ViewResolver {
  |                      ^ `Bl0x` is missing definitions for members: `getContractViews`, `resolveContractView`

error: too many arguments
   --> 179b6b1cb6755e31.Bl0x:187:23
    |
187 |                 return MetadataViews.NFTCollectionData(storagePath: Bl0x.CollectionStoragePath,
188 |                 publicPath: Bl0x.CollectionPublicPath,
189 |                 providerPath: /private/bl0xNFTCollection,
190 |                 publicCollection: Type<&Collection>(),
191 |                 publicLinkedType: Type<&Collection>(),
192 |                 providerLinkedType: Type<auth(NonFungibleToken.Withdraw) &Collection>(),
193 |                 createEmptyCollectionFunction: (fun(): @{NonFungibleToken.Collection} {return <- Bl0x.createEmptyCollection()}))
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected up to 5, got 7

error: mismatched types
   --> 179b6b1cb6755e31.Bl0x:189:30
    |
189 |                 providerPath: /private/bl0xNFTCollection,
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Type`, got `PrivatePath`

error: mismatched types
   --> 179b6b1cb6755e31.Bl0x:191:34
    |
191 |                 publicLinkedType: Type<&Collection>(),
    |                                   ^^^^^^^^^^^^^^^^^^^ expected `fun(): @{NonFungibleToken.Collection}`, got `Type`

error: cannot find type in this scope: `NonFungibleToken.Withdraw`
   --> 179b6b1cb6755e31.Bl0x:192:46
    |
192 |                 providerLinkedType: Type<auth(NonFungibleToken.Withdraw) &Collection>(),
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not found in this scope

error: incorrect argument label
   --> 179b6b1cb6755e31.Bl0x:189:16
    |
189 |                 providerPath: /private/bl0xNFTCollection,
    |                 ^^^^^^^^^^^^^ expected `publicCollection`, got `providerPath`

error: incorrect argument label
   --> 179b6b1cb6755e31.Bl0x:190:16
    |
190 |                 publicCollection: Type<&Collection>(),
    |                 ^^^^^^^^^^^^^^^^^ expected `publicLinkedType`, got `publicCollection`

error: incorrect argument label
   --> 179b6b1cb6755e31.Bl0x:191:16
    |
191 |                 publicLinkedType: Type<&Collection>(),
    |                 ^^^^^^^^^^^^^^^^^ expected `createEmptyCollectionFunction`, got `publicLinkedType`

error: resource `Bl0x.NFT` does not conform to resource interface `NonFungibleToken.NFT`
  --> 179b6b1cb6755e31.Bl0x:70:25
   |
70 |     access(all) resource NFT: NonFungibleToken.NFT, ViewResolver.Resolver {
   |                          ^ `Bl0x.NFT` is missing definitions for members: `createEmptyCollection`

error: missing access modifier for function
   --> 179b6b1cb6755e31.Bl0x:293:8
    |
293 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |         ^

error: resource `Bl0x.Collection` does not conform to resource interface `NonFungibleToken.Provider`
   --> 179b6b1cb6755e31.Bl0x:278:25
    |
278 |     access(all) resource Collection: NonFungibleToken.Provider, NonFungibleToken.Receiver, NonFungibleToken.Collection, ViewResolver.ResolverCollection {
    |                          ^
   ... 
    |
293 |         access(NonFungibleToken.Withdraw | NonFungibleToken.Owner) fun withdraw(withdrawID: UInt64): @{NonFungibleToken.NFT} {
    |                                                   -------- mismatch here


,

goroutine 1 [running]:
github.com/findonflow/find.TestMain(0x14000094688?)
	/Users/bjartek/dev/find/setup_test.go:35 +0xe0
main.main()
	_testmain.go:103 +0x1ac
FAIL	github.com/findonflow/find	5.433s

DONE 0 tests, 1 failure in 11.182s
